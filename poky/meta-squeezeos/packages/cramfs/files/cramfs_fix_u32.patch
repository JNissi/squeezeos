Index: cramfs-1.1/cramfsck.c
===================================================================
--- cramfs-1.1.orig/cramfsck.c	2002-02-23 00:00:42.000000000 +0000
+++ cramfs-1.1/cramfsck.c	2008-07-17 10:24:06.000000000 +0100
@@ -204,7 +204,7 @@
 static void test_crc(int start)
 {
 	void *buf;
-	u32 crc;
+	__u32 crc;
 
 	if (!(super.flags & CRAMFS_FLAG_FSID_VERSION_2)) {
 #ifdef INCLUDE_FS_TESTS
@@ -364,7 +364,7 @@
 
 	do {
 		unsigned long out = PAGE_CACHE_SIZE;
-		unsigned long next = *(u32 *) romfs_read(offset);
+		unsigned long next = *(__u32 *) romfs_read(offset);
 
 		if (next > end_data) {
 			end_data = next;
@@ -525,7 +525,7 @@
 {
 	unsigned long offset = i->offset << 2;
 	unsigned long curr = offset + 4;
-	unsigned long next = *(u32 *) romfs_read(offset);
+	unsigned long next = *(__u32 *) romfs_read(offset);
 	unsigned long size;
 
 	if (offset == 0) {
Index: cramfs-1.1/mkcramfs.c
===================================================================
--- cramfs-1.1.orig/mkcramfs.c	2002-02-20 08:03:32.000000000 +0000
+++ cramfs-1.1/mkcramfs.c	2008-07-17 10:23:54.000000000 +0100
@@ -86,7 +86,7 @@
  *
  * If opt_verbose is 1, be verbose.  If it is higher, be even more verbose.
  */
-static u32 opt_edition = 0;
+static __u32 opt_edition = 0;
 static int opt_errors = 0;
 static int opt_holes = 0;
 static int opt_pad = 0;
@@ -608,7 +608,7 @@
 			die(MKFS_ERROR, 0, "AIEEE: block \"compressed\" to > 2*blocklength (%ld)", len);
 		}
 
-		*(u32 *) (base + offset) = curr;
+		*(__u32 *) (base + offset) = curr;
 		offset += 4;
 	} while (size);
 
@@ -689,7 +689,7 @@
 	/* initial guess (upper-bound) of required filesystem size */
 	loff_t fslen_ub = sizeof(struct cramfs_super);
 	char const *dirname, *outfile;
-	u32 crc;
+	__u32 crc;
 	int c;			/* for getopt */
 	char *ep;		/* for strtoul */
 
