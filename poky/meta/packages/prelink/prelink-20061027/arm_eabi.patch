---
 src/arch-arm.c |  177 +++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 172 insertions(+), 5 deletions(-)

Index: prelink-0.0.20061027/src/arch-arm.c
===================================================================
--- prelink-0.0.20061027.orig/src/arch-arm.c	2006-08-13 16:18:17.000000000 +0100
+++ prelink-0.0.20061027/src/arch-arm.c	2008-06-12 10:46:12.000000000 +0100
@@ -145,6 +145,27 @@
       error (0, 0, "%s: R_ARM_PC24 relocs with non-zero addend should not be present in prelinked REL sections",
 	     dso->filename);
       return 1;
+    /* DTPMOD32 is impossible to predict unless prelink sets the rules. 
+       DTPOFF32/TPOFF32 are converted REL->RELA.  */
+    case R_ARM_TLS_DTPOFF32:
+      error (0, 0, "%s: R_ARM_TLS_DTPOFF32 relocs should not be present in prelinked REL section",
+	       dso->filename);
+      return 1;
+    case R_ARM_TLS_DTPMOD32:
+      if (dso->ehdr.e_type == ET_EXEC)
+	{
+	  error (0, 0, "%s: R_ARM_TLS_DTPMOD32 reloc in executable?",
+		 dso->filename);
+	  return 1;
+	}
+      break;
+    case R_ARM_TLS_TPOFF32:
+      if (dso->ehdr.e_type == ET_EXEC) {
+	error (0, 0, "%s: R_ARM_TLS_TPOFF32 relocs should not be present in prelinked ET_EXEC REL sections",
+	       dso->filename);
+	return 1;
+      }
+      break;
     case R_ARM_COPY:
       if (dso->ehdr.e_type == ET_EXEC)
 	/* COPY relocs are handled specially in generic code.  */
@@ -195,6 +216,24 @@
       write_le32 (dso, rela->r_offset,
 		  (read_ule32 (dso, rela->r_offset) & 0xff000000) | val);
       break;
+    case R_ARM_TLS_DTPOFF32:
+      write_le32 (dso, rela->r_offset, value + rela->r_addend);
+      break;
+    /* DTPMOD32 and TPOFF32 are impossible to predict unless prelink
+       sets the rules.  */
+    case R_ARM_TLS_DTPMOD32:
+      if (dso->ehdr.e_type == ET_EXEC)
+	{
+	  error (0, 0, "%s: R_ARM_TLS_DTPMOD32 reloc in executable?",
+		 dso->filename);
+	  return 1;
+	}
+      break;
+    case R_ARM_TLS_TPOFF32:
+      if (dso->ehdr.e_type == ET_EXEC && info->resolvetls)
+	write_le32 (dso, rela->r_offset,
+		    value + rela->r_addend + info->resolvetls->offset);
+      break;
     case R_ARM_COPY:
       if (dso->ehdr.e_type == ET_EXEC)
 	/* COPY relocs are handled specially in generic code.  */
@@ -315,6 +354,7 @@
 {
   GElf_Addr value;
   struct prelink_conflict *conflict;
+  struct prelink_tls *tls;
   GElf_Rela *ret;
 
   if (GELF_R_TYPE (rel->r_info) == R_ARM_RELATIVE
@@ -324,8 +364,32 @@
   conflict = prelink_conflict (info, GELF_R_SYM (rel->r_info),
 			       GELF_R_TYPE (rel->r_info));
   if (conflict == NULL)
-    return 0;
-  value = conflict_lookup_value (conflict);
+    {
+      if (info->curtls == NULL)
+	return 0;
+      switch (GELF_R_TYPE (rel->r_info))
+	{
+	/* Even local DTPMOD and {D,}TPOFF relocs need conflicts.  */
+	case R_ARM_TLS_DTPMOD32:
+	case R_ARM_TLS_DTPOFF32:
+	case R_ARM_TLS_TPOFF32:
+	  break;
+	default:
+	  return 0;
+	}
+      value = 0;
+    }
+  else
+    {
+      /* DTPOFF32 wants to see only real conflicts, not lookups
+	 with reloc_class RTYPE_CLASS_TLS.  */
+      if (GELF_R_TYPE (rel->r_info) == R_ARM_TLS_DTPOFF32
+	  && conflict->lookup.tls == conflict->conflict.tls
+	  && conflict->lookupval == conflict->conflictval)
+	return 0;
+
+      value = conflict_lookup_value (conflict);
+    }
   ret = prelink_conflict_add_rela (info);
   if (ret == NULL)
     return 1;
@@ -342,6 +406,33 @@
       error (0, 0, "%s: R_ARM_%s relocs should not be present in prelinked REL sections",
 	     dso->filename, GELF_R_TYPE (rel->r_info) == R_ARM_ABS32 ? "ABS32" : "PC24");
       return 1;
+    case R_ARM_TLS_DTPMOD32:
+    case R_ARM_TLS_DTPOFF32:
+    case R_ARM_TLS_TPOFF32:
+      if (conflict != NULL
+	  && (conflict->reloc_class != RTYPE_CLASS_TLS
+	      || conflict->lookup.tls == NULL))
+	{
+	  error (0, 0, "%s: R_ARM_TLS not resolving to STT_TLS symbol",
+		 dso->filename);
+	  return 1;
+	}
+      tls = conflict ? conflict->lookup.tls : info->curtls;
+      ret->r_info = GELF_R_INFO (0, R_ARM_ABS32);
+      switch (GELF_R_TYPE (rel->r_info))
+	{
+	case R_ARM_TLS_DTPMOD32:
+	  ret->r_addend = tls->modid;
+	  break;
+	case R_ARM_TLS_DTPOFF32:
+	  ret->r_addend = value + read_ule32 (dso, rel->r_offset);
+	  break;
+	case R_ARM_TLS_TPOFF32:
+	  ret->r_addend = value + read_ule32 (dso, rel->r_offset)
+			    + tls->offset;
+	  break;
+	}
+      break;
     case R_ARM_COPY:
       error (0, 0, "R_ARM_COPY should not be present in shared libraries");
       return 1;
@@ -359,6 +450,7 @@
 {
   GElf_Addr value;
   struct prelink_conflict *conflict;
+  struct prelink_tls *tls;
   GElf_Rela *ret;
   Elf32_Sword val;
 
@@ -369,8 +461,32 @@
   conflict = prelink_conflict (info, GELF_R_SYM (rela->r_info),
 			       GELF_R_TYPE (rela->r_info));
   if (conflict == NULL)
-    return 0;
-  value = conflict_lookup_value (conflict);
+    {
+      if (info->curtls == NULL)
+	return 0;
+      switch (GELF_R_TYPE (rela->r_info))
+	{
+	/* Even local DTPMOD and {D,}TPOFF relocs need conflicts.  */
+	case R_ARM_TLS_DTPMOD32:
+	case R_ARM_TLS_DTPOFF32:
+	case R_ARM_TLS_TPOFF32:
+	  break;
+	default:
+	  return 0;
+	}
+      value = 0;
+    }
+  else
+    {
+      /* DTPOFF32 wants to see only real conflicts, not lookups
+	 with reloc_class RTYPE_CLASS_TLS.  */
+      if (GELF_R_TYPE (rela->r_info) == R_ARM_TLS_DTPOFF32
+	  && conflict->lookup.tls == conflict->conflict.tls
+	  && conflict->lookupval == conflict->conflictval)
+	return 0;
+
+      value = conflict_lookup_value (conflict);
+    }
   ret = prelink_conflict_add_rela (info);
   if (ret == NULL)
     return 1;
@@ -398,6 +514,32 @@
     case R_ARM_COPY:
       error (0, 0, "R_ARM_COPY should not be present in shared libraries");
       return 1;
+    case R_ARM_TLS_DTPMOD32:
+    case R_ARM_TLS_DTPOFF32:
+    case R_ARM_TLS_TPOFF32:
+      if (conflict != NULL
+	  && (conflict->reloc_class != RTYPE_CLASS_TLS
+	      || conflict->lookup.tls == NULL))
+	{
+	  error (0, 0, "%s: R_ARM_TLS not resolving to STT_TLS symbol",
+		 dso->filename);
+	  return 1;
+	}
+      tls = conflict ? conflict->lookup.tls : info->curtls;
+      ret->r_info = GELF_R_INFO (0, R_ARM_ABS32);
+      switch (GELF_R_TYPE (rela->r_info))
+	{
+	case R_ARM_TLS_DTPMOD32:
+	  ret->r_addend = tls->modid;
+	  break;
+	case R_ARM_TLS_DTPOFF32:
+	  ret->r_addend = value + rela->r_addend;
+	  break;
+	case R_ARM_TLS_TPOFF32:
+	  ret->r_addend = value + rela->r_addend + tls->offset;
+	  break;
+	}
+      break;
     default:
       error (0, 0, "%s: Unknown arm relocation type %d", dso->filename,
 	     (int) GELF_R_TYPE (rela->r_info));
@@ -418,6 +560,8 @@
       abort ();
     case R_ARM_RELATIVE:
     case R_ARM_ABS32:
+    case R_ARM_TLS_TPOFF32:
+    case R_ARM_TLS_DTPOFF32:
       rela->r_addend = (Elf32_Sword) read_ule32 (dso, rel->r_offset);
       break;
     case R_ARM_PC24:
@@ -426,6 +570,7 @@
       break;
     case R_ARM_COPY:
     case R_ARM_GLOB_DAT:
+    case R_ARM_TLS_DTPMOD32:
       rela->r_addend = 0;
       break;
     }
@@ -445,6 +590,8 @@
       abort ();
     case R_ARM_RELATIVE:
     case R_ARM_ABS32:
+    case R_ARM_TLS_TPOFF32:
+    case R_ARM_TLS_DTPOFF32:
       write_le32 (dso, rela->r_offset, rela->r_addend);
       break;
     case R_ARM_PC24:
@@ -453,6 +600,7 @@
 		  | ((rela->r_addend >> 2) & 0xffffff));
       break;
     case R_ARM_GLOB_DAT:
+    case R_ARM_TLS_DTPMOD32:
       write_le32 (dso, rela->r_offset, 0);
       break;
     }
@@ -488,6 +636,18 @@
 		/* FALLTHROUGH */
 	      case R_ARM_PC24:
 		return 1;
+	      case R_ARM_TLS_DTPOFF32:
+		/* We can prelink these fields, and the addend is relative
+		   to the symbol value.  A RELA entry is needed.  */
+		return 1;
+	      case R_ARM_TLS_TPOFF32:
+		/* In shared libraries TPOFF32 is changed always into
+		   conflicts, for executables we need to preserve
+		   original addend.  */
+		if (dso->ehdr.e_type == ET_EXEC) {
+		  return 1;
+		}
+		break;
 	      }
 	}
     }
@@ -612,6 +772,12 @@
 	return 0;
       error (0, 0, "%s: R_ARM_COPY reloc in shared library?", dso->filename);
       return 1;
+    case R_ARM_TLS_DTPMOD32:
+      write_le32 (dso, rel->r_offset, 0);
+      break;
+    case R_ARM_TLS_DTPOFF32:
+    case R_ARM_TLS_TPOFF32:
+      break;
     default:
       error (0, 0, "%s: Unknown arm relocation type %d", dso->filename,
 	     (int) GELF_R_TYPE (rel->r_info));
@@ -634,6 +800,10 @@
     {
     case R_ARM_COPY: return RTYPE_CLASS_COPY;
     case R_ARM_JUMP_SLOT: return RTYPE_CLASS_PLT;
+    case R_ARM_TLS_DTPMOD32:
+    case R_ARM_TLS_DTPOFF32:
+    case R_ARM_TLS_TPOFF32:
+      return RTYPE_CLASS_TLS;
     default: return RTYPE_CLASS_VALID;
     }
 }
@@ -646,7 +816,7 @@
   .R_JMP_SLOT = R_ARM_JUMP_SLOT,
   .R_COPY = R_ARM_COPY,
   .R_RELATIVE = R_ARM_RELATIVE,
-  .dynamic_linker = "/lib/ld-linux.so.2",
+  .dynamic_linker = "/lib/ld-linux.so.3",
   .adjust_dyn = arm_adjust_dyn,
   .adjust_rel = arm_adjust_rel,
   .adjust_rela = arm_adjust_rela,
