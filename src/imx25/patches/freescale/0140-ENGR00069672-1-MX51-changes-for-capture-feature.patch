From 56582b8ca971bf9d934b9df563b4fa45a03bff41 Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Fri, 10 Oct 2008 10:59:56 +0800
Subject: [PATCH] ENGR00069672-1 MX51: changes for capture feature

platform code changes for capture feature

Signed-off-by: Liu Ying <b17645@freescale.com>
---
 arch/arm/mach-mx51/clock.c            |  182 +++++++++++++++++++++++++++++++++
 arch/arm/mach-mx51/devices.c          |   13 ++-
 arch/arm/mach-mx51/mx51_3stack.c      |   12 ++
 arch/arm/mach-mx51/mx51_3stack_gpio.c |  104 ++++++++++++++++++-
 arch/arm/mach-mx51/mx51_pins.h        |   13 +++
 5 files changed, 320 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-mx51/clock.c b/arch/arm/mach-mx51/clock.c
index 5defff7..43a4fbb 100644
--- a/arch/arm/mach-mx51/clock.c
+++ b/arch/arm/mach-mx51/clock.c
@@ -41,6 +41,35 @@ extern void propagate_rate(struct clk *tclk);
 extern void board_ref_clk_rate(unsigned long *ckil, unsigned long *osc,
 			       unsigned long *ckih, unsigned long *ckih2);
 
+static void __calc_pre_post_dividers(u32 div, u32 *pre, u32 *post)
+{
+	u32 min_pre, temp_pre, old_err, err;
+
+	if (div >= 512) {
+		*pre = 8;
+		*post = 64;
+	} else if (div >= 8) {
+		min_pre = (div - 1) / 64 + 1;
+		old_err = 8;
+		for (temp_pre = 8; temp_pre >= min_pre; temp_pre--) {
+			err = div % temp_pre;
+			if (err == 0) {
+				*pre = temp_pre;
+				break;
+			}
+			err = temp_pre - err;
+			if (err < old_err) {
+				old_err = err;
+				*pre = temp_pre;
+			}
+		}
+		*post = (div + *pre - 1) / *pre;
+	} else if (div < 8) {
+		*pre = div;
+		*post = 1;
+	}
+}
+
 static int _clk_enable(struct clk *clk)
 {
 	u32 reg;
@@ -601,6 +630,157 @@ static struct clk ipu_di_clk = {
 	.disable = _clk_disable,
 };
 
+static int _clk_csi0_set_parent(struct clk *clk, struct clk *parent)
+{
+	u32 reg, mux;
+
+	reg = __raw_readl(MXC_CCM_CSCMR2);
+	mux = _get_mux(parent, &pll1_sw_clk, &pll2_sw_clk, &pll3_sw_clk, NULL);
+	reg = (reg & ~MXC_CCM_CSCMR2_CSI_MCLK1_CLK_SEL_MASK) |
+		    (mux << MXC_CCM_CSCMR2_CSI_MCLK1_CLK_SEL_OFFSET);
+	__raw_writel(reg, MXC_CCM_CSCMR2);
+
+	return 0;
+}
+
+static void _clk_csi0_recalc(struct clk *clk)
+{
+	u32 reg, pred, podf;
+
+	reg = __raw_readl(MXC_CCM_CSCDR4);
+	pred = ((reg & MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PRED_MASK) >>
+			MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PRED_OFFSET) + 1;
+	podf = ((reg & MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PODF_MASK) >>
+			MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PODF_OFFSET) + 1;
+	clk->rate = clk->parent->rate / (pred * podf);
+}
+
+static unsigned long _clk_csi0_round_rate(struct clk *clk, unsigned long rate)
+{
+	u32 pre, post;
+	u32 div = clk->parent->rate / rate;
+	if (clk->parent->rate % rate)
+		div++;
+
+	__calc_pre_post_dividers(div, &pre, &post);
+
+	return clk->parent->rate / (pre * post);
+}
+
+static int _clk_csi0_set_rate(struct clk *clk, unsigned long rate)
+{
+	u32 reg;
+	u32 div;
+	u32 pre, post;
+
+	div = clk->parent->rate / rate;
+
+	if ((clk->parent->rate / div) != rate)
+		return -EINVAL;
+
+	__calc_pre_post_dividers(div, &pre, &post);
+
+	/* Set CSI clock divider */
+	reg = __raw_readl(MXC_CCM_CSCDR4) &
+	    ~(MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PRED_MASK |
+		MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PODF_MASK);
+	reg |= (post - 1) << MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PODF_OFFSET;
+	reg |= (pre - 1) << MXC_CCM_CSCDR4_CSI_MCLK1_CLK_PRED_OFFSET;
+	__raw_writel(reg, MXC_CCM_CSCDR4);
+
+	clk->rate = rate;
+	return 0;
+}
+
+static struct clk csi0_clk = {
+	.name = "csi_mclk1",
+	.parent = &pll3_sw_clk,
+	.set_parent = _clk_csi0_set_parent,
+	.recalc = _clk_csi0_recalc,
+	.round_rate = _clk_csi0_round_rate,
+	.set_rate = _clk_csi0_set_rate,
+	.enable = _clk_enable,
+	.enable_reg = MXC_CCM_CCGR6,
+	.enable_shift = MXC_CCM_CCGR6_CG2_OFFSET,
+	.disable = _clk_disable,
+};
+
+static int _clk_csi1_set_parent(struct clk *clk, struct clk *parent)
+{
+	u32 reg, mux;
+
+	reg = __raw_readl(MXC_CCM_CSCMR2);
+	mux = _get_mux(parent, &pll1_sw_clk, &pll2_sw_clk, &pll3_sw_clk, NULL);
+	reg = (reg & ~MXC_CCM_CSCMR2_CSI_MCLK2_CLK_SEL_MASK) |
+		    (mux << MXC_CCM_CSCMR2_CSI_MCLK2_CLK_SEL_OFFSET);
+	__raw_writel(reg, MXC_CCM_CSCMR2);
+
+	return 0;
+}
+
+static void _clk_csi1_recalc(struct clk *clk)
+{
+	u32 reg, pred, podf;
+
+	reg = __raw_readl(MXC_CCM_CSCDR4);
+	pred = ((reg & MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PRED_MASK) >>
+			MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PRED_OFFSET) + 1;
+	podf = ((reg & MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PODF_MASK) >>
+			MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PODF_OFFSET) + 1;
+	clk->rate = clk->parent->rate / (pred * podf);
+}
+
+static unsigned long _clk_csi1_round_rate(struct clk *clk, unsigned long rate)
+{
+	u32 pre, post;
+	u32 div = clk->parent->rate / rate;
+	if (clk->parent->rate % rate)
+		div++;
+
+	__calc_pre_post_dividers(div, &pre, &post);
+
+	return clk->parent->rate / (pre * post);
+}
+
+static int _clk_csi1_set_rate(struct clk *clk, unsigned long rate)
+{
+	u32 reg;
+	u32 div;
+	u32 pre, post;
+
+	div = clk->parent->rate / rate;
+
+	if ((clk->parent->rate / div) != rate)
+		return -EINVAL;
+
+	__calc_pre_post_dividers(div, &pre, &post);
+
+	/* Set CSI clock divider */
+	reg = __raw_readl(MXC_CCM_CSCDR4) &
+	    ~(MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PRED_MASK |
+		MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PODF_MASK);
+	reg |= (post - 1) << MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PODF_OFFSET;
+	reg |= (pre - 1) << MXC_CCM_CSCDR4_CSI_MCLK2_CLK_PRED_OFFSET;
+	__raw_writel(reg, MXC_CCM_CSCDR4);
+
+	clk->rate = rate;
+	return 0;
+}
+
+static struct clk csi1_clk = {
+	.name = "csi_mclk2",
+	.parent = &pll3_sw_clk,
+	.set_parent = _clk_csi1_set_parent,
+	.recalc = _clk_csi1_recalc,
+	.round_rate = _clk_csi1_round_rate,
+	.set_rate = _clk_csi1_set_rate,
+	.enable = _clk_enable,
+	.enable_reg = MXC_CCM_CCGR6,
+	.enable_shift = MXC_CCM_CCGR6_CG3_OFFSET,
+	.disable = _clk_disable,
+};
+
+
 static int _clk_hsc_enable(struct clk *clk)
 {
 	u32 reg;
@@ -1884,6 +2064,8 @@ static struct clk *mxc_clks[] = {
 	&ipu_clk,
 	&ipu_di_clk,
 	&tve_clk,
+	&csi0_clk,
+	&csi1_clk,
 	&uart_main_clk,
 	&uart1_clk[0],
 	&uart1_clk[1],
diff --git a/arch/arm/mach-mx51/devices.c b/arch/arm/mach-mx51/devices.c
index 8d95c28..dfb2bcc 100644
--- a/arch/arm/mach-mx51/devices.c
+++ b/arch/arm/mach-mx51/devices.c
@@ -222,8 +222,10 @@ static struct platform_device mxc_ipu_device = {
 
 static void mxc_init_ipu(void)
 {
-	u32 base = IO_ADDRESS(MIPI_HSC_BASE_ADDR);
+	u32 reg_hsc_mcd = IO_ADDRESS(MIPI_HSC_BASE_ADDR);
+	u32 reg_hsc_mxt_conf = IO_ADDRESS(MIPI_HSC_BASE_ADDR + 0x800);
 	struct clk *clk;
+	uint32_t temp;
 
 	mxc_ipu_data.di_clk[1] = clk_get(NULL, "ipu_di_clk");
 	clk = clk_get(NULL, "tve_clk");
@@ -234,7 +236,14 @@ static void mxc_init_ipu(void)
 	clk = clk_get(NULL, "mipi_hsp_clk");
 	if (!IS_ERR(clk)) {
 		clk_enable(clk);
-		__raw_writel(0xF00, base);
+
+		/* Temporarily setup MIPI module to legacy mode */
+		__raw_writel(0xF00, reg_hsc_mcd);
+
+		/* CSI mode reserved*/
+		temp = __raw_readl(reg_hsc_mxt_conf);
+		__raw_writel(temp | 0x0FF, reg_hsc_mxt_conf);
+
 		clk_disable(clk);
 		clk_put(clk);
 	}
diff --git a/arch/arm/mach-mx51/mx51_3stack.c b/arch/arm/mach-mx51/mx51_3stack.c
index 7ff194b..cab8ae6 100644
--- a/arch/arm/mach-mx51/mx51_3stack.c
+++ b/arch/arm/mach-mx51/mx51_3stack.c
@@ -309,7 +309,19 @@ static struct i2c_board_info mxc_i2c1_board_info[] __initdata = {
 };
 #endif
 #if defined(CONFIG_I2C_MXC_HS) || defined(CONFIG_I2C_MXC_HS_MODULE)
+static struct mxc_camera_platform_data camera_data = {
+	.io_regulator = "SW4",
+	.analog_regulator = "VIOHI",
+	.mclk = 24000000,
+	.csi = 0,
+};
+
 static struct i2c_board_info mxc_i2c_hs_board_info[] __initdata = {
+	{
+		.type = "ov3640",
+		.addr = 0x3C,
+		.platform_data = (void *)&camera_data,
+	},
 };
 #endif
 
diff --git a/arch/arm/mach-mx51/mx51_3stack_gpio.c b/arch/arm/mach-mx51/mx51_3stack_gpio.c
index b765fa2..7a6207f 100644
--- a/arch/arm/mach-mx51/mx51_3stack_gpio.c
+++ b/arch/arm/mach-mx51/mx51_3stack_gpio.c
@@ -709,9 +709,96 @@ void gpio_sensor_select(int sensor)
 /*!
  * Setup GPIO for sensor to be active
  *
+ * @param   csi    csi 0 or csi 1
+ *
  */
-void gpio_sensor_active(void)
+void gpio_sensor_active(unsigned int csi)
 {
+	switch (csi) {
+	case 0:
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D10, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D11, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D12, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D13, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D14, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D15, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D16, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D17, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D18, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_D19, PAD_CTL_HYS_NONE);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_PKE0, PAD_CTL_PKE_ENABLE);
+
+		mxc_request_iomux(MX51_PIN_CSI1_VSYNC, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_VSYNC, PAD_CTL_HYS_NONE |
+				PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI1_HSYNC, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI1_HSYNC, PAD_CTL_HYS_NONE |
+				PAD_CTL_SRE_SLOW);
+
+		mxc_iomux_set_pad(MX51_PIN_CSI1_PIXCLK, PAD_CTL_HYS_NONE);
+
+		mxc_request_iomux(MX51_PIN_EIM_A26, IOMUX_CONFIG_ALT5);
+		mxc_iomux_set_input(
+			MUX_IN_HSC_MIPI_MIX_IPP_IND_SENS2_DATA_EN_SELECT_INPUT,
+			INPUT_CTL_PATH0);
+		mxc_iomux_set_pad(MX51_PIN_EIM_A26, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_PULL);
+		break;
+	case 1:
+		mxc_iomux_set_pad(MX51_PIN_CSI2_PKE0, PAD_CTL_PKE_ENABLE);
+
+		mxc_request_iomux(MX51_PIN_CSI2_D12, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_D12, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI2_D13, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_D13, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI2_D18, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_D18, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI2_D19, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_D19, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI2_VSYNC, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_VSYNC, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI2_HSYNC, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_HSYNC, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_CSI2_PIXCLK, IOMUX_CONFIG_ALT0);
+		mxc_iomux_set_pad(MX51_PIN_CSI2_PIXCLK, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_GPIO1_5, IOMUX_CONFIG_ALT6);
+		mxc_iomux_set_pad(MX51_PIN_GPIO1_5, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_KEEPER |
+				  PAD_CTL_DRV_LOW | PAD_CTL_ODE_OPENDRAIN_NONE |
+				  PAD_CTL_SRE_SLOW);
+
+		mxc_request_iomux(MX51_PIN_DI2_PIN4, IOMUX_CONFIG_ALT3);
+		mxc_iomux_set_pad(MX51_PIN_DI2_PIN4, PAD_CTL_HYS_NONE |
+				  PAD_CTL_PKE_ENABLE | PAD_CTL_DRV_LOW |
+				  PAD_CTL_SRE_SLOW);
+		mxc_iomux_set_input(MUX_IN_FEC_FEC_COL_SELECT_INPUT,
+				    INPUT_CTL_PATH1);
+		break;
+	default:
+		break;
+	}
 }
 
 EXPORT_SYMBOL(gpio_sensor_active);
@@ -719,9 +806,22 @@ EXPORT_SYMBOL(gpio_sensor_active);
 /*!
  * Setup GPIO for sensor to be inactive
  *
+ * @param   csi    csi 0 or csi 1
+ *
  */
-void gpio_sensor_inactive(void)
+void gpio_sensor_inactive(unsigned int csi)
 {
+	switch (csi) {
+	case 0:
+		mxc_request_iomux(MX51_PIN_EIM_A26, IOMUX_CONFIG_ALT0);
+		break;
+	case 1:
+		mxc_request_iomux(MX51_PIN_GPIO1_5, IOMUX_CONFIG_ALT0);
+		mxc_request_iomux(MX51_PIN_DI2_PIN4, IOMUX_CONFIG_ALT0);
+		break;
+	default:
+		break;
+	}
 }
 
 EXPORT_SYMBOL(gpio_sensor_inactive);
diff --git a/arch/arm/mach-mx51/mx51_pins.h b/arch/arm/mach-mx51/mx51_pins.h
index 4f344b5..b05df03 100644
--- a/arch/arm/mach-mx51/mx51_pins.h
+++ b/arch/arm/mach-mx51/mx51_pins.h
@@ -204,8 +204,20 @@ enum iomux_pins {
 	MX51_PIN_CSI1_D8 = _MXC_BUILD_NON_GPIO_PIN(0x1A0, 0x648),
 	MX51_PIN_CSI1_D9 = _MXC_BUILD_NON_GPIO_PIN(0x1A4, 0x64C),
 	MX51_PIN_CSI1_D10 = _MXC_BUILD_NON_GPIO_PIN(0x1A8, 0x650),
+	MX51_PIN_CSI1_D11 = _MXC_BUILD_NON_GPIO_PIN(0x1AC, 0x654),
+	MX51_PIN_CSI1_D12 = _MXC_BUILD_NON_GPIO_PIN(0x1B0, 0x658),
+	MX51_PIN_CSI1_D13 = _MXC_BUILD_NON_GPIO_PIN(0x1B4, 0x65C),
+	MX51_PIN_CSI1_D14 = _MXC_BUILD_NON_GPIO_PIN(0x1B8, 0x660),
+	MX51_PIN_CSI1_D15 = _MXC_BUILD_NON_GPIO_PIN(0x1BC, 0x664),
+	MX51_PIN_CSI1_D16 = _MXC_BUILD_NON_GPIO_PIN(0x1C0, 0x668),
+	MX51_PIN_CSI1_D17 = _MXC_BUILD_NON_GPIO_PIN(0x1C4, 0x66C),
+	MX51_PIN_CSI1_D18 = _MXC_BUILD_NON_GPIO_PIN(0x1C8, 0x670),
+	MX51_PIN_CSI1_D19 = _MXC_BUILD_NON_GPIO_PIN(0x1CC, 0x674),
 	MX51_PIN_CSI1_VSYNC = _MXC_BUILD_NON_GPIO_PIN(0x1D0, 0x678),
 	MX51_PIN_CSI1_HSYNC = _MXC_BUILD_NON_GPIO_PIN(0x1D4, 0x67C),
+	MX51_PIN_CSI1_PIXCLK = _MXC_BUILD_NON_GPIO_PIN(NON_MUX_I, 0x680),
+	MX51_PIN_CSI1_MCLK = _MXC_BUILD_NON_GPIO_PIN(NON_MUX_I, 0x684),
+	MX51_PIN_CSI1_PKE0 = _MXC_BUILD_NON_GPIO_PIN(NON_MUX_I, 0x8FC),
 	MX51_PIN_CSI2_D12 = _MXC_BUILD_GPIO_PIN(3, 9, 3, 0x1D8, 0x688),
 	MX51_PIN_CSI2_D13 = _MXC_BUILD_GPIO_PIN(3, 10, 3, 0x1DC, 0x68C),
 	MX51_PIN_CSI2_D18 = _MXC_BUILD_GPIO_PIN(3, 11, 3, 0x1F0, 0x6a0),
@@ -213,6 +225,7 @@ enum iomux_pins {
 	MX51_PIN_CSI2_VSYNC = _MXC_BUILD_GPIO_PIN(3, 13, 3, 0x1F8, 0x6A8),
 	MX51_PIN_CSI2_HSYNC = _MXC_BUILD_GPIO_PIN(3, 14, 3, 0x1FC, 0x6AC),
 	MX51_PIN_CSI2_PIXCLK = _MXC_BUILD_GPIO_PIN(3, 15, 3, 0x200, 0x6B0),
+	MX51_PIN_CSI2_PKE0 = _MXC_BUILD_NON_GPIO_PIN(NON_MUX_I, 0x8CC),
 	MX51_PIN_I2C1_CLK = _MXC_BUILD_GPIO_PIN(3, 16, 3, 0x204, 0x6B4),
 	MX51_PIN_I2C1_DAT = _MXC_BUILD_GPIO_PIN(3, 17, 3, 0x208, 0x6B8),
 	MX51_PIN_AUD3_BB_TXD = _MXC_BUILD_GPIO_PIN(3, 18, 3, 0x20C, 0x6BC),
-- 
1.5.4.4

