Index: linux-2.6.26/drivers/clocksource/Makefile
===================================================================
--- linux-2.6.26.orig/drivers/clocksource/Makefile	2009-08-28 12:05:42.000000000 +0100
+++ linux-2.6.26/drivers/clocksource/Makefile	2009-08-28 12:05:49.000000000 +0100
@@ -2,3 +2,4 @@
 obj-$(CONFIG_X86_CYCLONE_TIMER)	+= cyclone.o
 obj-$(CONFIG_X86_PM_TIMER)	+= acpi_pm.o
 obj-$(CONFIG_SCx200HR_TIMER)	+= scx200_hrt.o
+obj-$(CONFIG_MXC_EPIT_CLKSRC)	+= mxc_epit_clksrc.o
Index: linux-2.6.26/drivers/clocksource/mxc_epit_clksrc.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/drivers/clocksource/mxc_epit_clksrc.c	2009-08-28 13:14:02.000000000 +0100
@@ -0,0 +1,315 @@
+/*
+ * Copyright 2009 Logitech
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/clocksource.h>
+#include <linux/clockchips.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+
+#include <asm/hardware.h>
+#include <asm/arch-mxc/clock.h>
+
+
+/* stress reading the epit register */
+//#define DEBUG_READ
+
+/* additional debug */
+//#define DEBUG_EPIT
+
+
+#define EPIT_BASE_ADDR		(IO_ADDRESS(EPIT1_BASE_ADDR))
+#define MXC_EPIT_EPITCR		(EPIT_BASE_ADDR + 0x00)
+#define MXC_EPIT_EPITSR		(EPIT_BASE_ADDR + 0x04)
+#define MXC_EPIT_EPITLR       	(EPIT_BASE_ADDR + 0x08)
+#define MXC_EPIT_EPITCMPR       (EPIT_BASE_ADDR + 0x0C)
+#define MXC_EPIT_EPITCNT       	(EPIT_BASE_ADDR + 0x10)
+
+#define EPITCR_CLKSRC_HIGHFREQ		(2 << 24)
+#define EPITCR_STOPEN			(1 << 21)
+#define EPITCR_WAITEN			(1 << 19)
+#define EPITCR_IOVW			(1 << 17)
+#define EPITCR_SWR			(1 << 16)
+#define EPITCR_RLD			(1 << 3)
+#define EPITCR_OCIEN			(1 << 2)
+#define EPITCR_ENMOD			(1 << 1)
+#define EPITCR_ENABLE			(1 << 0)
+
+#define EPITSR_OCIF			(1 << 0)
+
+
+static struct clocksource *mxc_epit_clksrc;
+static DEFINE_RAW_SPINLOCK(mxc_epit_clock_lock);
+
+
+#ifdef CONFIG_GENERIC_CLOCKEVENTS
+static int mxc_epit_set_next_event(unsigned long cycles,
+				   struct clock_event_device *evt)
+{
+	unsigned long flags;
+	u32 now, expires;
+
+	spin_lock_irqsave(&mxc_epit_clock_lock, flags);
+
+	now = __raw_readl(MXC_EPIT_EPITCNT);
+	expires = now - cycles;
+	__raw_writel(expires, MXC_EPIT_EPITCMPR);
+
+	spin_unlock_irqrestore(&mxc_epit_clock_lock, flags);
+
+	return 0;
+}
+
+static void mxc_epit_set_mode(enum clock_event_mode mode,
+			      struct clock_event_device *evt)
+{
+	u32 reg;
+
+	switch (mode) {
+	case CLOCK_EVT_MODE_PERIODIC:
+		panic("MXC EPIT: CLOCK_EVT_MODE_PERIODIC not supported\n");
+		break;
+	case CLOCK_EVT_MODE_ONESHOT:
+		/* enable interrupt */
+		reg = __raw_readl(MXC_EPIT_EPITCR);
+		reg |= EPITCR_OCIEN;
+		__raw_writel(reg, MXC_EPIT_EPITCR);
+		break;
+	case CLOCK_EVT_MODE_UNUSED:
+	case CLOCK_EVT_MODE_SHUTDOWN:
+		/* Disable interrupts */
+		reg = __raw_readl(MXC_EPIT_EPITCR);
+		reg &= ~EPITCR_OCIEN;
+		__raw_writel(reg, MXC_EPIT_EPITCR);
+		break;
+	case CLOCK_EVT_MODE_RESUME:
+		break;
+	}
+}
+
+static struct clock_event_device clkevt = {
+	.name = "epit_clkevt",
+	.features = CLOCK_EVT_FEAT_ONESHOT,
+	.rating = 399, /* must be higher than mxc gpt clksrc */
+	.shift = 18,
+       	.cpumask = CPU_MASK_CPU0,
+	.set_next_event = mxc_epit_set_next_event,
+	.set_mode = mxc_epit_set_mode,
+};
+
+
+static irqreturn_t mxc_epit_timer_interrupt(int irq, void *dev_id)
+{
+	unsigned int gptsr;
+
+	gptsr = __raw_readl(MXC_EPIT_EPITSR);
+	if (gptsr & EPITSR_OCIF) {
+		/* Clear interrupt */
+		__raw_writel(EPITSR_OCIF, MXC_EPIT_EPITSR);
+
+		clkevt.event_handler(&clkevt);
+	}
+
+	return IRQ_HANDLED;
+}
+#endif /* CONFIG_GENERIC_CLOCKEVENTS */
+
+
+static struct irqaction timer_irq = {
+	.name = "epit-irq",
+	.flags = IRQF_DISABLED | IRQF_TIMER,
+	.handler = mxc_epit_timer_interrupt,
+};
+
+
+static cycle_t mxc_epit_get_cycles(void)
+{
+	unsigned long flags;
+	unsigned long long cycles;
+	u32 cycles32, last_cycles32;
+	int is_wrapped=0, is_backward=0;
+	static u32 prev_cycles32;
+	static unsigned long long upper64;
+	static int prevent_recursive_printk;
+
+	spin_lock_irqsave(&mxc_epit_clock_lock, flags);
+
+	cycles32 = ~__raw_readl(MXC_EPIT_EPITCNT);
+
+#ifdef DEBUG_READ
+	{
+		u32 cycles32_chk;
+		long diff, max_backwards=0;
+		int i;
+
+		for (i=0; i<100; i++) {
+			cycles32_chk = ~__raw_readl(MXC_EPIT_EPITCNT);
+
+			diff =  (long)cycles32_chk - (long)cycles32;
+			if (diff < max_backwards) {
+				max_backwards = diff;
+			}
+
+			cycles32 = cycles32_chk;
+		}
+
+		if (max_backwards < 0 && !prevent_recursive_printk) {
+			prevent_recursive_printk++;
+			printk(KERN_ERR "%s: EPIT read error cycles32:%08x,%08x backwards:%ld\n", __func__, cycles32, cycles32_chk, max_backwards);
+			prevent_recursive_printk--;
+		}
+	}
+#endif
+
+	if (cycles32 < prev_cycles32) {
+		if ((prev_cycles32 - cycles32) > (1 << 31)) {
+			/* Wrap around detected */
+			is_wrapped = 1;
+			upper64 += 1LLU << 32;
+		}
+		else {
+			/* Time has jumped backwards */
+			is_backward = 1;
+		}
+	}
+	last_cycles32 = prev_cycles32;
+	prev_cycles32 = cycles32;
+
+	cycles = upper64 | (unsigned long long) cycles32;
+
+	spin_unlock_irqrestore(&mxc_epit_clock_lock, flags);
+
+
+#ifdef DEBUG_EPIT
+	if (is_wrapped && !prevent_recursive_printk) {
+		prevent_recursive_printk++;
+		printk(KERN_INFO "%s: EPIT wrap cycles:%08x,%08x\n", __func__, last_cycles32, cycles32);
+		prevent_recursive_printk--;
+	}
+#endif
+
+	if (is_backward && !prevent_recursive_printk) {
+		prevent_recursive_printk++;
+		printk(KERN_INFO "%s: EPIT backward cylces:%08x,%08x\n", __func__, last_cycles32, cycles32);
+		prevent_recursive_printk--;
+	}
+
+	return cycles;
+}
+
+
+static struct clocksource clksrc = {
+	.name           = "epit_clksrc",
+	.rating         = 399, /* must be higher than mxc gpt clksrc */
+	.read           = mxc_epit_get_cycles,
+	.mask           = CLOCKSOURCE_MASK(64),
+	.shift          = 18,
+	.flags		= CLOCK_SOURCE_IS_CONTINUOUS | CLOCK_SOURCE_VALID_FOR_HRES,
+};
+
+
+static int __init mxc_epit_init(void)
+{
+	struct clk *clk, *ahb, *per;
+	unsigned long rate;
+	int div;
+	u32 reg;
+
+	/* Configure EPIT clock from AHB */
+	ahb = clk_get(NULL, "ahb_clk");
+	per = clk_get(NULL, "per_epit_clk");
+	if (!ahb || !per || clk_set_parent(per, ahb) < 0) {
+		printk(KERN_ERR "%s EPIT can't use AHB clock\n", __func__);
+		return -1;
+	}
+
+	clk = clk_get(NULL, "epit_clk");
+	if (!clk || clk_enable(clk) < 0) {
+		printk(KERN_ERR "%s EPIT can't enable clock\n", __func__);
+		return -1;
+	}
+
+	rate = clk_get_rate(clk);
+
+
+	// XXXX dump clock rates
+	while (clk) {
+		printk("\t%s: %lu\n", clk->name, clk_get_rate(clk));
+		clk = clk_get_parent(clk);
+	}
+
+
+	div = 1;
+	while ((rate / div) > 20000000) {
+		div++;
+	}
+
+	rate /= div;
+
+	/* Reset EPIT */
+	__raw_writel(EPITCR_SWR, MXC_EPIT_EPITCR);
+	while ((__raw_readl(MXC_EPIT_EPITCR) & EPITCR_SWR) != 0)
+		mb();
+
+	/* Start EPIT counter */
+	reg = EPITCR_CLKSRC_HIGHFREQ | EPITCR_STOPEN | EPITCR_WAITEN |
+		EPITCR_ENMOD | EPITCR_ENABLE |
+		((div - 1) << 4);
+	__raw_writel(reg, MXC_EPIT_EPITCR);
+
+	/* Register clock source */
+	clksrc.mult = clocksource_hz2mult(rate, clksrc.shift);
+	clocksource_register(&clksrc);
+
+#ifdef CONFIG_GENERIC_CLOCKEVENTS
+	/* Register clock event */
+	setup_irq(MXC_INT_EPIT1, &timer_irq);
+
+	clkevt.mult = div_sc(rate, NSEC_PER_SEC, clkevt.shift);
+	clkevt.max_delta_ns = clockevent_delta2ns(0xFFFFFFFE, &clkevt);
+
+	/* 1 clock tick is 50ns at 20 MHz. Considering an average
+	 * interrupt overhead of about 50us (compared to 100us on
+	 * a 200MHz arm926), I guess 100usec, or 2000 ticks, would
+	 * be a nice value for this processor.
+	 */
+	clkevt.min_delta_ns = clockevent_delta2ns(2000, &clkevt);
+	clockevents_register_device(&clkevt);
+#endif
+
+	/* Remember clksrc, needed for sched_clock() */
+	mxc_epit_clksrc = &clksrc;
+
+	printk(KERN_INFO "MXC EPIT timer initialized, rate = %lu %d\n", rate, div);
+
+	return 0;
+}
+
+
+unsigned long long mxc_epit_sched_clock(void)
+{
+	if (unlikely(!mxc_epit_clksrc)) {
+		return 0;
+	}
+
+	return cyc2ns(mxc_epit_clksrc, mxc_epit_get_cycles());
+}
+
+EXPORT_SYMBOL(mxc_epit_sched_clock);
+
+MODULE_AUTHOR ("Richard Titmuss <richard_titmuss@logitech.com>");
+MODULE_DESCRIPTION("MXC EPIT clksrc");
+MODULE_LICENSE("GPL");
+
+arch_initcall(mxc_epit_init);
Index: linux-2.6.26/drivers/mxc/Kconfig
===================================================================
--- linux-2.6.26.orig/drivers/mxc/Kconfig	2009-08-28 12:05:42.000000000 +0100
+++ linux-2.6.26/drivers/mxc/Kconfig	2009-08-28 12:05:49.000000000 +0100
@@ -16,6 +16,13 @@
 	  If you plan to use the Image Processing unit, say
 	  Y here. IPU is needed by Framebuffer and V4L2 drivers.
 
+config MXC_EPIT_CLKSRC
+	bool "MXC EPIT Clocksource"
+	depends on ARCH_MX25 && GENERIC_TIME
+	default y
+	help
+	  Select this to use the EPIT for a high precision clocksource
+
 source "drivers/mxc/ipu/Kconfig"
 source "drivers/mxc/ipu3/Kconfig"
 
Index: linux-2.6.26/arch/arm/plat-mxc/time.c
===================================================================
--- linux-2.6.26.orig/arch/arm/plat-mxc/time.c	2009-08-28 12:05:42.000000000 +0100
+++ linux-2.6.26/arch/arm/plat-mxc/time.c	2009-08-28 12:05:49.000000000 +0100
@@ -347,6 +347,16 @@
  * for threads only active for a very short time, and therefor top
  * will display bogus (much too low) CPU load for all tasks.
  */
+#ifdef CONFIG_MXC_EPIT_CLKSRC
+
+extern unsigned long long mxc_epit_sched_clock(void);
+
+unsigned long long sched_clock(void) {
+	return mxc_epit_sched_clock();
+}
+
+#else /* CONFIG_MXC_EPIT_CLKSRC */
+
 unsigned long long sched_clock(void)
 {
 	if (likely(clocksource_initialised))
@@ -355,3 +365,4 @@
 	return 0;
 }
 
+#endif /* CONFIG_MXC_EPIT_CLKSRC */
