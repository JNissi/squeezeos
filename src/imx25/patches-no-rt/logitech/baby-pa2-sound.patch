Index: linux-2.6.26/sound/soc/codecs/Kconfig
===================================================================
--- linux-2.6.26.orig/sound/soc/codecs/Kconfig	2009-03-27 11:54:59.000000000 +0000
+++ linux-2.6.26/sound/soc/codecs/Kconfig	2009-03-27 11:55:11.000000000 +0000
@@ -69,3 +69,7 @@
 	tristate
 	depends on SND_SOC
 
+config SND_SOC_WM8501
+	tristate
+	depends on SND_SOC
+
Index: linux-2.6.26/sound/soc/codecs/Makefile
===================================================================
--- linux-2.6.26.orig/sound/soc/codecs/Makefile	2009-03-27 11:54:59.000000000 +0000
+++ linux-2.6.26/sound/soc/codecs/Makefile	2009-03-27 11:55:11.000000000 +0000
@@ -12,6 +12,7 @@
 snd-soc-wm8580-objs := wm8580.o
 snd-soc-sgtl5000-objs := sgtl5000.o
 snd-soc-bluetooth-objs := bluetooth.o
+snd-soc-wm8501-objs := wm8501.o
 
 obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o
 obj-$(CONFIG_SND_SOC_WM8350)	+= snd-soc-wm8350.o
@@ -27,3 +28,4 @@
 obj-$(CONFIG_SND_SOC_WM8580)    += snd-soc-wm8580.o
 obj-$(CONFIG_SND_SOC_SGTL5000)	+= snd-soc-sgtl5000.o
 obj-$(CONFIG_SND_SOC_BLUETOOTH)	+= snd-soc-bluetooth.o
+obj-$(CONFIG_SND_SOC_WM8501)	+= snd-soc-wm8501.o
Index: linux-2.6.26/sound/soc/codecs/wm8501.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/sound/soc/codecs/wm8501.c	2009-03-27 11:55:11.000000000 +0000
@@ -0,0 +1,154 @@
+/*
+ * ak4420.c
+ *
+ * Copyright 2008 Logitech
+ *	Richard Titmuss <richard_titmuss@logitech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/version.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/pm.h>
+#include <linux/i2c.h>
+#include <linux/spi/spi.h>
+#include <linux/platform_device.h>
+#include <sound/driver.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/tlv.h>
+#include <sound/initval.h>
+#include <asm/div64.h>
+
+#define AUDIO_NAME "WM8501"
+#define WM8501_VERSION "0.1"
+
+#define WM8501_RATES (SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000 | \
+		      SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000)
+
+static const struct snd_soc_pcm_stream wm8501_dai_playback = {
+	.stream_name = "Playback",
+	.channels_min = 2,
+	.channels_max = 2,
+	.rates = WM8501_RATES,
+	.formats = SNDRV_PCM_FMTBIT_S24_LE,
+};
+
+/* dai ops, called by machine drivers */
+static const struct snd_soc_dai_ops wm8501_dai_ops = {
+};
+
+/* audio ops, called by alsa */
+static const struct snd_soc_ops wm8501_dai_audio_ops = {
+};
+
+static const struct snd_soc_codec_ops wm8501_codec_ops = {
+};
+
+static int wm8501_codec_probe(struct device *dev)
+{
+	struct snd_soc_codec *codec = to_snd_soc_codec(dev);
+
+	printk(KERN_INFO "WM8501 Audio Codec %s", WM8501_VERSION);
+
+	codec->owner = THIS_MODULE;
+	codec->ops = &wm8501_codec_ops;
+
+	snd_soc_register_codec(codec);
+
+	return 0;
+
+}
+
+static int wm8501_codec_remove(struct device *dev)
+{
+	struct snd_soc_codec *codec = to_snd_soc_codec(dev);
+	kfree(codec->private_data);
+	return 0;
+}
+
+static int wm8501_dai_probe(struct device *dev)
+{
+	struct snd_soc_dai *dai = to_snd_soc_dai(dev);
+	printk(KERN_INFO "****\n**** WM8501 DAI PROBE\n****\n");
+	dai->playback = &wm8501_dai_playback;
+	snd_soc_register_codec_dai(dai);
+	return 0;
+}
+
+const char wm8501_codec[SND_SOC_CODEC_NAME_SIZE] = "wm8501-codec";
+EXPORT_SYMBOL_GPL(wm8501_codec);
+
+static struct snd_soc_device_driver wm8501_codec_driver = {
+	.type = SND_SOC_BUS_TYPE_CODEC,
+	.driver = {
+		   .name = wm8501_codec,
+		   .owner = THIS_MODULE,
+		   .bus = &asoc_bus_type,
+		   .probe = wm8501_codec_probe,
+		   .remove = __devexit_p(wm8501_codec_remove),
+		   },
+};
+
+const char wm8501_dai[SND_SOC_CODEC_NAME_SIZE] = "wm8501-dai";
+EXPORT_SYMBOL_GPL(wm8501_dai);
+
+static struct snd_soc_device_driver wm8501_dai_driver = {
+	.type = SND_SOC_BUS_TYPE_DAI,
+	.driver = {
+		   .name = wm8501_dai,
+		   .owner = THIS_MODULE,
+		   .bus = &asoc_bus_type,
+		   .probe = wm8501_dai_probe,
+		   },
+};
+
+static __init int wm8501_init(void)
+{
+	int ret = 0;
+
+	ret = driver_register(&wm8501_codec_driver.driver);
+	if (ret < 0) {
+		return ret;
+	}
+
+	ret = driver_register(&wm8501_dai_driver.driver);
+	if (ret < 0) {
+		driver_unregister(&wm8501_codec_driver.driver);
+		return ret;
+	}
+
+	return ret;
+}
+
+static __exit void wm8501_exit(void)
+{
+	driver_unregister(&wm8501_dai_driver.driver);
+	driver_unregister(&wm8501_codec_driver.driver);
+}
+
+module_init(wm8501_init);
+module_exit(wm8501_exit);
+
+MODULE_DESCRIPTION("ASoC WM8501 driver");
+MODULE_AUTHOR("Richard Titmuss");
+MODULE_LICENSE("GPL");
Index: linux-2.6.26/sound/soc/imx/baby-wm8501.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/sound/soc/imx/baby-wm8501.c	2009-03-27 11:55:11.000000000 +0000
@@ -0,0 +1,348 @@
+/*
+ * baby-wm8501.c
+ *
+ * Copyright 2008 Logitech
+ *	Richard Titmuss <richard_titmuss@logitech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <sound/driver.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/initval.h>
+
+#include <asm/hardware.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/mxc.h>
+
+#include "imx-pcm.h"
+#include "imx-ssi.h"
+
+
+extern void gpio_activate_audio_ports(int ssi_port);
+extern const char wm8501_codec[SND_SOC_CODEC_NAME_SIZE];
+extern const char wm8501_dai[SND_SOC_CODEC_NAME_SIZE];
+
+static void headphone_detect_handler(struct work_struct *work);
+static DECLARE_WORK(hp_event, headphone_detect_handler);
+static struct snd_soc_machine *baby_mach;
+
+static void baby_init_dam(int ssi_port, int dai_port)
+{
+	/* WM8501 uses SSI1 or SSI2 via AUDMUX port dai_port for audio */
+
+	/* reset port ssi_port & dai_port */
+	DAM_PTCR(ssi_port) = 0;
+	DAM_PDCR(ssi_port) = 0;
+	DAM_PTCR(dai_port) = 0;
+	DAM_PDCR(dai_port) = 0;
+
+	/* set to asynchronous */
+
+	/* set Rx sources ssi_port <--> dai_port */
+	DAM_PDCR(ssi_port) |= AUDMUX_PDCR_RXDSEL(dai_port);
+	DAM_PDCR(dai_port) |= AUDMUX_PDCR_RXDSEL(ssi_port);
+
+	/* set Tx frame direction and source  ssi_port --> dai_port output */
+	DAM_PTCR(dai_port) |= AUDMUX_PTCR_TFSDIR;
+	DAM_PTCR(dai_port) |= AUDMUX_PTCR_TFSSEL(AUDMUX_FROM_TXFS, ssi_port);
+
+	/* set Tx Clock direction and source ssi_port--> dai_port output */
+	DAM_PTCR(dai_port) |= AUDMUX_PTCR_TCLKDIR;
+	DAM_PTCR(dai_port) |= AUDMUX_PTCR_TCSEL(AUDMUX_FROM_TXFS, ssi_port);
+
+	/* set Rx Clock (master clock) ssi_port --> dai_port output */
+	DAM_PTCR(dai_port) |= AUDMUX_PTCR_RCLKDIR;
+	DAM_PTCR(dai_port) |= AUDMUX_PTCR_RCSEL(AUDMUX_FROM_RXFS, ssi_port);
+}
+
+static int baby_hifi_hw_params(struct snd_pcm_substream *substream,
+				     struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_link *pcm_link = substream->private_data;
+	struct mxc_audio_platform_data *dev_data = pcm_link->private_data;
+	struct snd_soc_dai *cpu_dai = pcm_link->cpu_dai;
+	unsigned int channels = params_channels(params);
+	unsigned int rate = params_rate(params);
+	u32 dai_format;
+	struct clk *ssi1_clk;
+
+	baby_init_dam(dev_data->src_port, dev_data->ext_port);
+
+	dai_format = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_IF |
+	    SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_SYNC;
+
+	if (channels == 2)
+		dai_format |= SND_SOC_DAIFMT_TDM;
+
+	/* set cpu DAI configuration */
+	cpu_dai->ops->set_fmt(cpu_dai, dai_format);
+
+	/* set i.MX active slot mask */
+	cpu_dai->ops->set_tdm_slot(cpu_dai,
+				   channels == 1 ? 0xfffffffe : 0xfffffffc,
+				   channels);
+
+	/* set the SSI system clock as input (unused) */
+	cpu_dai->ops->set_sysclk(cpu_dai, IMX_SSP_SYS_CLK, 0, SND_SOC_CLOCK_OUT);
+
+	/* set the SSI1 clock divider */
+	ssi1_clk = clk_get(NULL, "per_ssi1_clk");
+	clk_set_rate(ssi1_clk, 24000000);
+	printk("**** SET SSI1 CLOCK %ld\n", clk_get_rate(ssi1_clk));
+	clk_put(ssi1_clk);
+
+	/* set BCLK division for sample rate */
+	switch (rate) {
+	case 96000:
+	case 88200:
+		cpu_dai->ops->set_clkdiv(cpu_dai, IMX_SSI_TX_DIV_PM, 0);
+		break;
+	default:
+		cpu_dai->ops->set_clkdiv(cpu_dai, IMX_SSI_TX_DIV_PM, 1);
+		break;
+	}
+
+	return 0;
+}
+
+/*
+ * baby wm8501 HiFi DAI opserations.
+ */
+static struct snd_soc_ops baby_hifi_ops = {
+	.hw_params = baby_hifi_hw_params,
+};
+
+static int hifi_pcm_new(struct snd_soc_pcm_link *pcm_link)
+{
+	int ret;
+	pcm_link->audio_ops = &baby_hifi_ops;
+	ret = snd_soc_pcm_new(pcm_link, 1, 0);
+	if (ret < 0) {
+		pr_err("%s: Failed to create hifi pcm\n", __func__);
+		return ret;
+	}
+
+	return 0;
+}
+
+struct snd_soc_pcm_link_ops hifi_pcm = {
+	.new = hifi_pcm_new,
+};
+
+static void headphone_detect_handler(struct work_struct *work)
+{
+//FIXME Commented out to compile	sysfs_notify(&baby_mach->pdev->dev.driver->kobj, NULL,
+//FIXME Commented out to compile		     "headphone");
+//FIXME Commented out to compile
+}
+
+static irqreturn_t imx_headphone_detect_handler(int irq, void *dev_id)
+{
+	schedule_work(&hp_event);
+	return IRQ_HANDLED;
+
+}
+
+static int baby_mach_probe(struct snd_soc_machine
+				 *machine)
+{
+	struct snd_soc_codec *codec;
+	struct snd_soc_pcm_link *pcm_link;
+	int ret;
+	printk(KERN_INFO "****\n**** WM8501 BABY MACH PROBE\n****\n");
+
+	pcm_link = list_first_entry(&machine->active_list,
+				    struct snd_soc_pcm_link, active_list);
+	codec = pcm_link->codec;
+
+	snd_soc_dapm_set_policy(machine, SND_SOC_DAPM_POLICY_STREAM);
+
+	/* register card with ALSA upper layers */
+	ret = snd_soc_register_card(machine);
+	if (ret < 0) {
+		pr_err("%s: failed to register sound card\n", __func__);
+		return ret;
+	}
+
+	return 0;
+}
+
+struct snd_soc_machine_ops baby_mach_ops = {
+	.mach_probe = baby_mach_probe,
+};
+
+static ssize_t show_headphone(struct device_driver *dev, char *buf)
+{
+#if 0
+	unsigned int value;
+
+	if (value == 0)
+		strcpy(buf, "speaker\n");
+	else
+		strcpy(buf, "headphone\n");
+#endif
+	strcpy(buf, "fixme\n");
+
+	return strlen(buf);
+}
+
+DRIVER_ATTR(headphone, S_IRUGO | S_IWUSR, show_headphone, NULL);
+
+/*
+ * This function will register the snd_soc_pcm_link drivers.
+ * It also registers devices for platform DMA, I2S, SSP and registers an
+ * I2C driver to probe the codec.
+ */
+static int __init baby_wm8501_probe(struct platform_device *pdev)
+{
+	struct snd_soc_machine *machine;
+	struct mxc_audio_platform_data *dev_data = pdev->dev.platform_data;
+	struct snd_soc_pcm_link *hifi;
+	const char *ssi_port;
+	int ret;
+
+	machine = kzalloc(sizeof(struct snd_soc_machine), GFP_KERNEL);
+	if (machine == NULL)
+		return -ENOMEM;
+
+	machine->owner = THIS_MODULE;
+	machine->pdev = pdev;
+	machine->name = "baby";
+	machine->longname = "wm8501";
+	machine->ops = &baby_mach_ops;
+	pdev->dev.driver_data = machine;
+
+	/* register card */
+	baby_mach = machine;
+	ret = snd_soc_new_card(machine, 1, SNDRV_DEFAULT_IDX1,
+			       SNDRV_DEFAULT_STR1);
+	if (ret < 0) {
+		pr_err("%s: failed to create stereo sound card\n", __func__);
+		goto err;
+	}
+
+	/* baby wm8501 hifi interface */
+	if (dev_data->src_port == 1)
+		ssi_port = imx_ssi_1;
+	else
+		ssi_port = imx_ssi_3;
+	hifi = snd_soc_pcm_link_new(machine,
+				    "baby-wm8501", &hifi_pcm,
+				    imx_pcm, wm8501_codec,
+				    wm8501_dai, ssi_port);
+	if (hifi == NULL) {
+		pr_err("Failed to create HiFi PCM link\n");
+		goto err;
+	}
+
+	ret = snd_soc_pcm_link_attach(hifi);
+	hifi->private_data = dev_data;
+	if (ret < 0)
+		goto link_err;
+
+	/* Configure audio port 3 */
+	gpio_activate_audio_ports(dev_data->src_port);
+
+#if 0
+	// XXXX
+	if (request_irq
+	    (dev_data->intr_id_hp, imx_headphone_detect_handler, 0,
+	     "headphone", machine))
+		goto link_err;
+#endif
+
+	ret = driver_create_file(pdev->dev.driver, &driver_attr_headphone);
+	if (ret < 0)
+		goto sysfs_err;
+
+	return ret;
+
+      sysfs_err:
+	driver_remove_file(pdev->dev.driver, &driver_attr_headphone);
+      link_err:
+	snd_soc_machine_free(machine);
+      err:
+	kfree(machine);
+	return ret;
+}
+
+static int __devexit baby_wm8501_remove(struct platform_device *pdev)
+{
+	struct snd_soc_machine *machine = pdev->dev.driver_data;
+
+	baby_mach = NULL;
+	driver_remove_file(pdev->dev.driver, &driver_attr_headphone);
+	kfree(machine);
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int baby_wm8501_suspend(struct platform_device
+				     *pdev, pm_message_t state)
+{
+	struct snd_soc_machine *machine = pdev->dev.driver_data;
+	return snd_soc_suspend(machine, state);
+}
+
+static int baby_wm8501_resume(struct platform_device
+				    *pdev)
+{
+	struct snd_soc_machine *machine = pdev->dev.driver_data;
+	return snd_soc_resume(machine);
+}
+
+#else
+#define baby_wm8501_suspend NULL
+#define baby_wm8501_resume  NULL
+#endif
+
+static struct platform_driver baby_wm8501_driver = {
+	.probe = baby_wm8501_probe,
+	.remove = __devexit_p(baby_wm8501_remove),
+	.suspend = baby_wm8501_suspend,
+	.resume = baby_wm8501_resume,
+	.driver = {
+		   .name = "baby-wm8501",
+		   .owner = THIS_MODULE,
+		   },
+};
+
+static int __init baby_asoc_init(void)
+{
+	return platform_driver_register(&baby_wm8501_driver);
+}
+
+static void __exit baby_asoc_exit(void)
+{
+	platform_driver_unregister(&baby_wm8501_driver);
+}
+
+module_init(baby_asoc_init);
+module_exit(baby_asoc_exit);
+
+/* Module information */
+MODULE_DESCRIPTION("ALSA SoC wm8501 baby");
+MODULE_AUTHOR("Richard Titmuss");
+MODULE_LICENSE("GPL");
Index: linux-2.6.26/sound/soc/imx/Kconfig
===================================================================
--- linux-2.6.26.orig/sound/soc/imx/Kconfig	2009-03-27 11:54:59.000000000 +0000
+++ linux-2.6.26/sound/soc/imx/Kconfig	2009-03-27 11:55:11.000000000 +0000
@@ -66,3 +66,10 @@
  help
    Say Y if you want to add support for SoC audio on IMX 3STACK
    with the BLUETOOTH.
+
+config SND_SOC_BABY_WM8501
+ tristate "SoC Audio support for Baby Boom - WM8501"
+ select SND_MXC_SOC_SSI
+ select SND_SOC_WM8501
+ help
+   Say Y if you would like your baby to speak
Index: linux-2.6.26/sound/soc/imx/Makefile
===================================================================
--- linux-2.6.26.orig/sound/soc/imx/Makefile	2009-03-27 11:54:59.000000000 +0000
+++ linux-2.6.26/sound/soc/imx/Makefile	2009-03-27 11:55:11.000000000 +0000
@@ -20,4 +20,6 @@
 obj-$(CONFIG_SND_SOC_IMX_3STACK_SGTL5000) += snd-soc-imx-3stack-sgtl5000.o
 snd-soc-imx-3stack-bt-objs := imx-3stack-bt.o
 obj-$(CONFIG_SND_SOC_IMX_3STACK_BLUETOOTH) += snd-soc-imx-3stack-bt.o
+snd-soc-baby-wm8501-objs := baby-wm8501.o
+obj-$(CONFIG_SND_SOC_BABY_WM8501) += snd-soc-baby-wm8501.o
 
Index: linux-2.6.26/sound/soc/imx/imx-ssi.c
===================================================================
--- linux-2.6.26.orig/sound/soc/imx/imx-ssi.c	2009-03-27 11:55:27.000000000 +0000
+++ linux-2.6.26/sound/soc/imx/imx-ssi.c	2009-03-27 11:56:55.000000000 +0000
@@ -276,7 +276,8 @@
 	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
 	case SND_SOC_DAIFMT_CBS_CFS:
 		stcr |= SSI_STCR_TFDIR | SSI_STCR_TXDIR;
-		srcr |= SSI_SRCR_RFDIR | SSI_SRCR_RXDIR;
+		/* RXDIR = 0 for SSI Internal Continuous Clock mode */
+		srcr |= SSI_SRCR_RFDIR /*| SSI_SRCR_RXDIR*/;
 		if (((fmt & SND_SOC_DAIFMT_FORMAT_MASK) == SND_SOC_DAIFMT_I2S)
 		    && (fmt & SND_SOC_DAIFMT_TDM)) {
 			scr &= ~SSI_SCR_I2S_MODE_MASK;
