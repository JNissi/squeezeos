Index: linux-2.6.26/arch/arm/mach-mx25/Kconfig
===================================================================
--- linux-2.6.26.orig/arch/arm/mach-mx25/Kconfig	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/arch/arm/mach-mx25/Kconfig	2009-05-08 17:00:15.000000000 +0100
@@ -14,6 +14,13 @@
 	  Include support for MX25 3STACK platform. This includes specific
 	  configurations for the board and its peripherals.
 
+config MACH_MX25_BABY
+	bool "Support Logitech MX25 baby platform"
+	default y
+	help
+	  Include support for Logitech MX25 baby platform. This includes
+	  specific configurations for the board and its peripherals.
+
 config MX25_DOZE_DURING_IDLE
 	bool "Enter Doze mode during idle"
 	help
Index: linux-2.6.26/arch/arm/mach-mx25/board-mx25_baby.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/arch/arm/mach-mx25/board-mx25_baby.h	2009-05-08 17:06:19.000000000 +0100
@@ -0,0 +1,136 @@
+/*
+ * Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#ifndef __ASM_ARCH_MXC_BOARD_MX25_BABY_H__
+#define __ASM_ARCH_MXC_BOARD_MX25_BABY_H__
+
+#ifdef CONFIG_MACH_MX25_BABY
+
+/*!
+ * @defgroup BRDCFG_MX25 Board Configuration Options
+ * @ingroup MSL_MX25
+ */
+
+/*!
+ * @file mach-mx25/board-mx25_baby.h
+ *
+ * @brief This file contains all the board level configuration options.
+ *
+ * It currently hold the options defined for MX25 BABY Platform.
+ *
+ * @ingroup BRDCFG_MX25
+ */
+
+/*
+ * Include Files
+ */
+#include <asm/arch/mxc_uart.h>
+
+/*!
+ * @name MXC UART board-level configurations
+ */
+/*! @{ */
+/* UART 1 configuration */
+/*!
+ * This define specifies if the UART port is configured to be in DTE or
+ * DCE mode. There exists a define like this for each UART port. Valid
+ * values that can be used are \b MODE_DTE or \b MODE_DCE.
+ */
+#define UART1_MODE              MODE_DCE
+/*!
+ * This define specifies if the UART is to be used for IRDA. There exists a
+ * define like this for each UART port. Valid values that can be used are
+ * \b IRDA or \b NO_IRDA.
+ */
+#define UART1_IR                NO_IRDA
+/*!
+ * This define is used to enable or disable a particular UART port. If
+ * disabled, the UART will not be registered in the file system and the user
+ * will not be able to access it. There exists a define like this for each UART
+ * port. Specify a value of 1 to enable the UART and 0 to disable it.
+ */
+#define UART1_ENABLED           0
+/*! @} */
+/* UART 2 configuration */
+#define UART2_MODE              MODE_DCE
+#define UART2_IR                NO_IRDA
+#define UART2_ENABLED           1
+
+/* UART 3 configuration */
+#define UART3_MODE              MODE_DTE
+#define UART3_IR                NO_IRDA
+#define UART3_ENABLED           0
+
+/* UART 4 configuration */
+#define UART4_MODE              MODE_DTE
+#define UART4_IR                NO_IRDA
+#define UART4_ENABLED           0
+
+/* UART 5 configuration */
+#define UART5_MODE              MODE_DTE
+#define UART5_IR                NO_IRDA
+#define UART5_ENABLED           0
+
+#define MXC_LL_UART_PADDR	UART1_BASE_ADDR
+#define MXC_LL_UART_VADDR	AIPS1_IO_ADDRESS(UART1_BASE_ADDR)
+
+
+/* LCD SPI pins */
+#define BABY_LCD_SPI_MISO	MX25_PIN_D8
+#define BABY_LCD_SPI_MOSI	MX25_PIN_D9
+#define BABY_LCD_SPI_CS		MX25_PIN_D10
+#define BABY_LCD_SPI_CLK_PB1	MX25_PIN_VSTBY_REQ
+#define BABY_LCD_SPI_CLK_PB2	MX25_PIN_CSPI1_SS1
+#define BABY_LCD_RESET          MX25_PIN_POWER_FAIL
+#define BABY_SLCDC_CS           MX25_PIN_CSPI1_SS0
+
+/* WLAN PINS */
+#define BABY_WLAN_POWER_DOWN_BAR	MX25_PIN_CSI_D9
+#define BABY_WLAN_RESET_BAR		MX25_PIN_D15
+
+/* Rotary encoder pins */
+#define ROTARY_ENCODER_PULLUP   MX25_PIN_GPIO_B
+#define VOLUME_SW               MX25_PIN_D12
+#define NAVIGATION_SW           MX25_PIN_D13
+#define POWER_SW                MX25_PIN_CSI_D6
+
+#define BABY_DAC_SDIN		MX25_PIN_CSI_MCLK
+#define BABY_DAC_SDOUT		MX25_PIN_CSI_VSYNC
+#define BABY_DAC_SCLK		MX25_PIN_CSI_HSYNC
+#define BABY_DAC_LRCLK		MX25_PIN_CSI_PIXCLK
+#define BABY_DAC_MCLK		MX25_PIN_CSI_D8
+#define BABY_DAC_ENABLE		MX25_PIN_CSI_D5
+#define BABY_DAC_PA_MUTE	MX25_PIN_CSI_D4
+#define BABY_DAC_PA_SHUTDOWN	MX25_PIN_CSI_D3
+#define BABY_DAC_HP_DETECT      MX25_PIN_CSPI1_MOSI
+#define BABY_DAC_LINEIN_DETECT  MX25_PIN_D14
+
+
+#define BABY_MSP430_CHARGE_PUMP_PB1 MX25_PIN_CSPI1_SS0
+#define BABY_MSP430_CHARGE_PUMP_PB2 MX25_PIN_CSPI1_SCLK
+#define BABY_MSP430_SBWTCK      MX25_PIN_UART1_CTS
+#define BABY_MSP430_SBWTDIO     MX25_PIN_D8
+#define BABY_MSP430_INTERRUPT   MX25_PIN_UART1_RXD
+#define BABY_DBG_GPIO2          MX25_PIN_VSTBY_ACK
+
+extern void mxc_map_io(void);
+extern void mxc_init_irq(void);
+extern void mxc_cpu_init(void) __init;
+extern void mx25_baby_gpio_init(void) __init;
+extern struct sys_timer mxc_timer;
+extern void mxc_cpu_common_init(void);
+extern int mxc_clocks_init(void);
+extern void __init early_console_setup(char *);
+
+#endif				/* CONFIG_MACH_MX25_BABY */
+#endif				/* __ASM_ARCH_MXC_BOARD_MX25_BABY_H__ */
Index: linux-2.6.26/arch/arm/mach-mx25/mx25_baby.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/arch/arm/mach-mx25/mx25_baby.c	2009-05-08 17:00:15.000000000 +0100
@@ -0,0 +1,500 @@
+/*
+ * Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/init.h>
+#include <linux/input.h>
+#include <linux/nodemask.h>
+#include <linux/clk.h>
+#include <linux/spi/spi.h>
+#include <linux/i2c.h>
+#include <linux/platform_device.h>
+#if defined(CONFIG_MTD) || defined(CONFIG_MTD_MODULE)
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+#include <asm/mach/flash.h>
+#endif
+
+#if defined(CONFIG_MMC_IMX_ESDHCI) || defined(CONFIG_MMC_IMX_ESDHCI_MODULE)
+#include <asm/arch/mmc.h>
+#endif
+
+#include <asm/hardware.h>
+#include <asm/irq.h>
+#include <asm/mach/keypad.h>
+#include <asm/setup.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/irq.h>
+#include <asm/arch/memory.h>
+#include <asm/arch/gpio.h>
+#include "board-mx25_baby.h"
+#include "crm_regs.h"
+#include "iomux.h"
+
+
+/*!
+ * @file mach-mx25/mx25_baby.c
+ *
+ * @brief This file contains the board specific initialization routines.
+ *
+ * @ingroup MSL_MX25
+ */
+
+unsigned int mx25_baby_board_io;
+
+static void mxc_nop_release(struct device *dev)
+{
+	/* Nothing */
+}
+
+#if defined(CONFIG_KEYBOARD_MXC) || defined(CONFIG_KEYBOARD_MXC_MODULE)
+static u16 keymapping[16] = {
+	KEY_PLAY, KEY_KPPLUS, KEY_LEFT, KEY_HOME,
+	KEY_F1, KEY_PLAYPAUSE, KEY_NEXTSONG, KEY_PREVIOUSSONG,
+	KEY_F5, KEY_F4, KEY_F3, KEY_F2,
+	KEY_RESERVED, KEY_RESERVED, KEY_SLEEP, KEY_F6,
+};
+
+static struct resource mxc_kpp_resources[] = {
+	[0] = {
+	       .start = MXC_INT_KPP,
+	       .end = MXC_INT_KPP,
+	       .flags = IORESOURCE_IRQ,
+	       }
+};
+
+static struct keypad_data keypad_plat_data = {
+	.rowmax = 4,
+	.colmax = 4,
+	.irq = MXC_INT_KPP,
+	.learning = 0,
+	.delay = 2,
+	.matrix = keymapping,
+};
+
+
+/* mxc keypad driver */
+static struct platform_device mxc_keypad_device = {
+	.name = "mxc_keypad",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mxc_kpp_resources),
+	.resource = mxc_kpp_resources,
+	.dev = {
+		.release = mxc_nop_release,
+		.platform_data = &keypad_plat_data,
+		},
+};
+
+static void mxc_init_keypad(void)
+{
+	(void)platform_device_register(&mxc_keypad_device);
+}
+#else
+static inline void mxc_init_keypad(void)
+{
+}
+#endif
+
+
+/* baby buttons driver */
+static struct resource baby_buttons_resources[] = {
+	[0] = {
+		.start = VOLUME_SW,
+		.end = VOLUME_SW,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = NAVIGATION_SW,
+		.end = NAVIGATION_SW,
+		.flags = IORESOURCE_MEM,
+	},
+	[2] = {
+		.start = POWER_SW,
+		.end = POWER_SW,
+		.flags = IORESOURCE_MEM,
+	},
+	[3] = {
+		.start = BABY_DAC_LINEIN_DETECT,
+		.end = BABY_DAC_LINEIN_DETECT,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+static struct platform_device baby_buttons_device = {
+	.name = "baby_buttons",
+	.id   = 0,
+	.num_resources = ARRAY_SIZE(baby_buttons_resources),
+	.resource = baby_buttons_resources,
+	.dev = {
+		.release = mxc_nop_release,
+		.platform_data = NULL,
+	},
+};
+
+static void baby_init_buttons(void)
+{
+	(void)platform_device_register(&baby_buttons_device);
+}
+
+
+/* MTD NAND flash */
+
+#if defined(CONFIG_MTD_NAND_MXC_V2) || defined(CONFIG_MTD_NAND_MXC_V2_MODULE)
+
+static struct mtd_partition mxc_nand_partitions[] = {
+	{
+	 .name = "redboot",
+	 .offset = 0,
+	 .size = 4 * 64 * 2048
+	},
+	{
+	 .name = "ubi",
+	 .offset = 4 * 64 * 2048,
+	 .size = 1014 * 64 * 2048
+	},
+};
+
+static struct flash_platform_data mxc_nand_data = {
+	.parts = mxc_nand_partitions,
+	.nr_parts = ARRAY_SIZE(mxc_nand_partitions),
+	.width = 1,
+};
+
+static struct platform_device mxc_nand_mtd_device = {
+	.name = "mxc_nandv2_flash",
+	.id = 0,
+	.dev = {
+		.release = mxc_nop_release,
+		.platform_data = &mxc_nand_data,
+		},
+};
+
+static void mxc_init_nand_mtd(void)
+{
+	if (__raw_readl(MXC_CCM_RCSR) & MXC_CCM_RCSR_NF16B)
+		mxc_nand_data.width = 2;
+
+	platform_device_register(&mxc_nand_mtd_device);
+}
+#else
+static inline void mxc_init_nand_mtd(void)
+{
+}
+#endif
+
+#if defined(CONFIG_FB_MXC_SYNC_PANEL) || \
+    defined(CONFIG_FB_MXC_SYNC_PANEL_MODULE)
+static const char fb_default_mode[] = "BABY-DISPLAY";
+
+/* mxc lcd driver */
+static struct platform_device mxc_fb_device = {
+	.name = "mxc_sdc_fb",
+	.id = 0,
+	.dev = {
+		.release = mxc_nop_release,
+		.platform_data = &fb_default_mode,
+		.coherent_dma_mask = 0xFFFFFFFF,
+		},
+};
+
+static void mxc_init_fb(void)
+{
+
+	(void)platform_device_register(&mxc_fb_device);
+}
+#else
+static inline void mxc_init_fb(void)
+{
+}
+#endif
+
+#if defined(CONFIG_BACKLIGHT_MXC)
+static struct platform_device mxcbl_devices[] = {
+#if defined(CONFIG_BACKLIGHT_MXC_LCDC) || \
+    defined(CONFIG_BACKLIGHT_MXC_LCDC_MODULE)
+	{
+	 .name = "mxc_lcdc_bl",
+	 .id = 0,
+	 },
+#endif
+};
+
+static inline void mxc_init_bl(void)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(mxcbl_devices); i++)
+		platform_device_register(&mxcbl_devices[i]);
+}
+#else
+static inline void mxc_init_bl(void)
+{
+}
+#endif
+
+static struct spi_board_info mxc_spi_board_info[] __initdata = {
+	{
+	 .modalias = "cpld_spi",
+	 .max_speed_hz = 18000000,
+	 .bus_num = 1,
+	 .chip_select = 0,
+	 .mode = SPI_MODE_2,
+	 },
+};
+
+static struct i2c_board_info mxc_i2c1_board_info[] __initdata = {
+#if 0
+	{
+	  .type = "tlv320",
+	  .addr = 0x18,
+	},
+#endif
+};
+
+static struct resource baby_msp430_programming_resources[] = {
+	[0] = {
+		.start = BABY_MSP430_SBWTCK,
+		.end   = BABY_MSP430_SBWTCK,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = BABY_MSP430_SBWTDIO,
+		.end   = BABY_MSP430_SBWTDIO,
+		.flags = IORESOURCE_MEM,
+	},
+	[2] = {
+		.start = BABY_MSP430_CHARGE_PUMP_PB1,
+		.end   = BABY_MSP430_CHARGE_PUMP_PB1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+static struct i2c_board_info mxc_i2c2_board_info[] __initdata = {
+	{
+	  .type = "msp430",
+	  .addr = 0x10,
+	  .irq = IOMUX_TO_IRQ(BABY_MSP430_INTERRUPT),
+	  .platform_data = baby_msp430_programming_resources,
+	},
+};
+
+#if defined(CONFIG_FEC) || defined(CONFIG_FEC_MODULE)
+unsigned int expio_intr_fec = 0; //MXC_INT_POWER_FAIL;
+EXPORT_SYMBOL(expio_intr_fec);
+#endif
+
+
+#if defined(CONFIG_MMC_IMX_ESDHCI) || defined(CONFIG_MMC_IMX_ESDHCI_MODULE)
+static struct mxc_mmc_platform_data mmc_data1 = {
+	.ocr_mask = MMC_VDD_32_33,
+	.caps = MMC_CAP_4_BIT_DATA,
+	.min_clk = 400000,
+	.max_clk = 52000000,
+	.card_inserted_state = 1,
+	//.status = sdhc_get_card_det_status,
+	.clock_mmc = "esdhc_clk",
+};
+
+/*!
+ * Resource definition for the SDHC1
+ */
+static struct resource mxcsdhc1_resources[] = {
+	[0] = {
+	       .start = MMC_SDHC1_BASE_ADDR,
+	       .end = MMC_SDHC1_BASE_ADDR + SZ_4K - 1,
+	       .flags = IORESOURCE_MEM,
+	       },
+	[1] = {
+	       .start = MXC_INT_SDHC1,
+	       .end = MXC_INT_SDHC1,
+	       .flags = IORESOURCE_IRQ,
+	       },
+	[2] = {
+		/* No card detect irq */
+	       .start = 0,
+	       .end = 0,
+	       .flags = IORESOURCE_IRQ,
+	       },
+};
+
+/*! Device Definition for MXC SDHC1 */
+static struct platform_device mxcsdhc1_device = {
+	.name = "mxsdhci",
+	.id = 0,
+	.dev = {
+		.release = mxc_nop_release,
+		.platform_data = &mmc_data1,
+		},
+	.num_resources = ARRAY_SIZE(mxcsdhc1_resources),
+	.resource = mxcsdhc1_resources,
+};
+
+static inline void mxc_init_mmc(void)
+{
+	/* WLAN */
+	(void)platform_device_register(&mxcsdhc1_device);
+}
+#else
+static inline void mxc_init_mmc(void)
+{
+}
+#endif
+
+
+/*!
+ * Board specific fixup function. It is called by \b setup_arch() in
+ * setup.c file very early on during kernel starts. It allows the user to
+ * statically fill in the proper values for the passed-in parameters. None of
+ * the parameters is used currently.
+ *
+ * @param  desc         pointer to \b struct \b machine_desc
+ * @param  tags         pointer to \b struct \b tag
+ * @param  cmdline      pointer to the command line
+ * @param  mi           pointer to \b struct \b meminfo
+ */
+static void __init fixup_mxc_board(struct machine_desc *desc, struct tag *tags,
+				   char **cmdline, struct meminfo *mi)
+{
+	mxc_cpu_init();
+
+#ifdef CONFIG_DISCONTIGMEM
+	do {
+		int nid;
+		mi->nr_banks = MXC_NUMNODES;
+		for (nid = 0; nid < mi->nr_banks; nid++)
+			SET_NODE(mi, nid);
+	} while (0);
+#endif
+}
+
+static struct platform_device baby_gpio_device = {
+	.name = "baby_gpio",
+	.id = 0,
+	.dev = {
+		.release = mxc_nop_release,
+		//.platform_data = &fab4_gpio_data,
+		},
+};
+
+
+static struct mxc_audio_platform_data mxc_tlv320aic3104_data = {
+	.ssi_num = 1,
+	.src_port = 1,
+	.ext_port = 6,
+	.intr_id_hp = 0,
+};
+
+
+static struct platform_device mxc_alsa_tlv320aic3104_device = {
+	.name = "baby-tlv320aic3104",
+	.id = 0,
+	.dev = {
+		.release = mxc_nop_release,
+		.platform_data = &mxc_tlv320aic3104_data,
+	},
+};
+
+static void mxc_init_tlv320aic3104_audio(void)
+{
+	struct clk *cko1, *parent;
+	unsigned long rate;
+
+	/* cko1 clock */
+	mxc_request_iomux(MX25_PIN_CLKO, MUX_CONFIG_FUNC);
+
+	cko1 = clk_get(NULL, "clko_clk");
+	if (IS_ERR(cko1))
+		return;
+	parent = clk_get(NULL, "ipg_clk");
+	if (IS_ERR(parent))
+		return;
+	clk_set_parent(cko1, parent);
+	rate = clk_round_rate(cko1, 11289600);
+	// FIXME:
+	if (rate < 8000000 || rate > 27000000) {
+		pr_err("Error: audio mclk freq %ld out of range!\n", rate);
+		clk_put(parent);
+		clk_put(cko1);
+		return;
+	}
+	clk_set_rate(cko1, rate);
+	clk_enable(cko1);
+
+	platform_device_register(&mxc_alsa_tlv320aic3104_device);
+};
+
+/*!
+ * Board specific initialization.
+ */
+static void __init mxc_board_init(void)
+{
+	/* PB1 redboot didn't set the system revision correctly */
+	if (system_rev == 0x25000) {
+		system_rev = 1;
+	}
+
+	pr_info("AIPS1 VA base: 0x%x\n", IO_ADDRESS(AIPS1_BASE_ADDR));
+	mxc_cpu_common_init();
+	mxc_clocks_init();
+	mxc_gpio_init();
+	mx25_baby_gpio_init();
+	early_console_setup(saved_command_line);
+	mxc_init_keypad();
+
+	/* modifications for PB2 board */
+	if (system_rev >= 2) {
+		baby_msp430_programming_resources[2].start = BABY_MSP430_CHARGE_PUMP_PB2;
+		baby_msp430_programming_resources[2].end = BABY_MSP430_CHARGE_PUMP_PB2;
+	}
+
+
+#ifdef CONFIG_I2C
+	i2c_register_board_info(0, mxc_i2c1_board_info,
+				ARRAY_SIZE(mxc_i2c1_board_info));
+	i2c_register_board_info(1, mxc_i2c2_board_info,
+				ARRAY_SIZE(mxc_i2c2_board_info));
+#endif
+	spi_register_board_info(mxc_spi_board_info,
+				ARRAY_SIZE(mxc_spi_board_info));
+	mxc_init_fb();
+	mxc_init_bl();
+	mxc_init_nand_mtd();
+
+	mxc_init_mmc();
+
+	baby_init_buttons();
+	mxc_init_tlv320aic3104_audio();
+	platform_device_register(&baby_gpio_device);
+}
+
+/*
+ * The following uses standard kernel macros define in arch.h in order to
+ * initialize __mach_desc_BABY data structure.
+ */
+/* *INDENT-OFF* */
+MACHINE_START(BABY, "Logitech MX25 Baby Board")
+	/* Maintainer: Logitech */
+	.phys_io = AIPS1_BASE_ADDR,
+	.io_pg_offst = ((AIPS1_BASE_ADDR_VIRT) >> 18) & 0xfffc,
+	.boot_params = PHYS_OFFSET + 0x100,
+	.fixup = fixup_mxc_board,
+	.map_io = mxc_map_io,
+	.init_irq = mxc_init_irq,
+	.init_machine = mxc_board_init,
+	.timer = &mxc_timer,
+MACHINE_END
Index: linux-2.6.26/arch/arm/mach-mx25/mx25_baby_gpio.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/arch/arm/mach-mx25/mx25_baby_gpio.c	2009-05-08 17:21:36.000000000 +0100
@@ -0,0 +1,910 @@
+/*
+ * Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/errno.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <asm/hardware.h>
+#include <asm/arch/gpio.h>
+#include "board-mx25_baby.h"
+#include "iomux.h"
+#include <linux/interrupt.h>
+
+
+/*!
+ * @file mach-mx25/mx25_baby_gpio.c
+ *
+ * @brief This file contains all the GPIO setup functions for the board.
+ *
+ * @ingroup GPIO_MX25
+ */
+
+#define BABY_DAC_PAD_CFG   (PAD_CTL_DRV_3_3V | PAD_CTL_PKE_NONE | PAD_CTL_DRV_NORMAL | PAD_CTL_SRE_SLOW)
+void gpio_activate_audio_ports(int ssi_port)
+{
+	/* MCLK uses CLKO */
+	mxc_request_iomux(MX25_PIN_CLKO,  	    MUX_CONFIG_FUNC);
+
+	mxc_request_iomux(BABY_DAC_SDIN,  	    MUX_CONFIG_ALT1);
+	mxc_request_iomux(BABY_DAC_SDOUT, 	    MUX_CONFIG_ALT1);
+	mxc_request_iomux(BABY_DAC_SCLK,  	    MUX_CONFIG_ALT1);
+	mxc_request_iomux(BABY_DAC_LRCLK, 	    MUX_CONFIG_ALT1);
+	mxc_request_iomux(BABY_DAC_MCLK, 	    MUX_CONFIG_GPIO);
+	mxc_request_iomux(BABY_DAC_PA_MUTE,         MUX_CONFIG_GPIO);
+	mxc_request_iomux(BABY_DAC_PA_SHUTDOWN,     MUX_CONFIG_GPIO);
+	mxc_request_iomux(BABY_DAC_HP_DETECT,       MUX_CONFIG_GPIO);
+
+	mxc_iomux_set_pad(BABY_DAC_SDIN,  	    BABY_DAC_PAD_CFG);
+	mxc_iomux_set_pad(BABY_DAC_SDOUT, 	    BABY_DAC_PAD_CFG);
+	mxc_iomux_set_pad(BABY_DAC_SCLK,  	    BABY_DAC_PAD_CFG);
+	mxc_iomux_set_pad(BABY_DAC_LRCLK, 	    BABY_DAC_PAD_CFG);
+	mxc_iomux_set_pad(BABY_DAC_PA_MUTE,         BABY_DAC_PAD_CFG);
+	mxc_iomux_set_pad(BABY_DAC_PA_SHUTDOWN,     BABY_DAC_PAD_CFG);
+	mxc_iomux_set_pad(BABY_DAC_HP_DETECT,       BABY_DAC_PAD_CFG);
+
+	mxc_set_gpio_direction(BABY_DAC_MCLK,   	 GPIO_DIRECTION_INPUT);
+	mxc_set_gpio_direction(BABY_DAC_PA_MUTE,     	 GPIO_DIRECTION_OUTPUT);
+	mxc_set_gpio_direction(BABY_DAC_PA_SHUTDOWN, 	 GPIO_DIRECTION_OUTPUT);
+	mxc_set_gpio_direction(BABY_DAC_HP_DETECT,   	 GPIO_DIRECTION_INPUT);
+
+	mxc_set_gpio_dataout(BABY_DAC_PA_MUTE,     0);  // MUTE IS ACTIVE LOW.
+	mxc_set_gpio_dataout(BABY_DAC_PA_SHUTDOWN, 1);  // ACTIVE LOW SHUTDOWN.  (i.e. it's an enable)
+}
+/*!
+ * This system-wide GPIO function initializes the pins during system startup.
+ * All the statically linked device drivers should put the proper GPIO
+ * initialization code inside this function. It is called by
+ * \b fixup_mx25_baby() during system startup. This function is board
+ * specific.
+ */
+void mx25_baby_gpio_init(void)
+{
+	/* WLAN module power up */
+	mxc_request_iomux     (BABY_WLAN_RESET_BAR,      MUX_CONFIG_GPIO);
+  	mxc_request_iomux     (BABY_WLAN_POWER_DOWN_BAR, MUX_CONFIG_GPIO);
+	mxc_iomux_set_pad     (BABY_WLAN_RESET_BAR,      PAD_CTL_DRV_3_3V);
+	mxc_iomux_set_pad     (BABY_WLAN_POWER_DOWN_BAR, PAD_CTL_DRV_3_3V);
+	mxc_set_gpio_direction(BABY_WLAN_RESET_BAR,      GPIO_DIRECTION_OUTPUT);
+	mxc_set_gpio_direction(BABY_WLAN_POWER_DOWN_BAR, GPIO_DIRECTION_OUTPUT);
+	mxc_set_gpio_dataout  (BABY_WLAN_RESET_BAR,      1);
+	mxc_set_gpio_dataout  (BABY_WLAN_POWER_DOWN_BAR, 0);
+	msleep(1000);
+
+	/* Power up WLAN */
+	/* FIXME move this to wlan sdi driver */
+
+	mxc_set_gpio_dataout  (BABY_WLAN_RESET_BAR,      1);
+	mxc_set_gpio_dataout  (BABY_WLAN_POWER_DOWN_BAR, 0);
+	msleep(1000);
+	mxc_set_gpio_dataout  (BABY_WLAN_RESET_BAR,      1);
+	mxc_set_gpio_dataout  (BABY_WLAN_POWER_DOWN_BAR, 0);
+	msleep(1000);
+	mxc_set_gpio_dataout  (BABY_WLAN_RESET_BAR,      1);
+	mxc_set_gpio_dataout  (BABY_WLAN_POWER_DOWN_BAR, 1);
+	msleep(1000);
+
+
+	/* MSP430 pins */
+	if (1) {
+		mxc_request_iomux   (BABY_MSP430_CHARGE_PUMP_PB1 , MUX_CONFIG_GPIO);
+	}
+	else {
+		mxc_request_iomux   (BABY_MSP430_CHARGE_PUMP_PB2 , MUX_CONFIG_GPIO);
+	}
+	mxc_request_iomux   (BABY_MSP430_SBWTCK      , MUX_CONFIG_GPIO);
+	mxc_request_iomux   (BABY_MSP430_SBWTDIO     , MUX_CONFIG_GPIO);
+	mxc_request_iomux   (BABY_MSP430_INTERRUPT   , MUX_CONFIG_GPIO);
+
+	mxc_iomux_set_pad     (BABY_MSP430_INTERRUPT, PAD_CTL_DRV_3_3V | PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_NONE);
+	mxc_set_gpio_direction(BABY_MSP430_INTERRUPT, GPIO_DIRECTION_INPUT);
+
+	/* Power up WLAN */
+	/* FIXME move this to wlan sdi driver */
+
+	/* hardware reset dac */
+	mxc_request_iomux(BABY_DAC_ENABLE, MUX_CONFIG_GPIO);
+	mxc_iomux_set_pad(BABY_DAC_ENABLE, BABY_DAC_PAD_CFG);
+	mxc_set_gpio_direction(BABY_DAC_ENABLE, GPIO_DIRECTION_OUTPUT);
+	mxc_set_gpio_dataout(BABY_DAC_ENABLE, 0);
+	udelay(10);
+	mxc_set_gpio_dataout(BABY_DAC_ENABLE, 1);
+
+
+	/* buttons */
+	mxc_request_iomux(VOLUME_SW, MUX_CONFIG_GPIO);
+	mxc_request_iomux(NAVIGATION_SW, MUX_CONFIG_GPIO);
+	mxc_request_iomux(POWER_SW, MUX_CONFIG_GPIO);
+	mxc_request_iomux(BABY_DAC_LINEIN_DETECT, MUX_CONFIG_GPIO);
+
+	mxc_iomux_set_pad(VOLUME_SW, PAD_CTL_DRV_3_3V | PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_NONE);
+	mxc_iomux_set_pad(NAVIGATION_SW, PAD_CTL_DRV_3_3V | PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_NONE);
+	mxc_iomux_set_pad(POWER_SW, PAD_CTL_DRV_3_3V | PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_PUD | PAD_CTL_22K_PU);
+	mxc_iomux_set_pad(BABY_DAC_LINEIN_DETECT, PAD_CTL_DRV_3_3V | PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_NONE);
+
+	mxc_set_gpio_direction(VOLUME_SW, GPIO_DIRECTION_INPUT);
+	mxc_set_gpio_direction(NAVIGATION_SW, GPIO_DIRECTION_INPUT);
+	mxc_set_gpio_direction(POWER_SW, GPIO_DIRECTION_INPUT);
+	mxc_set_gpio_direction(BABY_DAC_LINEIN_DETECT, GPIO_DIRECTION_INPUT);
+}
+
+/*!
+ * Activate a UART port
+ *
+ * @param  port         a UART port
+ * @param  no_irda      indicates if the port is used for SIR
+ */
+void gpio_uart_active(int port, int no_irda)
+{
+	/*
+	 * Configure the IOMUX control registers for the UART signals
+	 */
+	switch (port) {
+	case 0:
+		/* UART 1 IOMUX Configs */
+		mxc_request_iomux(MX25_PIN_UART1_RXD, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_UART1_TXD, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_UART1_RTS, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_UART1_CTS, MUX_CONFIG_FUNC);
+		mxc_iomux_set_pad(MX25_PIN_UART1_RXD,
+				  PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_ENABLE |
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PU);
+		mxc_iomux_set_pad(MX25_PIN_UART1_TXD,
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PD);
+		mxc_iomux_set_pad(MX25_PIN_UART1_RTS,
+				  PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_ENABLE |
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PU);
+		mxc_iomux_set_pad(MX25_PIN_UART1_CTS,
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PD);
+
+		break;
+	case 1:
+		/* UART 2 IOMUX Configs */
+		mxc_request_iomux(MX25_PIN_UART2_RXD, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_UART2_TXD, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_UART2_RTS, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_UART2_CTS, MUX_CONFIG_FUNC);
+		mxc_iomux_set_pad(MX25_PIN_UART2_RXD,
+				  PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_ENABLE |
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PU);
+		mxc_iomux_set_pad(MX25_PIN_UART2_TXD, PAD_CTL_PKE_ENABLE |
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PD);
+		mxc_iomux_set_pad(MX25_PIN_UART2_RTS,
+				  PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_ENABLE |
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PU);
+		mxc_iomux_set_pad(MX25_PIN_UART2_CTS, PAD_CTL_PKE_ENABLE |
+				  PAD_CTL_PUE_PUD | PAD_CTL_100K_PD);
+		break;
+	case 2:
+		/* UART 3 IOMUX Configs */
+		mxc_request_iomux(MX25_PIN_KPP_ROW0, MUX_CONFIG_ALT1); /*RXD*/
+		mxc_request_iomux(MX25_PIN_KPP_ROW1, MUX_CONFIG_ALT1); /*TXD*/
+		mxc_request_iomux(MX25_PIN_KPP_ROW2, MUX_CONFIG_ALT1); /*RTS*/
+		mxc_request_iomux(MX25_PIN_KPP_ROW3, MUX_CONFIG_ALT1); /*CTS*/
+
+		mxc_iomux_set_input(MUX_IN_UART3_IPP_UART_RTS_B,
+				    INPUT_CTL_PATH1);
+		mxc_iomux_set_input(MUX_IN_UART3_IPP_UART_RXD_MUX,
+				    INPUT_CTL_PATH1);
+		break;
+	case 3:
+		/* UART 4 IOMUX Configs */
+		mxc_request_iomux(MX25_PIN_LD8, MUX_CONFIG_ALT2); /*RXD*/
+		mxc_request_iomux(MX25_PIN_LD9, MUX_CONFIG_ALT2); /*TXD*/
+		mxc_request_iomux(MX25_PIN_LD10, MUX_CONFIG_ALT2); /*RTS*/
+		mxc_request_iomux(MX25_PIN_LD11, MUX_CONFIG_ALT2); /*CTS*/
+
+		mxc_iomux_set_input(MUX_IN_UART4_IPP_UART_RTS_B,
+				    INPUT_CTL_PATH0);
+		mxc_iomux_set_input(MUX_IN_UART4_IPP_UART_RXD_MUX,
+				    INPUT_CTL_PATH0);
+	case 4:
+		/* UART 5 IOMUX Configs */
+		mxc_request_iomux(MX25_PIN_CSI_D2, MUX_CONFIG_ALT1); /*RXD*/
+		mxc_request_iomux(MX25_PIN_CSI_D3, MUX_CONFIG_ALT1); /*TXD*/
+		mxc_request_iomux(MX25_PIN_CSI_D4, MUX_CONFIG_ALT1); /*RTS*/
+		mxc_request_iomux(MX25_PIN_CSI_D5, MUX_CONFIG_ALT1); /*CTS*/
+
+		mxc_iomux_set_input(MUX_IN_UART5_IPP_UART_RTS_B,
+				    INPUT_CTL_PATH1);
+		mxc_iomux_set_input(MUX_IN_UART5_IPP_UART_RXD_MUX,
+				    INPUT_CTL_PATH1);
+	default:
+		break;
+	}
+}
+EXPORT_SYMBOL(gpio_uart_active);
+
+/*!
+ * Inactivate a UART port
+ *
+ * @param  port         a UART port
+ * @param  no_irda      indicates if the port is used for SIR
+ */
+void gpio_uart_inactive(int port, int no_irda)
+{
+	switch (port) {
+	case 0:
+		mxc_request_gpio(MX25_PIN_UART1_RXD);
+		mxc_request_gpio(MX25_PIN_UART1_TXD);
+		mxc_request_gpio(MX25_PIN_UART1_RTS);
+		mxc_request_gpio(MX25_PIN_UART1_CTS);
+
+		mxc_free_iomux(MX25_PIN_UART1_RXD, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_UART1_TXD, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_UART1_RTS, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_UART1_CTS, MUX_CONFIG_GPIO);
+		break;
+	case 1:
+		mxc_request_gpio(MX25_PIN_UART2_RXD);
+		mxc_request_gpio(MX25_PIN_UART2_TXD);
+		mxc_request_gpio(MX25_PIN_UART2_RTS);
+		mxc_request_gpio(MX25_PIN_UART2_CTS);
+
+		mxc_free_iomux(MX25_PIN_UART2_RXD, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_UART2_TXD, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_UART2_RTS, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_UART2_CTS, MUX_CONFIG_GPIO);
+		break;
+	case 2:
+		mxc_request_gpio(MX25_PIN_KPP_ROW0);
+		mxc_request_gpio(MX25_PIN_KPP_ROW1);
+		mxc_request_gpio(MX25_PIN_KPP_ROW2);
+		mxc_request_gpio(MX25_PIN_KPP_ROW3);
+
+		mxc_free_iomux(MX25_PIN_KPP_ROW0, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_KPP_ROW1, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_KPP_ROW2, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_KPP_ROW3, MUX_CONFIG_GPIO);
+		break;
+	case 3:
+		mxc_free_iomux(MX25_PIN_LD8, MUX_CONFIG_FUNC);
+		mxc_free_iomux(MX25_PIN_LD9, MUX_CONFIG_FUNC);
+		mxc_free_iomux(MX25_PIN_LD10, MUX_CONFIG_FUNC);
+		mxc_free_iomux(MX25_PIN_LD11, MUX_CONFIG_FUNC);
+		break;
+	case 4:
+		mxc_request_gpio(MX25_PIN_CSI_D2);
+		mxc_request_gpio(MX25_PIN_CSI_D3);
+		mxc_request_gpio(MX25_PIN_CSI_D4);
+		mxc_request_gpio(MX25_PIN_CSI_D5);
+
+		mxc_free_iomux(MX25_PIN_CSI_D2, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_CSI_D3, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_CSI_D4, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_CSI_D5, MUX_CONFIG_GPIO);
+		break;
+	default:
+		break;
+	}
+}
+EXPORT_SYMBOL(gpio_uart_inactive);
+
+/*!
+ * Configure the IOMUX GPR register to receive shared SDMA UART events
+ *
+ * @param  port         a UART port
+ */
+void config_uartdma_event(int port)
+{
+}
+EXPORT_SYMBOL(config_uartdma_event);
+
+/*!
+ * Activate Keypad
+ */
+void gpio_keypad_active(void)
+{
+	mxc_request_iomux(MX25_PIN_KPP_ROW0, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_ROW1, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_ROW2, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_ROW3, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_COL0, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_COL1, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_COL2, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_KPP_COL3, MUX_CONFIG_FUNC);
+
+#define KPP_PAD_CTL_ROW (PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_PUD | \
+			 PAD_CTL_100K_PU)
+#define KPP_PAD_CTL_COL (PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_PUD | \
+			 PAD_CTL_100K_PU | PAD_CTL_ODE_OpenDrain)
+
+	mxc_iomux_set_pad(MX25_PIN_KPP_ROW0, KPP_PAD_CTL_ROW);
+	mxc_iomux_set_pad(MX25_PIN_KPP_ROW1, KPP_PAD_CTL_ROW);
+	mxc_iomux_set_pad(MX25_PIN_KPP_ROW2, KPP_PAD_CTL_ROW);
+	mxc_iomux_set_pad(MX25_PIN_KPP_ROW3, KPP_PAD_CTL_ROW);
+	mxc_iomux_set_pad(MX25_PIN_KPP_COL0, KPP_PAD_CTL_COL);
+	mxc_iomux_set_pad(MX25_PIN_KPP_COL1, KPP_PAD_CTL_COL);
+	mxc_iomux_set_pad(MX25_PIN_KPP_COL2, KPP_PAD_CTL_COL);
+	mxc_iomux_set_pad(MX25_PIN_KPP_COL3, KPP_PAD_CTL_COL);
+
+#undef KPP_PAD_CTL_ROW
+#undef KPP_PAD_CTL_COL
+}
+EXPORT_SYMBOL(gpio_keypad_active);
+
+/*!
+ * Inactivate Keypad
+ */
+void gpio_keypad_inactive(void)
+{
+	mxc_request_gpio(MX25_PIN_KPP_ROW0);
+	mxc_request_gpio(MX25_PIN_KPP_ROW1);
+	mxc_request_gpio(MX25_PIN_KPP_ROW2);
+	mxc_request_gpio(MX25_PIN_KPP_ROW3);
+	mxc_request_gpio(MX25_PIN_KPP_COL0);
+	mxc_request_gpio(MX25_PIN_KPP_COL1);
+	mxc_request_gpio(MX25_PIN_KPP_COL2);
+	mxc_request_gpio(MX25_PIN_KPP_COL3);
+
+	mxc_free_iomux(MX25_PIN_KPP_ROW0, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_ROW1, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_ROW2, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_ROW3, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_COL0, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_COL1, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_COL2, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_KPP_COL3, MUX_CONFIG_GPIO);
+}
+EXPORT_SYMBOL(gpio_keypad_inactive);
+
+/*!
+ * Activate FEC
+ */
+void gpio_fec_active(void)
+{
+	mxc_request_iomux(MX25_PIN_FEC_TX_CLK, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_RX_DV, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_RDATA0, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_TDATA0, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_TX_EN, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_MDC, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_MDIO, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_RDATA1, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_FEC_TDATA1, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_A17, MUX_CONFIG_ALT7); /* FEC_TX_ERR */
+	mxc_request_iomux(MX25_PIN_A18, MUX_CONFIG_ALT7); /* FEC_COL */
+	mxc_request_iomux(MX25_PIN_A19, MUX_CONFIG_ALT7); /* FEC_RX_ERR */
+	mxc_request_iomux(MX25_PIN_A20, MUX_CONFIG_ALT7); /* FEC_RXD2 */
+	mxc_request_iomux(MX25_PIN_A21, MUX_CONFIG_ALT7); /* FEC_RXD3 */
+	mxc_request_iomux(MX25_PIN_A22, MUX_CONFIG_ALT7); /* FEC_TXD2 */
+	mxc_request_iomux(MX25_PIN_A23, MUX_CONFIG_ALT7); /* FEC_TXD3 */
+	mxc_request_iomux(MX25_PIN_A24, MUX_CONFIG_ALT7); /* FEC_RX_CLK */
+	mxc_request_iomux(MX25_PIN_A25, MUX_CONFIG_ALT7); /* FEC_CRS */
+
+#define FEC_PAD_CTL1 (PAD_CTL_HYS_SCHMITZ | PAD_CTL_PUE_PUD | \
+		      PAD_CTL_PKE_ENABLE)
+#define FEC_PAD_CTL2 (PAD_CTL_PUE_PUD)
+
+	mxc_iomux_set_pad(MX25_PIN_FEC_TX_CLK, FEC_PAD_CTL1);
+	mxc_iomux_set_pad(MX25_PIN_FEC_RX_DV, FEC_PAD_CTL1);
+	mxc_iomux_set_pad(MX25_PIN_FEC_RDATA0, FEC_PAD_CTL1);
+	mxc_iomux_set_pad(MX25_PIN_FEC_TDATA0, FEC_PAD_CTL2);
+	mxc_iomux_set_pad(MX25_PIN_FEC_TX_EN, FEC_PAD_CTL2);
+	mxc_iomux_set_pad(MX25_PIN_FEC_MDC, FEC_PAD_CTL2);
+	mxc_iomux_set_pad(MX25_PIN_FEC_MDIO, FEC_PAD_CTL1 | PAD_CTL_22K_PU);
+	mxc_iomux_set_pad(MX25_PIN_FEC_RDATA1, FEC_PAD_CTL1);
+	mxc_iomux_set_pad(MX25_PIN_FEC_TDATA1, FEC_PAD_CTL2);
+	mxc_iomux_set_pad(MX25_PIN_A17, 0xC0 /*FEC_PAD_CTL1*/); /* FEC_TX_ERR */
+	mxc_iomux_set_pad(MX25_PIN_A18, 0xC0 /*FEC_PAD_CTL1*/); /* FEC_COL */
+	mxc_iomux_set_pad(MX25_PIN_A19, 0xC0 /*FEC_PAD_CTL2*/); /* FEC_RX_ERR */
+	mxc_iomux_set_pad(MX25_PIN_A20, 0x00 /*FEC_PAD_CTL1*/); /* FEC_RXD2 */
+	mxc_iomux_set_pad(MX25_PIN_A21, 0x00 /*FEC_PAD_CTL1*/); /* FEC_RXD3 */
+	/* no pad settings for MX25_PIN_A22 (FEC_TXD2) */
+	mxc_iomux_set_pad(MX25_PIN_A23, 0x00 /*FEC_PAD_CTL2*/); /* FEC_TXD3 */
+	mxc_iomux_set_pad(MX25_PIN_A24, 0x00 /*FEC_PAD_CTL1*/); /* FEC_RX_CLK */
+	mxc_iomux_set_pad(MX25_PIN_A25, 0xC0 /*FEC_PAD_CTL1*/); /* FEC_CRS */
+
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_COL, INPUT_CTL_PATH0);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_CRS, INPUT_CTL_PATH0);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RDATA_2, INPUT_CTL_PATH0);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RDATA_3, INPUT_CTL_PATH0);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RX_CLK, INPUT_CTL_PATH0);
+	mxc_iomux_set_input(MUX_IN_FEC_FEC_RX_ER, INPUT_CTL_PATH0);
+
+	/*
+	 * Assert FEC_RESET_B
+	 *
+	 * FEC_RESET_B: gpio4[0] is ALT 5 mode of pin A10
+	 */
+	mxc_request_iomux(MX25_PIN_A10, MUX_CONFIG_ALT5); /* FEC_RESET_B */
+
+	mxc_set_gpio_direction(MX25_PIN_A10, 0); /* FEC_RESET_B */
+
+	/* assert reset */
+	mxc_set_gpio_dataout(MX25_PIN_A10, 0);	/* FEC_RESET_B */
+	udelay(2);		/* spec says 1us min */
+
+	/* turn on PHY power and lift reset */
+	mxc_set_gpio_dataout(MX25_PIN_A10, 1);	/* FEC_RESET_B */
+
+#undef FEC_PAD_CTL_COMMON
+#undef FEC_PAD_CTL1
+#undef FEC_PAD_CTL2
+}
+EXPORT_SYMBOL(gpio_fec_active);
+
+/*!
+ * Inactivate FEC
+ */
+void gpio_fec_inactive(void)
+{
+	mxc_request_gpio(MX25_PIN_FEC_TX_CLK);
+	mxc_request_gpio(MX25_PIN_FEC_RX_DV);
+	mxc_request_gpio(MX25_PIN_FEC_RDATA0);
+	mxc_request_gpio(MX25_PIN_FEC_TDATA0);
+	mxc_request_gpio(MX25_PIN_FEC_TX_EN);
+	mxc_request_gpio(MX25_PIN_FEC_MDC);
+	mxc_request_gpio(MX25_PIN_FEC_MDIO);
+	mxc_request_gpio(MX25_PIN_FEC_RDATA1);
+	mxc_request_gpio(MX25_PIN_FEC_TDATA1);
+	mxc_request_gpio(MX25_PIN_A17); /* FEC_TX_ERR */
+	mxc_request_gpio(MX25_PIN_A18); /* FEC_COL */
+	mxc_request_gpio(MX25_PIN_A19); /* FEC_RX_ERR */
+	mxc_request_gpio(MX25_PIN_A20); /* FEC_RXD2 */
+	mxc_request_gpio(MX25_PIN_A21); /* FEC_RXD3 */
+	mxc_request_gpio(MX25_PIN_A22); /* FEC_TXD2 */
+	mxc_request_gpio(MX25_PIN_A23); /* FEC_TXD3 */
+	mxc_request_gpio(MX25_PIN_A24); /* FEC_RX_CLK */
+	mxc_request_gpio(MX25_PIN_A25); /* FEC_CRS */
+
+	mxc_request_gpio(MX25_PIN_A10);	/* FEC_RESET_B */
+
+	mxc_free_iomux(MX25_PIN_FEC_TX_CLK, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_RX_DV, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_RDATA0, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_TDATA0, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_TX_EN, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_MDC, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_MDIO, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_RDATA1, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_FEC_TDATA1, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_A17, MUX_CONFIG_GPIO); /* FEC_TX_ERR */
+	mxc_free_iomux(MX25_PIN_A18, MUX_CONFIG_GPIO); /* FEC_COL */
+	mxc_free_iomux(MX25_PIN_A19, MUX_CONFIG_GPIO); /* FEC_RX_ERR */
+	mxc_free_iomux(MX25_PIN_A20, MUX_CONFIG_GPIO); /* FEC_RXD2 */
+	mxc_free_iomux(MX25_PIN_A21, MUX_CONFIG_GPIO); /* FEC_RXD3 */
+	mxc_free_iomux(MX25_PIN_A22, MUX_CONFIG_GPIO); /* FEC_TXD2 */
+	mxc_free_iomux(MX25_PIN_A23, MUX_CONFIG_GPIO); /* FEC_TXD3 */
+	mxc_free_iomux(MX25_PIN_A24, MUX_CONFIG_GPIO); /* FEC_RX_CLK */
+	mxc_free_iomux(MX25_PIN_A25, MUX_CONFIG_GPIO); /* FEC_CRS */
+
+	mxc_free_iomux(MX25_PIN_A10, MUX_CONFIG_GPIO); /* FEC_RESET_B */
+}
+EXPORT_SYMBOL(gpio_fec_inactive);
+
+/*!
+ * Activate an I2C device
+ *
+ * @param  i2c_num         an I2C device
+ */
+void gpio_i2c_active(int i2c_num)
+{
+#define I2C_PAD_CTL (PAD_CTL_HYS_SCHMITZ | PAD_CTL_PKE_ENABLE | \
+		     PAD_CTL_PUE_PUD | PAD_CTL_100K_PU | PAD_CTL_ODE_OpenDrain)
+
+	switch (i2c_num) {
+	case 0:
+		/*I2C1*/
+		mxc_request_iomux(MX25_PIN_I2C1_CLK, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_I2C1_DAT, MUX_CONFIG_FUNC);
+		mxc_iomux_set_pad(MX25_PIN_I2C1_CLK, I2C_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_I2C1_DAT, I2C_PAD_CTL);
+		break;
+	case 1:
+		/*I2C2*/
+		mxc_request_iomux(MX25_PIN_GPIO_C, MUX_CONFIG_ALT2); /*SCL*/
+		mxc_request_iomux(MX25_PIN_GPIO_D, MUX_CONFIG_ALT2); /*SDA*/
+		mxc_iomux_set_pad(MX25_PIN_GPIO_C, I2C_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_GPIO_D, I2C_PAD_CTL);
+		mxc_iomux_set_input(MUX_IN_I2C2_IPP_SCL_IN, INPUT_CTL_PATH1);
+		mxc_iomux_set_input(MUX_IN_I2C2_IPP_SDA_IN, INPUT_CTL_PATH1);
+		break;
+	case 2:
+		/*I2C3*/
+		mxc_request_iomux(MX25_PIN_HSYNC, MUX_CONFIG_ALT2); /*SCL*/
+		mxc_request_iomux(MX25_PIN_VSYNC, MUX_CONFIG_ALT2); /*SDA*/
+		mxc_iomux_set_pad(MX25_PIN_HSYNC, I2C_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_VSYNC, I2C_PAD_CTL);
+		mxc_iomux_set_input(MUX_IN_I2C3_IPP_SCL_IN, INPUT_CTL_PATH0);
+		mxc_iomux_set_input(MUX_IN_I2C3_IPP_SDA_IN, INPUT_CTL_PATH0);
+		break;
+	default:
+		break;
+	}
+#undef I2C_PAD_CTL
+}
+EXPORT_SYMBOL(gpio_i2c_active);
+
+/*!
+ * Inactivate an I2C device
+ *
+ * @param  i2c_num         an I2C device
+ */
+void gpio_i2c_inactive(int i2c_num)
+{
+	switch (i2c_num) {
+	case 0:
+		/*I2C1*/
+		mxc_request_gpio(MX25_PIN_I2C1_CLK);
+		mxc_request_gpio(MX25_PIN_I2C1_DAT);
+		mxc_free_iomux(MX25_PIN_I2C1_CLK, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_I2C1_DAT, MUX_CONFIG_GPIO);
+		break;
+	case 1:
+		/*I2C2*/
+		mxc_request_gpio(MX25_PIN_GPIO_C);
+		mxc_request_gpio(MX25_PIN_GPIO_D);
+		mxc_free_iomux(MX25_PIN_GPIO_C, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_GPIO_D, MUX_CONFIG_GPIO);
+
+#if 0
+		/* Or use FEC pins if not in use */
+		mxc_request_gpio(MX25_PIN_FEC_RDATA1); /*SCL*/
+		mxc_request_gpio(MX25_PIN_FEC_RX_DV); /*SDA*/
+		mxc_free_iomux(MX25_PIN_FEC_RDATA1, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_FEC_RX_DV, MUX_CONFIG_GPIO);
+#endif
+
+		break;
+	case 2:
+		/*I2C3*/
+		mxc_request_gpio(MX25_PIN_HSYNC);
+		mxc_request_gpio(MX25_PIN_VSYNC);
+		mxc_free_iomux(MX25_PIN_HSYNC, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_VSYNC, MUX_CONFIG_GPIO);
+		break;
+	default:
+		break;
+	}
+}
+EXPORT_SYMBOL(gpio_i2c_inactive);
+
+
+/*!
+ * Activate LCD
+ */
+void gpio_lcdc_active(void)
+{
+	u32 baby_lcd_spi_clk = (system_rev >= 2) ? BABY_LCD_SPI_CLK_PB2 : BABY_LCD_SPI_CLK_PB1;
+
+	/* LCD RGB interface */
+	mxc_request_iomux(MX25_PIN_LD0, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD1, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD2, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD3, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD4, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD5, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD6, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD7, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD8, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD9, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD10, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD11, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD12, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD13, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD14, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LD15, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_GPIO_E, MUX_CONFIG_ALT2); /*D16*/
+	mxc_request_iomux(MX25_PIN_GPIO_F, MUX_CONFIG_ALT2); /*D17*/
+	mxc_request_iomux(MX25_PIN_HSYNC, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_VSYNC, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_LSCLK, MUX_CONFIG_FUNC);
+	mxc_request_iomux(MX25_PIN_OE_ACD, MUX_CONFIG_FUNC);
+
+	/* LCD Brightness controls */
+	mxc_request_iomux(MX25_PIN_CONTRAST, MUX_CONFIG_FUNC); /* Brightness */
+	mxc_request_iomux(MX25_PIN_D11, MUX_CONFIG_GPIO);      /* extra low brightness mode.  0 = bright, 1 = dim */
+
+	/* LCD Control interface */
+	mxc_request_iomux(BABY_LCD_SPI_MOSI, MUX_CONFIG_GPIO);
+	mxc_request_iomux(BABY_LCD_SPI_CS,   MUX_CONFIG_GPIO);
+	mxc_request_iomux(baby_lcd_spi_clk,  MUX_CONFIG_GPIO);
+	mxc_request_iomux(BABY_LCD_RESET,  MUX_CONFIG_GPIO);
+	if (system_rev >= 2) {
+		mxc_request_iomux(BABY_SLCDC_CS,  MUX_CONFIG_GPIO);
+	}
+
+#define LCD_PAD_CTL (PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_PUD | PAD_CTL_100K_PU)
+	mxc_iomux_set_pad(MX25_PIN_LD0, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD1, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD2, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD3, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD4, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD5, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD6, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD7, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD8, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD9, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD10, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD11, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD12, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD13, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD14, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LD15, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_GPIO_E, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_GPIO_F, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_HSYNC, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_VSYNC, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_LSCLK, LCD_PAD_CTL | PAD_CTL_SRE_FAST);
+	mxc_iomux_set_pad(MX25_PIN_OE_ACD, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_CONTRAST, LCD_PAD_CTL);
+	mxc_iomux_set_pad(MX25_PIN_D11,  PAD_CTL_DRV_3_3V | PAD_CTL_PKE_ENABLE | PAD_CTL_PUE_KEEPER);
+	mxc_set_gpio_dataout(MX25_PIN_D11, 0);    // Set pin D11 to high brightness
+	mxc_set_gpio_direction(MX25_PIN_D11, 0);  // Set pin D11 to output
+
+
+	mxc_iomux_set_pad(BABY_LCD_RESET,    PAD_CTL_DRV_3_3V );
+	mxc_iomux_set_pad(BABY_LCD_SPI_MOSI, PAD_CTL_DRV_3_3V );
+	mxc_iomux_set_pad(BABY_LCD_SPI_CS,   PAD_CTL_DRV_3_3V );
+	mxc_iomux_set_pad(baby_lcd_spi_clk,  PAD_CTL_DRV_3_3V );
+	if (system_rev >= 2) {
+		mxc_iomux_set_pad(BABY_SLCDC_CS,     LCD_PAD_CTL);
+		mxc_set_gpio_dataout(BABY_SLCDC_CS, 0);
+	}
+	mxc_set_gpio_dataout(BABY_LCD_RESET, 0);
+	mxc_set_gpio_dataout(BABY_LCD_SPI_MOSI, 0);
+	mxc_set_gpio_dataout(BABY_LCD_SPI_CS, 1);   // CS is active LOW
+	mxc_set_gpio_dataout(baby_lcd_spi_clk, 0);
+	mxc_set_gpio_direction(BABY_LCD_SPI_MOSI, 0); // output
+	mxc_set_gpio_direction(BABY_LCD_SPI_CS,   0); // output
+	mxc_set_gpio_direction(baby_lcd_spi_clk,  0); // output
+	mxc_set_gpio_direction(BABY_LCD_RESET,  0); // output
+}
+EXPORT_SYMBOL(gpio_lcdc_active);
+
+/*!
+ * Inactivate LCD
+ */
+void gpio_lcdc_inactive(void)
+{
+	mxc_request_gpio(MX25_PIN_LD0);
+	mxc_request_gpio(MX25_PIN_LD1);
+	mxc_request_gpio(MX25_PIN_LD2);
+	mxc_request_gpio(MX25_PIN_LD3);
+	mxc_request_gpio(MX25_PIN_LD4);
+	mxc_request_gpio(MX25_PIN_LD5);
+	mxc_request_gpio(MX25_PIN_LD6);
+	mxc_request_gpio(MX25_PIN_LD7);
+	mxc_request_gpio(MX25_PIN_GPIO_E); /*D16*/
+	mxc_request_gpio(MX25_PIN_GPIO_F); /*D17*/
+	mxc_request_gpio(MX25_PIN_HSYNC);
+	mxc_request_gpio(MX25_PIN_VSYNC);
+	mxc_request_gpio(MX25_PIN_LSCLK);
+	mxc_request_gpio(MX25_PIN_OE_ACD);
+
+	mxc_free_iomux(MX25_PIN_LD0, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD1, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD2, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD3, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD4, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD5, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD6, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD7, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LD8, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD9, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD10, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD11, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD12, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD13, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD14, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_LD15, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_GPIO_E, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_GPIO_F, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_HSYNC, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_VSYNC, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_LSCLK, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_OE_ACD, MUX_CONFIG_GPIO);
+	mxc_free_iomux(MX25_PIN_CONTRAST, MUX_CONFIG_FUNC);
+	mxc_free_iomux(MX25_PIN_D11, MUX_CONFIG_GPIO);
+	if (system_rev >= 2) {
+		mxc_free_iomux(BABY_SLCDC_CS, MUX_CONFIG_GPIO);
+	}
+}
+EXPORT_SYMBOL(gpio_lcdc_inactive);
+
+/*
+ * Power on/off CPT VGA panel.
+ */
+void board_power_lcd(int on)
+{
+}
+EXPORT_SYMBOL(board_power_lcd);
+
+/*!
+ * Activate SDHC
+ *
+ * @param module SDHC module number
+ */
+void gpio_sdhc_active(int module)
+{
+#define SDHC_PAD_CTL (PAD_CTL_DRV_3_3V   |\
+		      PAD_CTL_HYS_CMOS   |\
+		      PAD_CTL_PUE_PUD    |\
+		      PAD_CTL_PKE_ENABLE |\
+		      PAD_CTL_47K_PU     |\
+		      PAD_CTL_DRV_NORMAL |\
+		      PAD_CTL_SRE_FAST)
+
+	switch (module) {
+	case 0:
+		/* SDHC1 */
+		mxc_request_iomux(MX25_PIN_SD1_CMD,
+				  MUX_CONFIG_FUNC | MUX_CONFIG_SION);
+		mxc_request_iomux(MX25_PIN_SD1_CLK,
+				  MUX_CONFIG_FUNC | MUX_CONFIG_SION);
+		mxc_request_iomux(MX25_PIN_SD1_DATA0, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_SD1_DATA1, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_SD1_DATA2, MUX_CONFIG_FUNC);
+		mxc_request_iomux(MX25_PIN_SD1_DATA3, MUX_CONFIG_FUNC);
+
+		mxc_iomux_set_pad(MX25_PIN_SD1_CMD, SDHC_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_SD1_CLK, SDHC_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_SD1_DATA0, SDHC_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_SD1_DATA1, SDHC_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_SD1_DATA2, SDHC_PAD_CTL);
+		mxc_iomux_set_pad(MX25_PIN_SD1_DATA3, SDHC_PAD_CTL);
+
+		break;
+	case 1:
+		printk(KERN_ERR "SDHC2 is not supported");
+		break;
+	default:
+		break;
+	}
+}
+EXPORT_SYMBOL(gpio_sdhc_active);
+
+/*!
+ * Inactivate SDHC
+ *
+ * @param module SDHC module number
+ */
+void gpio_sdhc_inactive(int module)
+{
+	switch (module) {
+	case 0:
+		/* SDHC1 */
+		mxc_request_gpio(MX25_PIN_SD1_CMD);
+		mxc_request_gpio(MX25_PIN_SD1_CLK);
+		mxc_request_gpio(MX25_PIN_SD1_DATA0);
+		mxc_request_gpio(MX25_PIN_SD1_DATA1);
+		mxc_request_gpio(MX25_PIN_SD1_DATA2);
+		mxc_request_gpio(MX25_PIN_SD1_DATA3);
+
+		mxc_free_iomux(MX25_PIN_SD1_CMD, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_SD1_CLK, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_SD1_DATA0, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_SD1_DATA1, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_SD1_DATA2, MUX_CONFIG_GPIO);
+		mxc_free_iomux(MX25_PIN_SD1_DATA3, MUX_CONFIG_GPIO);
+		break;
+	case 1:
+		/* SDHC2 */
+		break;
+	default:
+		break;
+	}
+}
+
+
+/* Begin LCD hack.  This should surely be somewhere else. */
+
+/* The LCD serial interface is really a 9 bit interface.
+   if the first bit is 0, this means 'command'.  If it's '1' it means 'parameter or data'.
+   prepend BABY_LCD_START to the first byte of each command sequence.
+
+*/
+#define BABY_LCD_START          0x100
+#define BABY_LCD_DELAY_MS	0x8000
+const unsigned short int baby_lcd_spi_sequence[] =
+{
+	/* SLPOUT                  */   BABY_LCD_START    | 0x11,
+	/* Delay 120 ms            */   BABY_LCD_DELAY_MS | 120,
+	/* Power Control 1 	   */   BABY_LCD_START    | 0xc0, 0x0a,
+	/* Power Control 2 	   */   BABY_LCD_START    | 0xc1, 0x06, 0x06, 0x06,
+	/* Power Control 3 	   */   BABY_LCD_START    | 0xc2, 0x55, 0x00,
+	/* Power Control 4 	   */   BABY_LCD_START    | 0xc3, 0x55, 0x00,
+	/* Power Control 5 	   */   BABY_LCD_START    | 0xc4, 0x55, 0x00,
+	/* VCOM Control    	   */   BABY_LCD_START    | 0xc5, 0x27, 0x34,
+	/* VCOM offset control 	   */   BABY_LCD_START    | 0xc7, 0x40,
+
+	/* Set Positive gamma      */   BABY_LCD_START    | 0xe0, 0x0d, 0x0f, 0x13, 0x0c, 0x15, 0x17, 0x3b, 0x8c, 0x4d,
+	/* correction              */                             0x0b, 0x1e, 0x25, 0x1c, 0x23, 0x37,
+	/* charactieristics    	   */
+
+	/* Set Negative gamma      */   BABY_LCD_START    | 0xe1, 0x0d, 0x1f, 0x26, 0x0a, 0x11, 0x13, 0x3a, 0x37, 0x4c,
+	/* correction              */                             0x09, 0x1a, 0x23, 0x33, 0x37, 0x37,
+	/* characteristics     	   */
+
+	/* GAMSET              	   */   BABY_LCD_START    | 0x26, 0x10,
+
+	//    /* Set Display       */   BABY_LCD_START    | 0xb0, 0x00, //TODO  This will need to change to flip polarit of pclk tofix novatech eratta.
+	/* Interface Mode      	   */
+
+	/* Set division ratio
+	   for internal clocks
+	   of normal mode      	   */   BABY_LCD_START    | 0xb1, 0x6a, 0x15,
+	/* Set Division ratio
+	   for internal clocks
+	   of idle mode        	   */   BABY_LCD_START    | 0xb2, 0x6a, 0x15,
+	/* Set Division ratio
+	   for internal clocks
+	   of partial mode
+	   (idle mode off)     	   */   BABY_LCD_START    | 0xb3, 0x6a, 0x15,
+	/* display function set	   */   BABY_LCD_START    | 0xb6, 0x01, 0x04,
+	/* DISPON              	   */   BABY_LCD_START    | 0x29,
+};
+
+const unsigned int baby_lcd_spi_sequence_len = sizeof(baby_lcd_spi_sequence) >> 1;
+
+static u32 spi_clk;
+
+#define SPI_CE_ENABLE             (mxc_set_gpio_dataout(BABY_LCD_SPI_CS, 0))
+#define SPI_CE_DISABLE            (mxc_set_gpio_dataout(BABY_LCD_SPI_CS, 1))
+#define SPI_CLK_LOW               (mxc_set_gpio_dataout(spi_clk, 0))
+#define SPI_CLK_HIGH              (mxc_set_gpio_dataout(spi_clk, 1))
+#define SPI_DATA(X)               (mxc_set_gpio_dataout(BABY_LCD_SPI_MOSI, (X) ? 1 : 0))
+void baby_lcd_spi_send_word(unsigned int c)
+{
+	int i;
+
+	if (c & BABY_LCD_DELAY_MS) {
+		/* This is a delay command, not an actual spi command. */
+		msleep(c & 0x7FFF);
+	} else {
+		/* This is an SPI command */
+		c = c ^ 0x100;
+		if (!(c & 0x100)) {
+			/* This is the start of a sequence */
+			SPI_CE_DISABLE;
+			udelay(10);
+			SPI_CE_ENABLE;
+			udelay(10);
+		}
+		udelay(1);
+		SPI_CLK_LOW;
+		udelay(1);
+		/* Invert the BABY_LCD_START bit.  0 means start, 1 means continue */
+		for (i = 0; i < 9; i++) {
+			SPI_DATA(c & 0x100);
+			c <<= 1;
+			udelay(1);
+			SPI_CLK_HIGH;
+			udelay(1);
+			SPI_CLK_LOW;
+		}
+		udelay(1);
+	}
+}
+
+int baby_lcd_spi_init(void)
+{
+	int word;
+
+	spi_clk = (system_rev >= 2) ? BABY_LCD_SPI_CLK_PB2 : BABY_LCD_SPI_CLK_PB1;
+
+	mxc_set_gpio_dataout(BABY_LCD_RESET, 1);
+	msleep(10);
+	mxc_set_gpio_dataout(BABY_LCD_RESET, 0);
+	msleep(50);
+	mxc_set_gpio_dataout(BABY_LCD_RESET, 1);
+	msleep(50);
+	for (word = 0; word < baby_lcd_spi_sequence_len; word++) {
+		baby_lcd_spi_send_word(baby_lcd_spi_sequence[word]);
+	}
+	return 0;
+}
+
+EXPORT_SYMBOL(gpio_sdhc_inactive);
Index: linux-2.6.26/arch/arm/mach-mx25/serial.c
===================================================================
--- linux-2.6.26.orig/arch/arm/mach-mx25/serial.c	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/arch/arm/mach-mx25/serial.c	2009-05-08 17:00:15.000000000 +0100
@@ -25,6 +25,7 @@
 #include <asm/arch/spba.h>
 #include "serial.h"
 #include "board-mx25_3stack.h"
+#include "board-mx25_baby.h"
 
 #if defined(CONFIG_SERIAL_MXC) || defined(CONFIG_SERIAL_MXC_MODULE)
 
@@ -36,6 +37,7 @@
  * functions.
  */
 static uart_mxc_port mxc_ports[] = {
+#if UART1_ENABLED == 1
 	[0] = {
 	       .port = {
 			.membase = (void *)IO_ADDRESS(UART1_BASE_ADDR),
@@ -62,6 +64,8 @@
 	       .dma_rx_id = MXC_DMA_UART1_RX,
 	       .rxd_mux = MXC_UART_RXDMUX,
 	       },
+#endif
+#if UART2_ENABLED == 1
 	[1] = {
 	       .port = {
 			.membase = (void *)IO_ADDRESS(UART2_BASE_ADDR),
@@ -88,6 +92,7 @@
 	       .dma_rx_id = MXC_DMA_UART2_RX,
 	       .rxd_mux = MXC_UART_IR_RXDMUX,
 	       },
+#endif
 #if UART3_ENABLED == 1
 	[2] = {
 	       .port = {
@@ -174,6 +179,7 @@
 #endif
 };
 
+#if UART1_ENABLED == 1
 static struct platform_device mxc_uart_device1 = {
 	.name = "mxcintuart",
 	.id = 0,
@@ -181,7 +187,9 @@
 		.platform_data = &mxc_ports[0],
 		},
 };
+#endif
 
+#if UART2_ENABLED == 1
 static struct platform_device mxc_uart_device2 = {
 	.name = "mxcintuart",
 	.id = 1,
@@ -189,6 +197,7 @@
 		.platform_data = &mxc_ports[1],
 		},
 };
+#endif
 
 #if UART3_ENABLED == 1
 static struct platform_device mxc_uart_device3 = {
@@ -221,8 +230,12 @@
 static int __init mxc_init_uart(void)
 {
 	/* Register all the MXC UART platform device structures */
+#if UART1_ENABLED == 1
 	platform_device_register(&mxc_uart_device1);
+#endif
+#if UART2_ENABLED == 1
 	platform_device_register(&mxc_uart_device2);
+#endif
 
 	/* Grab ownership of shared UARTs 3 and 4, only when enabled */
 #if UART3_ENABLED == 1
Index: linux-2.6.26/arch/arm/tools/mach-types
===================================================================
--- linux-2.6.26.orig/arch/arm/tools/mach-types	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/arch/arm/tools/mach-types	2009-05-08 17:00:15.000000000 +0100
@@ -1721,3 +1721,4 @@
 hhgps			MACH_HHGPS		HHGPS			1726
 nokia_n810_wimax	MACH_NOKIA_N810_WIMAX	NOKIA_N810_WIMAX	1727
 mx25_3ds		MACH_MX25_3DS		MX25_3DS		1771
+baby			MACH_BABY		BABY			2070
Index: linux-2.6.26/arch/arm/configs/baby_defconfig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.26/arch/arm/configs/baby_defconfig	2009-05-08 17:00:15.000000000 +0100
@@ -0,0 +1,1230 @@
+#
+# Automatically generated make config: don't edit
+# Linux kernel version: 2.6.26
+# Tue Apr 21 15:42:22 2009
+#
+CONFIG_ARM=y
+CONFIG_SYS_SUPPORTS_APM_EMULATION=y
+# CONFIG_GENERIC_GPIO is not set
+CONFIG_GENERIC_TIME=y
+CONFIG_GENERIC_CLOCKEVENTS=y
+CONFIG_MMU=y
+# CONFIG_NO_IOPORT is not set
+CONFIG_GENERIC_HARDIRQS=y
+CONFIG_STACKTRACE_SUPPORT=y
+CONFIG_LOCKDEP_SUPPORT=y
+CONFIG_TRACE_IRQFLAGS_SUPPORT=y
+CONFIG_HARDIRQS_SW_RESEND=y
+CONFIG_GENERIC_IRQ_PROBE=y
+CONFIG_RWSEM_GENERIC_SPINLOCK=y
+# CONFIG_ARCH_HAS_ILOG2_U32 is not set
+# CONFIG_ARCH_HAS_ILOG2_U64 is not set
+CONFIG_GENERIC_HWEIGHT=y
+CONFIG_GENERIC_CALIBRATE_DELAY=y
+CONFIG_ARCH_SUPPORTS_AOUT=y
+CONFIG_ZONE_DMA=y
+CONFIG_ARCH_MTD_XIP=y
+CONFIG_VECTORS_BASE=0xffff0000
+CONFIG_DEFCONFIG_LIST="/lib/modules/$UNAME_RELEASE/.config"
+
+#
+# General setup
+#
+CONFIG_EXPERIMENTAL=y
+CONFIG_BROKEN_ON_SMP=y
+CONFIG_LOCK_KERNEL=y
+CONFIG_INIT_ENV_ARG_LIMIT=32
+CONFIG_LOCALVERSION=""
+CONFIG_LOCALVERSION_AUTO=y
+CONFIG_SWAP=y
+CONFIG_SYSVIPC=y
+CONFIG_SYSVIPC_SYSCTL=y
+# CONFIG_POSIX_MQUEUE is not set
+# CONFIG_BSD_PROCESS_ACCT is not set
+# CONFIG_TASKSTATS is not set
+# CONFIG_AUDIT is not set
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_LOG_BUF_SHIFT=14
+# CONFIG_CGROUPS is not set
+# CONFIG_GROUP_SCHED is not set
+CONFIG_SYSFS_DEPRECATED=y
+CONFIG_SYSFS_DEPRECATED_V2=y
+# CONFIG_RELAY is not set
+# CONFIG_NAMESPACES is not set
+# CONFIG_BLK_DEV_INITRD is not set
+CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+CONFIG_SYSCTL=y
+CONFIG_EMBEDDED=y
+CONFIG_UID16=y
+CONFIG_SYSCTL_SYSCALL=y
+CONFIG_SYSCTL_SYSCALL_CHECK=y
+CONFIG_KALLSYMS=y
+# CONFIG_KALLSYMS_EXTRA_PASS is not set
+CONFIG_HOTPLUG=y
+CONFIG_PRINTK=y
+CONFIG_BUG=y
+CONFIG_ELF_CORE=y
+CONFIG_COMPAT_BRK=y
+CONFIG_BASE_FULL=y
+CONFIG_FUTEX=y
+CONFIG_ANON_INODES=y
+CONFIG_EPOLL=y
+CONFIG_SIGNALFD=y
+CONFIG_TIMERFD=y
+CONFIG_EVENTFD=y
+CONFIG_SHMEM=y
+CONFIG_VM_EVENT_COUNTERS=y
+CONFIG_SLAB=y
+# CONFIG_SLUB is not set
+# CONFIG_SLOB is not set
+CONFIG_PROFILING=y
+# CONFIG_MARKERS is not set
+CONFIG_OPROFILE=y
+CONFIG_HAVE_OPROFILE=y
+# CONFIG_KPROBES is not set
+CONFIG_HAVE_KPROBES=y
+CONFIG_HAVE_KRETPROBES=y
+# CONFIG_HAVE_DMA_ATTRS is not set
+CONFIG_PROC_PAGE_MONITOR=y
+CONFIG_SLABINFO=y
+CONFIG_RT_MUTEXES=y
+# CONFIG_TINY_SHMEM is not set
+CONFIG_BASE_SMALL=0
+CONFIG_MODULES=y
+CONFIG_MODULE_FORCE_LOAD=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODULE_FORCE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+# CONFIG_MODULE_SRCVERSION_ALL is not set
+CONFIG_KMOD=y
+CONFIG_BLOCK=y
+# CONFIG_LBD is not set
+# CONFIG_BLK_DEV_IO_TRACE is not set
+# CONFIG_LSF is not set
+# CONFIG_BLK_DEV_BSG is not set
+
+#
+# IO Schedulers
+#
+CONFIG_IOSCHED_NOOP=y
+CONFIG_IOSCHED_AS=y
+CONFIG_IOSCHED_DEADLINE=y
+CONFIG_IOSCHED_CFQ=y
+# CONFIG_DEFAULT_AS is not set
+# CONFIG_DEFAULT_DEADLINE is not set
+CONFIG_DEFAULT_CFQ=y
+# CONFIG_DEFAULT_NOOP is not set
+CONFIG_DEFAULT_IOSCHED="cfq"
+CONFIG_CLASSIC_RCU=y
+
+#
+# System Type
+#
+# CONFIG_ARCH_AAEC2000 is not set
+# CONFIG_ARCH_INTEGRATOR is not set
+# CONFIG_ARCH_REALVIEW is not set
+# CONFIG_ARCH_VERSATILE is not set
+# CONFIG_ARCH_AT91 is not set
+# CONFIG_ARCH_CLPS7500 is not set
+# CONFIG_ARCH_CLPS711X is not set
+# CONFIG_ARCH_CO285 is not set
+# CONFIG_ARCH_EBSA110 is not set
+# CONFIG_ARCH_EP93XX is not set
+# CONFIG_ARCH_FOOTBRIDGE is not set
+# CONFIG_ARCH_NETX is not set
+# CONFIG_ARCH_H720X is not set
+# CONFIG_ARCH_IMX is not set
+# CONFIG_ARCH_IOP13XX is not set
+# CONFIG_ARCH_IOP32X is not set
+# CONFIG_ARCH_IOP33X is not set
+# CONFIG_ARCH_IXP23XX is not set
+# CONFIG_ARCH_IXP2000 is not set
+# CONFIG_ARCH_IXP4XX is not set
+# CONFIG_ARCH_L7200 is not set
+# CONFIG_ARCH_KS8695 is not set
+# CONFIG_ARCH_NS9XXX is not set
+CONFIG_ARCH_MXC=y
+# CONFIG_ARCH_ORION5X is not set
+# CONFIG_ARCH_PNX4008 is not set
+# CONFIG_ARCH_PXA is not set
+# CONFIG_ARCH_RPC is not set
+# CONFIG_ARCH_SA1100 is not set
+# CONFIG_ARCH_S3C2410 is not set
+# CONFIG_ARCH_SHARK is not set
+# CONFIG_ARCH_LH7A40X is not set
+# CONFIG_ARCH_DAVINCI is not set
+# CONFIG_ARCH_OMAP is not set
+# CONFIG_ARCH_MSM7X00A is not set
+
+#
+# Boot options
+#
+
+#
+# Power management
+#
+
+#
+# Freescale MXC Implementations
+#
+# CONFIG_ARCH_MX37 is not set
+# CONFIG_ARCH_MX35 is not set
+# CONFIG_ARCH_MX51 is not set
+# CONFIG_ARCH_MX3 is not set
+# CONFIG_ARCH_MX27 is not set
+CONFIG_ARCH_MX25=y
+# CONFIG_ARCH_MX21 is not set
+CONFIG_I2C_MXC_SELECT1=y
+CONFIG_I2C_MXC_SELECT2=y
+
+#
+# MX25 Options
+#
+CONFIG_MX25_OPTIONS=y
+# CONFIG_MACH_MX25_3DS is not set
+CONFIG_MACH_MX25_BABY=y
+# CONFIG_MX25_DOZE_DURING_IDLE is not set
+CONFIG_MXC_SDMA_API=y
+CONFIG_ARCH_MXC_HAS_NFC_V2=y
+CONFIG_ARCH_MXC_HAS_NFC_V2_1=y
+
+#
+# Device options
+#
+# CONFIG_I2C_MXC_SELECT3 is not set
+CONFIG_DMA_ZONE_SIZE=24
+
+#
+# Processor Type
+#
+CONFIG_CPU_32=y
+CONFIG_CPU_ARM926T=y
+# CONFIG_CPU_V6 is not set
+# CONFIG_CPU_V7 is not set
+CONFIG_CPU_32v5=y
+CONFIG_CPU_ABRT_EV5TJ=y
+CONFIG_CPU_PABRT_NOIFAR=y
+CONFIG_CPU_CACHE_VIVT=y
+CONFIG_CPU_COPY_V4WB=y
+CONFIG_CPU_TLB_V4WBI=y
+CONFIG_CPU_CP15=y
+CONFIG_CPU_CP15_MMU=y
+
+#
+# Processor Features
+#
+CONFIG_ARM_THUMB=y
+# CONFIG_CPU_ICACHE_DISABLE is not set
+# CONFIG_CPU_DCACHE_DISABLE is not set
+# CONFIG_CPU_DCACHE_WRITETHROUGH is not set
+# CONFIG_CPU_CACHE_ROUND_ROBIN is not set
+# CONFIG_OUTER_CACHE is not set
+
+#
+# Bus support
+#
+# CONFIG_PCI_SYSCALL is not set
+# CONFIG_ARCH_SUPPORTS_MSI is not set
+# CONFIG_PCCARD is not set
+
+#
+# Kernel Features
+#
+CONFIG_TICK_ONESHOT=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_GENERIC_CLOCKEVENTS_BUILD=y
+CONFIG_PREEMPT=y
+CONFIG_HZ=100
+CONFIG_AEABI=y
+# CONFIG_OABI_COMPAT is not set
+# CONFIG_ARCH_DISCONTIGMEM_ENABLE is not set
+CONFIG_SELECT_MEMORY_MODEL=y
+CONFIG_FLATMEM_MANUAL=y
+# CONFIG_DISCONTIGMEM_MANUAL is not set
+# CONFIG_SPARSEMEM_MANUAL is not set
+CONFIG_FLATMEM=y
+CONFIG_FLAT_NODE_MEM_MAP=y
+# CONFIG_SPARSEMEM_STATIC is not set
+# CONFIG_SPARSEMEM_VMEMMAP_ENABLE is not set
+CONFIG_PAGEFLAGS_EXTENDED=y
+CONFIG_SPLIT_PTLOCK_CPUS=4096
+# CONFIG_RESOURCES_64BIT is not set
+CONFIG_ZONE_DMA_FLAG=1
+CONFIG_BOUNCE=y
+CONFIG_VIRT_TO_BUS=y
+# CONFIG_LEDS is not set
+CONFIG_ALIGNMENT_TRAP=y
+
+#
+# Boot options
+#
+CONFIG_ZBOOT_ROM_TEXT=0x0
+CONFIG_ZBOOT_ROM_BSS=0x0
+CONFIG_CMDLINE="noinitrd console=ttymxc0 root=/dev/mtdblock2 rw ip=off"
+# CONFIG_XIP_KERNEL is not set
+# CONFIG_KEXEC is not set
+
+#
+# CPU Frequency scaling
+#
+# CONFIG_CPU_FREQ is not set
+
+#
+# Floating point emulation
+#
+
+#
+# At least one emulation must be selected
+#
+# CONFIG_VFP is not set
+
+#
+# Userspace binary formats
+#
+CONFIG_BINFMT_ELF=y
+# CONFIG_BINFMT_AOUT is not set
+# CONFIG_BINFMT_MISC is not set
+
+#
+# Power management options
+#
+# CONFIG_PM is not set
+CONFIG_ARCH_SUSPEND_POSSIBLE=y
+
+#
+# Networking
+#
+CONFIG_NET=y
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+CONFIG_PACKET_MMAP=y
+CONFIG_UNIX=y
+CONFIG_XFRM=y
+# CONFIG_XFRM_USER is not set
+# CONFIG_XFRM_SUB_POLICY is not set
+# CONFIG_XFRM_MIGRATE is not set
+# CONFIG_XFRM_STATISTICS is not set
+# CONFIG_NET_KEY is not set
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+# CONFIG_IP_ADVANCED_ROUTER is not set
+CONFIG_IP_FIB_HASH=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+# CONFIG_IP_PNP_RARP is not set
+# CONFIG_NET_IPIP is not set
+# CONFIG_NET_IPGRE is not set
+# CONFIG_IP_MROUTE is not set
+# CONFIG_ARPD is not set
+# CONFIG_SYN_COOKIES is not set
+# CONFIG_INET_AH is not set
+# CONFIG_INET_ESP is not set
+# CONFIG_INET_IPCOMP is not set
+# CONFIG_INET_XFRM_TUNNEL is not set
+# CONFIG_INET_TUNNEL is not set
+CONFIG_INET_XFRM_MODE_TRANSPORT=y
+CONFIG_INET_XFRM_MODE_TUNNEL=y
+CONFIG_INET_XFRM_MODE_BEET=y
+# CONFIG_INET_LRO is not set
+CONFIG_INET_DIAG=y
+CONFIG_INET_TCP_DIAG=y
+# CONFIG_TCP_CONG_ADVANCED is not set
+CONFIG_TCP_CONG_CUBIC=y
+CONFIG_DEFAULT_TCP_CONG="cubic"
+# CONFIG_TCP_MD5SIG is not set
+# CONFIG_IPV6 is not set
+# CONFIG_NETWORK_SECMARK is not set
+# CONFIG_NETFILTER is not set
+# CONFIG_IP_DCCP is not set
+# CONFIG_IP_SCTP is not set
+# CONFIG_TIPC is not set
+# CONFIG_ATM is not set
+# CONFIG_BRIDGE is not set
+# CONFIG_VLAN_8021Q is not set
+# CONFIG_DECNET is not set
+# CONFIG_LLC2 is not set
+# CONFIG_IPX is not set
+# CONFIG_ATALK is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+# CONFIG_ECONET is not set
+# CONFIG_WAN_ROUTER is not set
+# CONFIG_NET_SCHED is not set
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+# CONFIG_HAMRADIO is not set
+# CONFIG_CAN is not set
+# CONFIG_IRDA is not set
+# CONFIG_BT is not set
+# CONFIG_AF_RXRPC is not set
+
+#
+# Wireless
+#
+# CONFIG_CFG80211 is not set
+CONFIG_WIRELESS_EXT=y
+# CONFIG_MAC80211 is not set
+CONFIG_IEEE80211=y
+# CONFIG_IEEE80211_DEBUG is not set
+# CONFIG_IEEE80211_CRYPT_WEP is not set
+# CONFIG_IEEE80211_CRYPT_CCMP is not set
+# CONFIG_IEEE80211_CRYPT_TKIP is not set
+# CONFIG_RFKILL is not set
+# CONFIG_NET_9P is not set
+
+#
+# Device Drivers
+#
+
+#
+# Generic Driver Options
+#
+CONFIG_UEVENT_HELPER_PATH="/sbin/hotplug"
+CONFIG_STANDALONE=y
+CONFIG_PREVENT_FIRMWARE_BUILD=y
+CONFIG_FW_LOADER=y
+# CONFIG_SYS_HYPERVISOR is not set
+CONFIG_CONNECTOR=y
+CONFIG_PROC_EVENTS=y
+CONFIG_MTD=y
+# CONFIG_MTD_DEBUG is not set
+# CONFIG_MTD_CONCAT is not set
+CONFIG_MTD_PARTITIONS=y
+CONFIG_MTD_REDBOOT_PARTS=y
+CONFIG_MTD_REDBOOT_DIRECTORY_BLOCK=-1
+# CONFIG_MTD_REDBOOT_PARTS_UNALLOCATED is not set
+# CONFIG_MTD_REDBOOT_PARTS_READONLY is not set
+CONFIG_MTD_CMDLINE_PARTS=y
+# CONFIG_MTD_AFS_PARTS is not set
+# CONFIG_MTD_AR7_PARTS is not set
+
+#
+# User Modules And Translation Layers
+#
+CONFIG_MTD_CHAR=y
+CONFIG_MTD_BLKDEVS=y
+CONFIG_MTD_BLOCK=y
+# CONFIG_FTL is not set
+# CONFIG_NFTL is not set
+# CONFIG_INFTL is not set
+# CONFIG_RFD_FTL is not set
+# CONFIG_SSFDC is not set
+# CONFIG_MTD_OOPS is not set
+
+#
+# RAM/ROM/Flash chip drivers
+#
+CONFIG_MTD_CFI=y
+# CONFIG_MTD_JEDECPROBE is not set
+CONFIG_MTD_GEN_PROBE=y
+CONFIG_MTD_CFI_ADV_OPTIONS=y
+CONFIG_MTD_CFI_NOSWAP=y
+# CONFIG_MTD_CFI_BE_BYTE_SWAP is not set
+# CONFIG_MTD_CFI_LE_BYTE_SWAP is not set
+CONFIG_MTD_CFI_GEOMETRY=y
+# CONFIG_MTD_MAP_BANK_WIDTH_1 is not set
+CONFIG_MTD_MAP_BANK_WIDTH_2=y
+# CONFIG_MTD_MAP_BANK_WIDTH_4 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_8 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_16 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_32 is not set
+CONFIG_MTD_CFI_I1=y
+# CONFIG_MTD_CFI_I2 is not set
+# CONFIG_MTD_CFI_I4 is not set
+# CONFIG_MTD_CFI_I8 is not set
+# CONFIG_MTD_OTP is not set
+# CONFIG_MTD_CFI_INTELEXT is not set
+CONFIG_MTD_CFI_AMDSTD=y
+# CONFIG_MTD_CFI_STAA is not set
+CONFIG_MTD_CFI_UTIL=y
+CONFIG_MTD_RAM=y
+# CONFIG_MTD_ROM is not set
+# CONFIG_MTD_ABSENT is not set
+# CONFIG_MTD_XIP is not set
+
+#
+# Mapping drivers for chip access
+#
+# CONFIG_MTD_COMPLEX_MAPPINGS is not set
+# CONFIG_MTD_PHYSMAP is not set
+# CONFIG_MTD_ARM_INTEGRATOR is not set
+# CONFIG_MTD_PLATRAM is not set
+# CONFIG_MTD_MXC is not set
+
+#
+# Self-contained MTD device drivers
+#
+# CONFIG_MTD_DATAFLASH is not set
+# CONFIG_MTD_M25P80 is not set
+# CONFIG_MTD_SLRAM is not set
+# CONFIG_MTD_PHRAM is not set
+# CONFIG_MTD_MTDRAM is not set
+# CONFIG_MTD_BLOCK2MTD is not set
+
+#
+# Disk-On-Chip Device Drivers
+#
+# CONFIG_MTD_DOC2000 is not set
+# CONFIG_MTD_DOC2001 is not set
+# CONFIG_MTD_DOC2001PLUS is not set
+CONFIG_MTD_NAND=y
+# CONFIG_MTD_NAND_VERIFY_WRITE is not set
+# CONFIG_MTD_NAND_ECC_SMC is not set
+# CONFIG_MTD_NAND_MUSEUM_IDS is not set
+CONFIG_MTD_NAND_IDS=y
+# CONFIG_MTD_NAND_DISKONCHIP is not set
+# CONFIG_MTD_NAND_NANDSIM is not set
+CONFIG_MTD_NAND_MXC_V2=y
+# CONFIG_MTD_NAND_MXC_SWECC is not set
+# CONFIG_MTD_NAND_MXC_FORCE_CE is not set
+# CONFIG_MXC_NAND_LOW_LEVEL_ERASE is not set
+# CONFIG_MTD_NAND_PLATFORM is not set
+# CONFIG_MTD_ONENAND is not set
+
+#
+# UBI - Unsorted block images
+#
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_WL_THRESHOLD=4096
+CONFIG_MTD_UBI_BEB_RESERVE=1
+CONFIG_MTD_UBI_GLUEBI=y
+
+#
+# UBI debugging options
+#
+# CONFIG_MTD_UBI_DEBUG is not set
+
+#
+# Voltage and Current regulators
+#
+CONFIG_REGULATOR_API=y
+CONFIG_REGULATOR=y
+# CONFIG_REGULATOR_DEBUG is not set
+# CONFIG_REGULATOR_WM8350 is not set
+# CONFIG_PARPORT is not set
+CONFIG_BLK_DEV=y
+# CONFIG_BLK_DEV_COW_COMMON is not set
+CONFIG_BLK_DEV_LOOP=y
+# CONFIG_BLK_DEV_CRYPTOLOOP is not set
+# CONFIG_BLK_DEV_NBD is not set
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_COUNT=16
+CONFIG_BLK_DEV_RAM_SIZE=16384
+# CONFIG_BLK_DEV_XIP is not set
+# CONFIG_CDROM_PKTCDVD is not set
+# CONFIG_ATA_OVER_ETH is not set
+# CONFIG_MISC_DEVICES is not set
+CONFIG_HAVE_IDE=y
+# CONFIG_IDE is not set
+
+#
+# SCSI device support
+#
+# CONFIG_RAID_ATTRS is not set
+# CONFIG_SCSI is not set
+# CONFIG_SCSI_DMA is not set
+# CONFIG_SCSI_NETLINK is not set
+# CONFIG_ATA is not set
+# CONFIG_MD is not set
+CONFIG_NETDEVICES=y
+# CONFIG_NETDEVICES_MULTIQUEUE is not set
+# CONFIG_DUMMY is not set
+# CONFIG_BONDING is not set
+# CONFIG_MACVLAN is not set
+# CONFIG_EQUALIZER is not set
+# CONFIG_TUN is not set
+# CONFIG_VETH is not set
+# CONFIG_PHYLIB is not set
+CONFIG_NET_ETHERNET=y
+# CONFIG_MII is not set
+# CONFIG_AX88796 is not set
+# CONFIG_SMC91X is not set
+# CONFIG_DM9000 is not set
+# CONFIG_ENC28J60 is not set
+# CONFIG_SMC911X is not set
+# CONFIG_SMSC911X is not set
+# CONFIG_IBM_NEW_EMAC_ZMII is not set
+# CONFIG_IBM_NEW_EMAC_RGMII is not set
+# CONFIG_IBM_NEW_EMAC_TAH is not set
+# CONFIG_IBM_NEW_EMAC_EMAC4 is not set
+# CONFIG_B44 is not set
+# CONFIG_CS89x0 is not set
+CONFIG_FEC=y
+# CONFIG_FEC2 is not set
+# CONFIG_NETDEV_1000 is not set
+# CONFIG_NETDEV_10000 is not set
+
+#
+# Wireless LAN
+#
+# CONFIG_WLAN_PRE80211 is not set
+# CONFIG_WLAN_80211 is not set
+# CONFIG_IWLWIFI_LEDS is not set
+# CONFIG_WAN is not set
+# CONFIG_PPP is not set
+# CONFIG_SLIP is not set
+# CONFIG_NETCONSOLE is not set
+# CONFIG_NETPOLL is not set
+# CONFIG_NET_POLL_CONTROLLER is not set
+# CONFIG_ISDN is not set
+
+#
+# Input device support
+#
+CONFIG_INPUT=y
+# CONFIG_INPUT_FF_MEMLESS is not set
+# CONFIG_INPUT_POLLDEV is not set
+
+#
+# Userland interfaces
+#
+CONFIG_INPUT_MOUSEDEV=y
+CONFIG_INPUT_MOUSEDEV_PSAUX=y
+CONFIG_INPUT_MOUSEDEV_SCREEN_X=1024
+CONFIG_INPUT_MOUSEDEV_SCREEN_Y=768
+# CONFIG_INPUT_JOYDEV is not set
+CONFIG_INPUT_EVDEV=y
+# CONFIG_INPUT_EVBUG is not set
+
+#
+# Input Device Drivers
+#
+CONFIG_INPUT_KEYBOARD=y
+# CONFIG_KEYBOARD_ATKBD is not set
+# CONFIG_KEYBOARD_SUNKBD is not set
+# CONFIG_KEYBOARD_LKKBD is not set
+# CONFIG_KEYBOARD_XTKBD is not set
+# CONFIG_KEYBOARD_NEWTON is not set
+# CONFIG_KEYBOARD_STOWAWAY is not set
+CONFIG_KEYBOARD_MXC=y
+# CONFIG_INPUT_MOUSE is not set
+# CONFIG_INPUT_JOYSTICK is not set
+# CONFIG_INPUT_TABLET is not set
+# CONFIG_INPUT_TOUCHSCREEN is not set
+# CONFIG_INPUT_MISC is not set
+
+#
+# Hardware I/O ports
+#
+# CONFIG_SERIO is not set
+# CONFIG_GAMEPORT is not set
+
+#
+# Character devices
+#
+CONFIG_VT=y
+CONFIG_VT_CONSOLE=y
+CONFIG_HW_CONSOLE=y
+# CONFIG_VT_HW_CONSOLE_BINDING is not set
+CONFIG_DEVKMEM=y
+# CONFIG_SERIAL_NONSTANDARD is not set
+
+#
+# Serial drivers
+#
+# CONFIG_SERIAL_8250 is not set
+
+#
+# Non-8250 serial port support
+#
+CONFIG_SERIAL_MXC=y
+CONFIG_SERIAL_MXC_CONSOLE=y
+CONFIG_SERIAL_CORE=y
+CONFIG_SERIAL_CORE_CONSOLE=y
+CONFIG_UNIX98_PTYS=y
+# CONFIG_LEGACY_PTYS is not set
+# CONFIG_IPMI_HANDLER is not set
+CONFIG_HW_RANDOM=y
+# CONFIG_NVRAM is not set
+# CONFIG_R3964 is not set
+# CONFIG_RAW_DRIVER is not set
+# CONFIG_TCG_TPM is not set
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+# CONFIG_I2C_CHARDEV is not set
+
+#
+# I2C Hardware Bus support
+#
+CONFIG_I2C_MXC=y
+# CONFIG_I2C_MXC_HS is not set
+# CONFIG_I2C_OCORES is not set
+# CONFIG_I2C_PARPORT_LIGHT is not set
+# CONFIG_I2C_SIMTEC is not set
+# CONFIG_I2C_TAOS_EVM is not set
+# CONFIG_I2C_STUB is not set
+# CONFIG_I2C_PCA_PLATFORM is not set
+
+#
+# Miscellaneous I2C Chip support
+#
+# CONFIG_DS1682 is not set
+# CONFIG_SENSORS_EEPROM is not set
+# CONFIG_SENSORS_PCF8574 is not set
+# CONFIG_PCF8575 is not set
+# CONFIG_SENSORS_PCF8591 is not set
+# CONFIG_SENSORS_MAX6875 is not set
+# CONFIG_SENSORS_TSL2550 is not set
+# CONFIG_I2C_DEBUG_CORE is not set
+# CONFIG_I2C_DEBUG_ALGO is not set
+# CONFIG_I2C_DEBUG_BUS is not set
+# CONFIG_I2C_DEBUG_CHIP is not set
+# CONFIG_I2C_SLAVE is not set
+CONFIG_SPI=y
+CONFIG_SPI_MASTER=y
+
+#
+# SPI Master Controller Drivers
+#
+# CONFIG_SPI_BITBANG is not set
+# CONFIG_SPI_MXC is not set
+
+#
+# SPI Protocol Masters
+#
+# CONFIG_SPI_AT25 is not set
+# CONFIG_SPI_SPIDEV is not set
+# CONFIG_SPI_TLE62X0 is not set
+# CONFIG_W1 is not set
+# CONFIG_POWER_SUPPLY is not set
+# CONFIG_HWMON is not set
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_NOWAYOUT=y
+
+#
+# Watchdog Device Drivers
+#
+# CONFIG_SOFT_WATCHDOG is not set
+CONFIG_MXC_WATCHDOG=y
+
+#
+# Sonics Silicon Backplane
+#
+CONFIG_SSB_POSSIBLE=y
+# CONFIG_SSB is not set
+
+#
+# Multifunction device drivers
+#
+# CONFIG_MFD_SM501 is not set
+# CONFIG_MFD_ASIC3 is not set
+# CONFIG_HTC_PASIC3 is not set
+
+#
+# Multimedia devices
+#
+
+#
+# Multimedia core support
+#
+# CONFIG_VIDEO_DEV is not set
+# CONFIG_DVB_CORE is not set
+# CONFIG_VIDEO_MEDIA is not set
+
+#
+# Multimedia drivers
+#
+# CONFIG_DAB is not set
+
+#
+# Graphics support
+#
+# CONFIG_VGASTATE is not set
+# CONFIG_VIDEO_OUTPUT_CONTROL is not set
+CONFIG_FB=y
+# CONFIG_FIRMWARE_EDID is not set
+# CONFIG_FB_DDC is not set
+CONFIG_FB_CFB_FILLRECT=y
+CONFIG_FB_CFB_COPYAREA=y
+CONFIG_FB_CFB_IMAGEBLIT=y
+# CONFIG_FB_CFB_REV_PIXELS_IN_BYTE is not set
+# CONFIG_FB_SYS_FILLRECT is not set
+# CONFIG_FB_SYS_COPYAREA is not set
+# CONFIG_FB_SYS_IMAGEBLIT is not set
+# CONFIG_FB_FOREIGN_ENDIAN is not set
+# CONFIG_FB_SYS_FOPS is not set
+# CONFIG_FB_SVGALIB is not set
+# CONFIG_FB_MACMODES is not set
+# CONFIG_FB_BACKLIGHT is not set
+# CONFIG_FB_MODE_HELPERS is not set
+# CONFIG_FB_TILEBLITTING is not set
+
+#
+# Frame buffer hardware drivers
+#
+CONFIG_FB_MXC=y
+CONFIG_FB_MXC_SYNC_PANEL=y
+# CONFIG_FB_MXC_EPSON_VGA_SYNC_PANEL is not set
+# CONFIG_FB_MXC_CLAA_WVGA_SYNC_PANEL is not set
+# CONFIG_FB_MXC_TVOUT is not set
+# CONFIG_FB_MXC_TVOUT_CH7024 is not set
+# CONFIG_FB_MXC_ASYNC_PANEL is not set
+# CONFIG_FB_UVESA is not set
+# CONFIG_FB_S1D13XXX is not set
+# CONFIG_FB_VIRTUAL is not set
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+# CONFIG_LCD_CLASS_DEVICE is not set
+CONFIG_BACKLIGHT_CLASS_DEVICE=y
+# CONFIG_BACKLIGHT_CORGI is not set
+CONFIG_BACKLIGHT_MXC=y
+CONFIG_BACKLIGHT_MXC_LCDC=y
+
+#
+# Display device support
+#
+# CONFIG_DISPLAY_SUPPORT is not set
+
+#
+# Console display driver support
+#
+# CONFIG_VGA_CONSOLE is not set
+CONFIG_DUMMY_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE=y
+# CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY is not set
+# CONFIG_FRAMEBUFFER_CONSOLE_ROTATION is not set
+# CONFIG_FONTS is not set
+CONFIG_FONT_8x8=y
+CONFIG_FONT_8x16=y
+CONFIG_LOGO=y
+# CONFIG_LOGO_LINUX_MONO is not set
+# CONFIG_LOGO_LINUX_VGA16 is not set
+# CONFIG_LOGO_LINUX_CLUT224 is not set
+CONFIG_LOGO_LOGITECH_BABY_CLUT224=y
+
+#
+# Sound
+#
+CONFIG_SOUND=y
+
+#
+# Advanced Linux Sound Architecture
+#
+CONFIG_SND=y
+CONFIG_SND_TIMER=y
+CONFIG_SND_PCM=y
+# CONFIG_SND_SEQUENCER is not set
+CONFIG_SND_OSSEMUL=y
+CONFIG_SND_MIXER_OSS=y
+CONFIG_SND_PCM_OSS=y
+CONFIG_SND_PCM_OSS_PLUGINS=y
+# CONFIG_SND_DYNAMIC_MINORS is not set
+CONFIG_SND_SUPPORT_OLD_API=y
+CONFIG_SND_VERBOSE_PROCFS=y
+# CONFIG_SND_VERBOSE_PRINTK is not set
+# CONFIG_SND_DEBUG is not set
+
+#
+# Generic devices
+#
+# CONFIG_SND_DUMMY is not set
+# CONFIG_SND_MTPAV is not set
+# CONFIG_SND_SERIAL_U16550 is not set
+# CONFIG_SND_MPU401 is not set
+
+#
+# ALSA ARM devices
+#
+# CONFIG_SND_MXC_SPDIF is not set
+
+#
+# SPI devices
+#
+
+#
+# System on Chip audio support
+#
+CONFIG_SND_SOC=y
+CONFIG_SND_MXC_SOC=y
+CONFIG_SND_MXC_SOC_SSI=y
+CONFIG_SND_MXC_SOC_IRAM=y
+# CONFIG_SND_SOC_IMX_3STACK_WM8350 is not set
+# CONFIG_SND_SOC_IMX_3STACK_AK4647 is not set
+# CONFIG_SND_SOC_IMX_3STACK_WM8580 is not set
+# CONFIG_SND_SOC_IMX_3STACK_WM8903 is not set
+# CONFIG_SND_SOC_IMX_3STACK_SGTL5000 is not set
+# CONFIG_SND_SOC_IMX_3STACK_BLUETOOTH is not set
+CONFIG_SND_SOC_BABY_TLV320AIC3104=y
+
+#
+# ALSA SoC audio for Freescale SOCs
+#
+
+#
+# SoC Audio for the Texas Instruments OMAP
+#
+CONFIG_SND_SOC_TLV320AIC3104=y
+
+#
+# Open Sound System
+#
+# CONFIG_SOUND_PRIME is not set
+# CONFIG_HID_SUPPORT is not set
+# CONFIG_USB_SUPPORT is not set
+CONFIG_USB_ARCH_HAS_EHCI=y
+CONFIG_MMC=y
+# CONFIG_MMC_DEBUG is not set
+# CONFIG_MMC_UNSAFE_RESUME is not set
+
+#
+# MMC/SD Card Drivers
+#
+# CONFIG_MMC_BLOCK is not set
+# CONFIG_SDIO_UART is not set
+# CONFIG_MMC_TEST is not set
+
+#
+# MMC/SD Host Controller Drivers
+#
+# CONFIG_MMC_SPI is not set
+# CONFIG_MMC_MXC is not set
+CONFIG_MMC_IMX_ESDHCI=y
+# CONFIG_MMC_IMX_ESDHCI_SELECT2 is not set
+# CONFIG_MMC_IMX_ESDHCI_PIO_MODE is not set
+# CONFIG_NEW_LEDS is not set
+CONFIG_RTC_LIB=y
+# CONFIG_RTC_CLASS is not set
+# CONFIG_UIO is not set
+
+#
+# MXC support drivers
+#
+
+#
+# MXC SSI support
+#
+CONFIG_MXC_SSI=y
+
+#
+# MXC Digital Audio Multiplexer support
+#
+CONFIG_MXC_DAM=y
+
+#
+# MXC PMIC support
+#
+# CONFIG_MXC_PMIC_MC13783 is not set
+# CONFIG_MXC_PMIC_MC13892 is not set
+# CONFIG_MXC_PMIC_MC34704 is not set
+# CONFIG_MXC_PMIC_MC9SDZ60 is not set
+
+#
+# Advanced Power Management devices
+#
+
+#
+# MXC Security Drivers
+#
+# CONFIG_MXC_SECURITY_SCC is not set
+# CONFIG_MXC_SECURITY_RNG is not set
+# CONFIG_MXC_DRYICE is not set
+
+#
+# MXC MPEG4 Encoder Kernel module support
+#
+# CONFIG_MXC_HMP4E is not set
+
+#
+# MXC HARDWARE EVENT
+#
+# CONFIG_MXC_HWEVENT is not set
+
+#
+# MXC VPU(Video Processing Unit) support
+#
+
+#
+# MXC Asynchronous Sample Rate Converter support
+#
+
+#
+# MXC Bluetooth support
+#
+
+#
+# Broadcom GPS ioctrl support
+#
+
+#
+# MXC Media Local Bus Driver
+#
+
+#
+# i.MX ADC support
+#
+CONFIG_IMX_ADC=y
+
+#
+# MXC Baby support
+#
+CONFIG_MXC_BABY_DEBUG_GPIO=y
+CONFIG_MXC_BABY_BUTTONS=y
+
+#
+# Baby MSP430 support
+#
+CONFIG_BABY_MSP430_PROGRAMMER=y
+
+#
+# File systems
+#
+# CONFIG_EXT2_FS is not set
+# CONFIG_EXT3_FS is not set
+# CONFIG_EXT4DEV_FS is not set
+# CONFIG_REISERFS_FS is not set
+# CONFIG_JFS_FS is not set
+# CONFIG_FS_POSIX_ACL is not set
+# CONFIG_XFS_FS is not set
+# CONFIG_OCFS2_FS is not set
+# CONFIG_DNOTIFY is not set
+CONFIG_INOTIFY=y
+CONFIG_INOTIFY_USER=y
+# CONFIG_QUOTA is not set
+# CONFIG_AUTOFS_FS is not set
+# CONFIG_AUTOFS4_FS is not set
+# CONFIG_FUSE_FS is not set
+
+#
+# CD-ROM/DVD Filesystems
+#
+# CONFIG_ISO9660_FS is not set
+# CONFIG_UDF_FS is not set
+
+#
+# DOS/FAT/NT Filesystems
+#
+# CONFIG_MSDOS_FS is not set
+# CONFIG_VFAT_FS is not set
+# CONFIG_NTFS_FS is not set
+
+#
+# Pseudo filesystems
+#
+CONFIG_PROC_FS=y
+CONFIG_PROC_SYSCTL=y
+CONFIG_SYSFS=y
+CONFIG_TMPFS=y
+# CONFIG_TMPFS_POSIX_ACL is not set
+# CONFIG_HUGETLB_PAGE is not set
+# CONFIG_CONFIGFS_FS is not set
+
+#
+# Miscellaneous filesystems
+#
+# CONFIG_ADFS_FS is not set
+# CONFIG_AFFS_FS is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EFS_FS is not set
+# CONFIG_JFFS2_FS is not set
+CONFIG_UBIFS_FS=y
+# CONFIG_UBIFS_FS_XATTR is not set
+# CONFIG_UBIFS_FS_ADVANCED_COMPR is not set
+CONFIG_UBIFS_FS_LZO=y
+CONFIG_UBIFS_FS_ZLIB=y
+# CONFIG_UBIFS_FS_DEBUG is not set
+CONFIG_CRAMFS=y
+# CONFIG_VXFS_FS is not set
+CONFIG_MINI_FO=y
+# CONFIG_MINIX_FS is not set
+# CONFIG_HPFS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_ROMFS_FS is not set
+# CONFIG_SYSV_FS is not set
+# CONFIG_UFS_FS is not set
+CONFIG_NETWORK_FILESYSTEMS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3=y
+# CONFIG_NFS_V3_ACL is not set
+# CONFIG_NFS_V4 is not set
+# CONFIG_NFSD is not set
+# CONFIG_ROOT_NFS is not set
+CONFIG_LOCKD=y
+CONFIG_LOCKD_V4=y
+CONFIG_NFS_COMMON=y
+CONFIG_SUNRPC=y
+# CONFIG_SUNRPC_BIND34 is not set
+# CONFIG_RPCSEC_GSS_KRB5 is not set
+# CONFIG_RPCSEC_GSS_SPKM3 is not set
+# CONFIG_SMB_FS is not set
+# CONFIG_CIFS is not set
+# CONFIG_NCP_FS is not set
+# CONFIG_CODA_FS is not set
+# CONFIG_AFS_FS is not set
+
+#
+# Partition Types
+#
+# CONFIG_PARTITION_ADVANCED is not set
+CONFIG_MSDOS_PARTITION=y
+CONFIG_NLS=y
+CONFIG_NLS_DEFAULT="iso8859-1"
+CONFIG_NLS_CODEPAGE_437=y
+# CONFIG_NLS_CODEPAGE_737 is not set
+# CONFIG_NLS_CODEPAGE_775 is not set
+# CONFIG_NLS_CODEPAGE_850 is not set
+# CONFIG_NLS_CODEPAGE_852 is not set
+# CONFIG_NLS_CODEPAGE_855 is not set
+# CONFIG_NLS_CODEPAGE_857 is not set
+# CONFIG_NLS_CODEPAGE_860 is not set
+# CONFIG_NLS_CODEPAGE_861 is not set
+# CONFIG_NLS_CODEPAGE_862 is not set
+# CONFIG_NLS_CODEPAGE_863 is not set
+# CONFIG_NLS_CODEPAGE_864 is not set
+# CONFIG_NLS_CODEPAGE_865 is not set
+# CONFIG_NLS_CODEPAGE_866 is not set
+# CONFIG_NLS_CODEPAGE_869 is not set
+# CONFIG_NLS_CODEPAGE_936 is not set
+# CONFIG_NLS_CODEPAGE_950 is not set
+# CONFIG_NLS_CODEPAGE_932 is not set
+# CONFIG_NLS_CODEPAGE_949 is not set
+# CONFIG_NLS_CODEPAGE_874 is not set
+# CONFIG_NLS_ISO8859_8 is not set
+# CONFIG_NLS_CODEPAGE_1250 is not set
+# CONFIG_NLS_CODEPAGE_1251 is not set
+CONFIG_NLS_ASCII=y
+CONFIG_NLS_ISO8859_1=y
+# CONFIG_NLS_ISO8859_2 is not set
+# CONFIG_NLS_ISO8859_3 is not set
+# CONFIG_NLS_ISO8859_4 is not set
+# CONFIG_NLS_ISO8859_5 is not set
+# CONFIG_NLS_ISO8859_6 is not set
+# CONFIG_NLS_ISO8859_7 is not set
+# CONFIG_NLS_ISO8859_9 is not set
+# CONFIG_NLS_ISO8859_13 is not set
+# CONFIG_NLS_ISO8859_14 is not set
+# CONFIG_NLS_ISO8859_15 is not set
+# CONFIG_NLS_KOI8_R is not set
+# CONFIG_NLS_KOI8_U is not set
+CONFIG_NLS_UTF8=y
+# CONFIG_DLM is not set
+
+#
+# Kernel hacking
+#
+# CONFIG_PRINTK_TIME is not set
+CONFIG_ENABLE_WARN_DEPRECATED=y
+CONFIG_ENABLE_MUST_CHECK=y
+CONFIG_FRAME_WARN=1024
+# CONFIG_MAGIC_SYSRQ is not set
+# CONFIG_UNUSED_SYMBOLS is not set
+# CONFIG_DEBUG_FS is not set
+# CONFIG_HEADERS_CHECK is not set
+# CONFIG_DEBUG_KERNEL is not set
+# CONFIG_DEBUG_BUGVERBOSE is not set
+CONFIG_FRAME_POINTER=y
+# CONFIG_SAMPLES is not set
+# CONFIG_DEBUG_USER is not set
+
+#
+# Security options
+#
+# CONFIG_KEYS is not set
+# CONFIG_SECURITY is not set
+# CONFIG_SECURITY_FILE_CAPABILITIES is not set
+CONFIG_CRYPTO=y
+
+#
+# Crypto core or helper
+#
+CONFIG_CRYPTO_ALGAPI=y
+# CONFIG_CRYPTO_MANAGER is not set
+# CONFIG_CRYPTO_GF128MUL is not set
+# CONFIG_CRYPTO_NULL is not set
+# CONFIG_CRYPTO_CRYPTD is not set
+# CONFIG_CRYPTO_AUTHENC is not set
+# CONFIG_CRYPTO_TEST is not set
+
+#
+# Authenticated Encryption with Associated Data
+#
+# CONFIG_CRYPTO_CCM is not set
+# CONFIG_CRYPTO_GCM is not set
+# CONFIG_CRYPTO_SEQIV is not set
+
+#
+# Block modes
+#
+# CONFIG_CRYPTO_CBC is not set
+# CONFIG_CRYPTO_CTR is not set
+# CONFIG_CRYPTO_CTS is not set
+# CONFIG_CRYPTO_ECB is not set
+# CONFIG_CRYPTO_LRW is not set
+# CONFIG_CRYPTO_PCBC is not set
+# CONFIG_CRYPTO_XTS is not set
+
+#
+# Hash modes
+#
+# CONFIG_CRYPTO_HMAC is not set
+# CONFIG_CRYPTO_XCBC is not set
+
+#
+# Digest
+#
+# CONFIG_CRYPTO_CRC32C is not set
+# CONFIG_CRYPTO_MD4 is not set
+# CONFIG_CRYPTO_MD5 is not set
+# CONFIG_CRYPTO_MICHAEL_MIC is not set
+# CONFIG_CRYPTO_SHA1 is not set
+# CONFIG_CRYPTO_SHA256 is not set
+# CONFIG_CRYPTO_SHA512 is not set
+# CONFIG_CRYPTO_TGR192 is not set
+# CONFIG_CRYPTO_WP512 is not set
+
+#
+# Ciphers
+#
+# CONFIG_CRYPTO_AES is not set
+# CONFIG_CRYPTO_ANUBIS is not set
+# CONFIG_CRYPTO_ARC4 is not set
+# CONFIG_CRYPTO_BLOWFISH is not set
+# CONFIG_CRYPTO_CAMELLIA is not set
+# CONFIG_CRYPTO_CAST5 is not set
+# CONFIG_CRYPTO_CAST6 is not set
+# CONFIG_CRYPTO_DES is not set
+# CONFIG_CRYPTO_FCRYPT is not set
+# CONFIG_CRYPTO_KHAZAD is not set
+# CONFIG_CRYPTO_SALSA20 is not set
+# CONFIG_CRYPTO_SEED is not set
+# CONFIG_CRYPTO_SERPENT is not set
+# CONFIG_CRYPTO_TEA is not set
+# CONFIG_CRYPTO_TWOFISH is not set
+
+#
+# Compression
+#
+CONFIG_CRYPTO_DEFLATE=y
+CONFIG_CRYPTO_LZO=y
+CONFIG_CRYPTO_HW=y
+
+#
+# Library routines
+#
+CONFIG_BITREVERSE=y
+# CONFIG_GENERIC_FIND_FIRST_BIT is not set
+# CONFIG_GENERIC_FIND_NEXT_BIT is not set
+# CONFIG_CRC_CCITT is not set
+CONFIG_CRC16=y
+# CONFIG_CRC_ITU_T is not set
+CONFIG_CRC32=y
+# CONFIG_CRC7 is not set
+# CONFIG_LIBCRC32C is not set
+CONFIG_ZLIB_INFLATE=y
+CONFIG_ZLIB_DEFLATE=y
+CONFIG_LZO_COMPRESS=y
+CONFIG_LZO_DECOMPRESS=y
+CONFIG_PLIST=y
+CONFIG_HAS_IOMEM=y
+CONFIG_HAS_IOPORT=y
+CONFIG_HAS_DMA=y
Index: linux-2.6.26/arch/arm/mach-mx25/iomux.c
===================================================================
--- linux-2.6.26.orig/arch/arm/mach-mx25/iomux.c	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/arch/arm/mach-mx25/iomux.c	2009-05-08 17:00:15.000000000 +0100
@@ -75,7 +75,7 @@
 	u32 mux_reg = PIN_TO_IOMUX_MUX(pin);
 	u8 *rp;
 
-	BUG_ON(pin_index > MUX_PIN_NUM_MAX);
+	BUG_ON(PIN_TO_IOMUX_PAD(pin) && pin_index > MUX_PIN_NUM_MAX);
 	if (mux_reg != NON_MUX_I) {
 		mux_reg += IOMUXGPR;
 		BUG_ON((mux_reg > IOMUXSW_MUX_END)
@@ -85,16 +85,18 @@
 		/*
 		 * Log a warning if a pin changes ownership
 		 */
-		rp = iomux_pin_res_table + pin_index;
-		if (*rp && *rp != (cfg | MUX_USED)) {
-			/*Console: how to do */
-			printk(KERN_ERR "iomux_config_mux: Warning: iomux pin"
-			       " config changed, index=%d register=%d, "
-			       " prev=0x%x new=0x%x\n", pin_index, mux_reg,
-			       *rp, cfg);
-			ret = -EINVAL;
+ 		if (PIN_TO_IOMUX_PAD(pin)) {
+ 			rp = iomux_pin_res_table + pin_index;
+ 			if ((cfg & *rp) && (*rp != cfg)) {
+ 				/*Console: how to do */
+ 				printk(KERN_ERR "iomux_config_mux: Warning: iomux pin"
+ 				       " config changed, index=%d register=%d, "
+ 				       " prev=0x%x new=0x%x\n", pin_index, mux_reg,
+ 				       *rp, cfg);
+ 				ret = -EINVAL;
+ 			}
+ 			*rp = cfg;
 		}
-		*rp = cfg | MUX_USED;
 		spin_unlock(&gpio_mux_lock);
 	}
 
Index: linux-2.6.26/arch/arm/mach-mx25/Makefile
===================================================================
--- linux-2.6.26.orig/arch/arm/mach-mx25/Makefile	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/arch/arm/mach-mx25/Makefile	2009-05-08 17:00:15.000000000 +0100
@@ -8,6 +8,7 @@
 obj-$(CONFIG_MXC_SDMA_API) 	+= dma.o
 obj-$(CONFIG_SPI_MXC)		+= mx25_3stack_cpld.o
 obj-$(CONFIG_MACH_MX25_3DS)	+= mx25_3stack.o mx25_3stack_gpio.o
+obj-$(CONFIG_MACH_MX25_BABY)	+= mx25_baby.o mx25_baby_gpio.o
 
 obj-$(CONFIG_USB_EHCI_ARC_H2)	+= usb_h2.o
 
Index: linux-2.6.26/arch/arm/mach-mx25/iomux.h
===================================================================
--- linux-2.6.26.orig/arch/arm/mach-mx25/iomux.h	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/arch/arm/mach-mx25/iomux.h	2009-05-08 17:00:15.000000000 +0100
@@ -173,6 +173,15 @@
 } iomux_input_cfg_t;
 
 /*!
+ * IOMUX input functions
+ * SW_SELECT_INPUT bits 2-0
+ */
+typedef enum gpio_direction_t {
+	GPIO_DIRECTION_OUTPUT = 0x0,
+	GPIO_DIRECTION_INPUT
+} gpio_direction_t;
+
+/*!
  * Request ownership for an IO pin. This function has to be the first one
  * being called before that pin is used. The caller has to check the
  * return value to make sure it returns 0.
Index: linux-2.6.26/include/asm-arm/arch-mxc/mx25.h
===================================================================
--- linux-2.6.26.orig/include/asm-arm/arch-mxc/mx25.h	2009-05-08 16:56:35.000000000 +0100
+++ linux-2.6.26/include/asm-arm/arch-mxc/mx25.h	2009-05-08 17:00:15.000000000 +0100
@@ -221,7 +221,7 @@
 #define EPIT2_BASE_ADDR     (AIPS2_BASE_ADDR + 0x00098000)
 #define GPIO4_BASE_ADDR     (AIPS2_BASE_ADDR + 0x0009C000)
 #define PWM2_BASE_ADDR      (AIPS2_BASE_ADDR + 0x000A0000)
-#define GPIO3_BASE_ADDR     (AIPS2_BASE_ADDR + 0x000AD000)
+#define GPIO3_BASE_ADDR     (AIPS2_BASE_ADDR + 0x000A4000)
 #define PWM3_BASE_ADDR      (AIPS2_BASE_ADDR + 0x000A8000)
 #define SCC_BASE_ADDR       (AIPS2_BASE_ADDR + 0x000AC000)
 #define RNGB_BASE_ADDR      (AIPS2_BASE_ADDR + 0x000B0000)
