From c4a8b416a57d71a7d6f6b20967e45fc89df8b588 Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Thu, 23 Apr 2009 11:40:01 +0800
Subject: [PATCH] ENGR00108640 IPUv3:support DP DC switch

1)Support dynamic switch between DP and DC.
2)Simplify some operation related with MXC v4l2 output.

Note:
For IPUv3, the switch is recommended to be done with
both LCD and TVout disabled.
Please flow these steps to switch DP from LCD to TVout.
1)echo U:720x480i-60 > /sys/class/graphics/fb1/mode
2)echo 1 > /sys/class/graphics/fb0/blank
3)echo 1 > /sys/class/graphics/fb1/blank
4)echo 1 > /sys/class/graphics/fb2/blank
5)echo 1-layer-fb >
	/sys/class/graphics/fb0/fsl_disp_property
6)echo 0 > /sys/class/graphics/fb0/blank
7)echo 0 > /sys/class/graphics/fb1/blank
Please flow these steps to do the switching DP from
TVout to LCD.
1)echo U:720x480i-60 > /sys/class/graphics/fb1/mode
2)echo 1 > /sys/class/graphics/fb0/blank
3)echo 1 > /sys/class/graphics/fb1/blank
4)echo 1 > /sys/class/graphics/fb2/blank
5)echo 1-layer-fb >
	/sys/class/graphics/fb1/fsl_disp_property
6)echo 0 > /sys/class/graphics/fb0/blank
7)echo 0 > /sys/class/graphics/fb1/blank

There are issues remain in these cases:
a.For IPUv3D
1)If both LCD and TVout are enabled and TVout uses DP,
  disable/enable TVout will cause TVout display crash.
2)Not stable to run v4l output on DP-BG while DP is
  used by TVout and LCD is on.
3)If either TVout or LCD is on, switching will cause
  display issue on TVout and LCD.
b.For IPUv3EX
1)Not stable to run v4l output on DP-BG while DP is
  used by TVout and LCD is on.
2)If both TVout and LCD are enabled, switching DP from
  LCD to TVout will cause flick issue on TVout.
3)If TVout is enabled and LCD is disabled, switching
  will cause flick issue on TVout.

Signed-off-by: Liu Ying <b17645@freescale.com>
---
 drivers/media/video/mxc/output/mxc_v4l2_output.c |   72 ++++-
 drivers/mxc/ipu3/ipu_common.c                    |   38 +++-
 drivers/mxc/ipu3/ipu_disp.c                      |  141 +++++++---
 drivers/mxc/ipu3/ipu_prv.h                       |    2 +-
 drivers/mxc/ipu3/ipu_regs.h                      |    1 +
 drivers/video/mxc/mxc_ipuv3_fb.c                 |  337 ++++++++++++++++++----
 include/linux/ipu.h                              |    4 +-
 include/linux/mxcfb.h                            |    1 +
 8 files changed, 482 insertions(+), 114 deletions(-)

diff --git a/drivers/media/video/mxc/output/mxc_v4l2_output.c b/drivers/media/video/mxc/output/mxc_v4l2_output.c
index 83903ff..fe73767 100644
--- a/drivers/media/video/mxc/output/mxc_v4l2_output.c
+++ b/drivers/media/video/mxc/output/mxc_v4l2_output.c
@@ -600,12 +600,29 @@ static int mxc_v4l2out_streamon(vout_data * vout)
 	} else
 #endif
 	{			/* Use SDC */
+		unsigned int ipu_ch = CHAN_NONE;
+
 		dev_dbg(dev, "Using SDC channel\n");
 
 		fbvar = fbi->var;
 
-		if (vout->cur_disp_output == 3) {
-			vout->display_ch = MEM_FG_SYNC;
+		if (fbi->fbops->fb_ioctl) {
+			old_fs = get_fs();
+			set_fs(KERNEL_DS);
+			fbi->fbops->fb_ioctl(fbi, MXCFB_GET_FB_IPU_CHAN,
+					(unsigned long)&ipu_ch);
+			set_fs(old_fs);
+		}
+
+		if (ipu_ch == CHAN_NONE) {
+			dev_err(dev,
+					"Can not get display ipu channel\n");
+			return -EINVAL;
+		}
+
+		vout->display_ch = ipu_ch;
+
+		if (vout->cur_disp_output == 3 || vout->cur_disp_output == 5) {
 			fbvar.bits_per_pixel = 16;
 			if (format_is_yuv(vout->v2f.fmt.pix.pixelformat))
 				fbvar.nonstd = IPU_PIX_FMT_UYVY;
@@ -615,16 +632,6 @@ static int mxc_v4l2out_streamon(vout_data * vout)
 			fbvar.xres = fbvar.xres_virtual = out_width;
 			fbvar.yres = out_height;
 			fbvar.yres_virtual = out_height * 2;
-		} else if (vout->cur_disp_output == 5) {
-			vout->display_ch = MEM_DC_SYNC;
-			fbvar.bits_per_pixel = 16;
-			fbvar.nonstd = IPU_PIX_FMT_UYVY;
-
-			fbvar.xres = fbvar.xres_virtual = out_width;
-			fbvar.yres = out_height;
-			fbvar.yres_virtual = out_height * 2;
-		} else {
-			vout->display_ch = MEM_BG_SYNC;
 		}
 
 		fbvar.activate |= FB_ACTIVATE_FORCE;
@@ -1514,8 +1521,9 @@ mxc_v4l2out_do_ioctl(struct inode *inode, struct file *file,
 				break;
 			}
 
-			/* only full screen supported for SDC BG */
-			if (vout->cur_disp_output == 4) {
+			/* only full screen supported for SDC BG and SDC DC */
+			if (vout->cur_disp_output == 4 ||
+			    vout->cur_disp_output == 5) {
 				crop->c = vout->crop_current;
 				break;
 			}
@@ -1591,8 +1599,40 @@ mxc_v4l2out_do_ioctl(struct inode *inode, struct file *file,
 			b = &vout->crop_bounds[vout->cur_disp_output];
 
 			fbnum = vout->output_fb_num[vout->cur_disp_output];
-			if (vout->cur_disp_output == 3)
-				fbnum = vout->output_fb_num[4];
+
+			/*
+			 * For FG overlay, it uses BG window parameter as
+			 * limitation reference; and BG must be enabled to
+			 * support FG.
+			 */
+			if (vout->cur_disp_output == 3) {
+				unsigned int i, ipu_ch = CHAN_NONE;
+				struct fb_info *fbi;
+				mm_segment_t old_fs;
+
+				for (i = 0; i < num_registered_fb; i++) {
+					fbi = registered_fb[i];
+					if (fbi->fbops->fb_ioctl) {
+						old_fs = get_fs();
+						set_fs(KERNEL_DS);
+						fbi->fbops->fb_ioctl(fbi,
+							MXCFB_GET_FB_IPU_CHAN,
+							(unsigned long)&ipu_ch);
+						set_fs(old_fs);
+					}
+					if (ipu_ch == CHAN_NONE) {
+						dev_err(vdev->dev,
+						"Can't get disp ipu channel\n");
+						retval = -EINVAL;
+						break;
+					}
+
+					if (ipu_ch == MEM_BG_SYNC) {
+						fbnum = i;
+						break;
+					}
+				}
+			}
 
 			b->width = registered_fb[fbnum]->var.xres;
 			b->height = registered_fb[fbnum]->var.yres;
diff --git a/drivers/mxc/ipu3/ipu_common.c b/drivers/mxc/ipu3/ipu_common.c
index f587ed0..431c3bd 100644
--- a/drivers/mxc/ipu3/ipu_common.c
+++ b/drivers/mxc/ipu3/ipu_common.c
@@ -1428,7 +1428,7 @@ int32_t ipu_disable_channel(ipu_channel_t channel, bool wait_for_stop)
 
 	if ((channel == MEM_BG_SYNC) || (channel == MEM_FG_SYNC) ||
 	    (channel == MEM_DC_SYNC)) {
-		_ipu_dp_dc_disable(channel);
+		_ipu_dp_dc_disable(channel, false);
 	} else if (wait_for_stop) {
 		timeout = 240;
 		while (idma_is_set(IDMAC_CHA_BUSY, in_dma) ||
@@ -1791,6 +1791,42 @@ uint32_t _ipu_channel_status(ipu_channel_t channel)
 	return stat;
 }
 
+int32_t ipu_swap_channel(ipu_channel_t from_ch, ipu_channel_t to_ch)
+{
+	uint32_t reg;
+	unsigned long lock_flags;
+
+	int from_dma = channel_2_dma(from_ch, IPU_INPUT_BUFFER);
+	int to_dma = channel_2_dma(to_ch, IPU_INPUT_BUFFER);
+
+	/* enable target channel */
+	spin_lock_irqsave(&ipu_lock, lock_flags);
+
+	reg = __raw_readl(IDMAC_CHA_EN(to_dma));
+	__raw_writel(reg | idma_mask(to_dma), IDMAC_CHA_EN(to_dma));
+
+	g_channel_enable_mask |= 1L << IPU_CHAN_ID(to_ch);
+
+	spin_unlock_irqrestore(&ipu_lock, lock_flags);
+
+	/* switch dp dc */
+	_ipu_dp_dc_disable(from_ch, true);
+
+	/* disable source channel */
+	spin_lock_irqsave(&ipu_lock, lock_flags);
+
+	reg = __raw_readl(IDMAC_CHA_EN(from_dma));
+	__raw_writel(reg & ~idma_mask(from_dma), IDMAC_CHA_EN(from_dma));
+	__raw_writel(idma_mask(from_dma), IPU_CHA_CUR_BUF(from_dma));
+
+	g_channel_enable_mask &= ~(1L << IPU_CHAN_ID(from_ch));
+
+	spin_unlock_irqrestore(&ipu_lock, lock_flags);
+
+	return 0;
+}
+EXPORT_SYMBOL(ipu_swap_channel);
+
 uint32_t bytes_per_pixel(uint32_t fmt)
 {
 	switch (fmt) {
diff --git a/drivers/mxc/ipu3/ipu_disp.c b/drivers/mxc/ipu3/ipu_disp.c
index 5e9a92c..017df53 100644
--- a/drivers/mxc/ipu3/ipu_disp.c
+++ b/drivers/mxc/ipu3/ipu_disp.c
@@ -383,7 +383,7 @@ void _ipu_dp_uninit(ipu_channel_t channel)
 
 void _ipu_dc_init(int dc_chan, int di, bool interlaced)
 {
-	u32 reg;
+	u32 reg = 0;
 
 	if ((dc_chan == 1) || (dc_chan == 5)) {
 		if (interlaced) {
@@ -402,14 +402,6 @@ void _ipu_dc_init(int dc_chan, int di, bool interlaced)
 		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_CHAN, 0, 0);
 		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_ADDR, 0, 0);
 
-		/* Make sure other DC sync channel is not assigned same DI */
-		reg = __raw_readl(DC_WR_CH_CONF(6 - dc_chan));
-		if ((di << 2) == (reg & DC_WR_CH_CONF_PROG_DI_ID)) {
-			reg &= ~DC_WR_CH_CONF_PROG_DI_ID;
-			reg |= di ? 0 : DC_WR_CH_CONF_PROG_DI_ID;
-			__raw_writel(reg, DC_WR_CH_CONF(6 - dc_chan));
-		}
-
 		reg = 0x2;
 		reg |= DC_DISP_ID_SYNC(di) << DC_WR_CH_CONF_PROG_DISP_ID_OFFSET;
 		reg |= di << 2;
@@ -471,6 +463,7 @@ int _ipu_chan_is_interlaced(ipu_channel_t channel)
 
 void _ipu_dp_dc_enable(ipu_channel_t channel)
 {
+	int di;
 	uint32_t reg;
 	uint32_t dc_chan;
 	int irq = 0;
@@ -494,55 +487,39 @@ void _ipu_dp_dc_enable(ipu_channel_t channel)
 		return;
 	}
 
+	di = g_dc_di_assignment[dc_chan];
+
+	/* Make sure other DC sync channel is not assigned same DI */
+	reg = __raw_readl(DC_WR_CH_CONF(6 - dc_chan));
+	if ((di << 2) == (reg & DC_WR_CH_CONF_PROG_DI_ID)) {
+		reg &= ~DC_WR_CH_CONF_PROG_DI_ID;
+		reg |= di ? 0 : DC_WR_CH_CONF_PROG_DI_ID;
+		__raw_writel(reg, DC_WR_CH_CONF(6 - dc_chan));
+	}
+
 	reg = __raw_readl(DC_WR_CH_CONF(dc_chan));
 	reg |= 4 << DC_WR_CH_CONF_PROG_TYPE_OFFSET;
 	__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
 
 	reg = __raw_readl(IPU_DISP_GEN);
-	if (g_dc_di_assignment[dc_chan])
+	if (di)
 		reg |= DI1_COUNTER_RELEASE;
 	else
 		reg |= DI0_COUNTER_RELEASE;
 	__raw_writel(reg, IPU_DISP_GEN);
 }
 
+static bool dc_swap;
+
 static irqreturn_t dc_irq_handler(int irq, void *dev_id)
 {
-	u32 reg;
-	uint32_t dc_chan;
-	ipu_channel_t channel;
 	struct completion *comp = dev_id;
 
-	if (irq == IPU_IRQ_DP_SF_END) {
-		channel = MEM_BG_SYNC;
-		dc_chan = 5;
-	} else if (irq == IPU_IRQ_DC_FC_1) {
-		channel = MEM_DC_SYNC;
-		dc_chan = 1;
-	} else {
-		return IRQ_HANDLED;
-	}
-
-	reg = __raw_readl(IPU_DISP_GEN);
-	if (g_dc_di_assignment[dc_chan])
-		reg &= ~DI1_COUNTER_RELEASE;
-	else
-		reg &= ~DI0_COUNTER_RELEASE;
-	__raw_writel(reg, IPU_DISP_GEN);
-
-	reg = __raw_readl(DC_WR_CH_CONF(dc_chan));
-	reg &= ~DC_WR_CH_CONF_PROG_TYPE_MASK;
-	__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
-
-	if (__raw_readl(IPUIRQ_2_STATREG(IPU_IRQ_VSYNC_PRE_0 + g_dc_di_assignment[dc_chan])) &
-		IPUIRQ_2_MASK(IPU_IRQ_VSYNC_PRE_0 + g_dc_di_assignment[dc_chan]))
-		dev_err(g_ipu_dev, "VSyncPre occurred before DI%d disable\n", g_dc_di_assignment[dc_chan]);
-
 	complete(comp);
 	return IRQ_HANDLED;
 }
 
-void _ipu_dp_dc_disable(ipu_channel_t channel)
+void _ipu_dp_dc_disable(ipu_channel_t channel, bool swap)
 {
 	int ret;
 	uint32_t lock_flags;
@@ -553,6 +530,8 @@ void _ipu_dp_dc_disable(ipu_channel_t channel)
 	int timeout = 50;
 	DECLARE_COMPLETION_ONSTACK(dc_comp);
 
+	dc_swap = swap;
+
 	if (channel == MEM_DC_SYNC) {
 		dc_chan = 1;
 		irq = IPU_IRQ_DC_FC_1;
@@ -561,6 +540,7 @@ void _ipu_dp_dc_disable(ipu_channel_t channel)
 		irq = IPU_IRQ_DP_SF_END;
 	} else if (channel == MEM_FG_SYNC) {
 		/* Disable FG channel */
+		dc_chan = 5;
 
 		spin_lock_irqsave(&ipu_lock, lock_flags);
 
@@ -586,13 +566,39 @@ void _ipu_dp_dc_disable(ipu_channel_t channel)
 			if (timeout <= 0)
 				break;
 		}
+
+		timeout = 50;
+
+		/*
+		 * Wait for DC triple buffer to empty,
+		 * this check is useful for tv overlay.
+		 */
+		if (g_dc_di_assignment[dc_chan] == 0)
+			while ((__raw_readl(DC_STAT) & 0x00000002)
+			       != 0x00000002) {
+				msleep(2);
+				timeout -= 2;
+				if (timeout <= 0)
+					break;
+			}
+		else if (g_dc_di_assignment[dc_chan] == 1)
+			while ((__raw_readl(DC_STAT) & 0x00000020)
+			       != 0x00000020) {
+				msleep(2);
+				timeout -= 2;
+				if (timeout <= 0)
+					break;
+			}
 		return;
 	} else {
 		return;
 	}
 
-	__raw_writel(IPUIRQ_2_MASK(IPU_IRQ_VSYNC_PRE_0 + g_dc_di_assignment[dc_chan]),
-		     IPUIRQ_2_STATREG(IPU_IRQ_VSYNC_PRE_0 + g_dc_di_assignment[dc_chan]));
+	if (!dc_swap)
+		__raw_writel(IPUIRQ_2_MASK(IPU_IRQ_VSYNC_PRE_0
+			+ g_dc_di_assignment[dc_chan]),
+		     IPUIRQ_2_STATREG(IPU_IRQ_VSYNC_PRE_0
+			+ g_dc_di_assignment[dc_chan]));
 	ipu_clear_irq(irq);
 	ret = ipu_request_irq(irq, dc_irq_handler, 0, NULL, &dc_comp);
 	if (ret < 0) {
@@ -603,6 +609,59 @@ void _ipu_dp_dc_disable(ipu_channel_t channel)
 
 	dev_dbg(g_ipu_dev, "DC stop timeout - %d * 10ms\n", 5 - ret);
 	ipu_free_irq(irq, &dc_comp);
+
+	if (dc_swap) {
+		spin_lock_irqsave(&ipu_lock, lock_flags);
+		/* Swap DC channel 1 and 5 settings, and disable old dc chan */
+		reg = __raw_readl(DC_WR_CH_CONF(dc_chan));
+		__raw_writel(reg, DC_WR_CH_CONF(6 - dc_chan));
+		reg &= ~DC_WR_CH_CONF_PROG_TYPE_MASK;
+		reg ^= DC_WR_CH_CONF_PROG_DI_ID;
+		__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
+		spin_unlock_irqrestore(&ipu_lock, lock_flags);
+	} else {
+		timeout = 50;
+
+		/* Wait for DC triple buffer to empty */
+		if (g_dc_di_assignment[dc_chan] == 0)
+			while ((__raw_readl(DC_STAT) & 0x00000002)
+				!= 0x00000002) {
+				msleep(2);
+				timeout -= 2;
+				if (timeout <= 0)
+					break;
+			}
+		else if (g_dc_di_assignment[dc_chan] == 1)
+			while ((__raw_readl(DC_STAT) & 0x00000020)
+				!= 0x00000020) {
+				msleep(2);
+				timeout -= 2;
+				if (timeout <= 0)
+					break;
+			}
+
+		spin_lock_irqsave(&ipu_lock, lock_flags);
+		reg = __raw_readl(DC_WR_CH_CONF(dc_chan));
+		reg &= ~DC_WR_CH_CONF_PROG_TYPE_MASK;
+		__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
+
+		reg = __raw_readl(IPU_DISP_GEN);
+		if (g_dc_di_assignment[dc_chan])
+			reg &= ~DI1_COUNTER_RELEASE;
+		else
+			reg &= ~DI0_COUNTER_RELEASE;
+		__raw_writel(reg, IPU_DISP_GEN);
+
+		spin_unlock_irqrestore(&ipu_lock, lock_flags);
+
+		if (__raw_readl(IPUIRQ_2_STATREG(IPU_IRQ_VSYNC_PRE_0
+			+ g_dc_di_assignment[dc_chan])) &
+			IPUIRQ_2_MASK(IPU_IRQ_VSYNC_PRE_0
+			+ g_dc_di_assignment[dc_chan]))
+			dev_dbg(g_ipu_dev,
+				"VSyncPre occurred before DI%d disable\n",
+				g_dc_di_assignment[dc_chan]);
+	}
 }
 
 void _ipu_init_dc_mappings(void)
diff --git a/drivers/mxc/ipu3/ipu_prv.h b/drivers/mxc/ipu3/ipu_prv.h
index fe3e17f..e1a9ae3 100644
--- a/drivers/mxc/ipu3/ipu_prv.h
+++ b/drivers/mxc/ipu3/ipu_prv.h
@@ -52,7 +52,7 @@ void _ipu_dp_uninit(ipu_channel_t channel);
 void _ipu_dc_init(int dc_chan, int di, bool interlaced);
 void _ipu_dc_uninit(int dc_chan);
 void _ipu_dp_dc_enable(ipu_channel_t channel);
-void _ipu_dp_dc_disable(ipu_channel_t channel);
+void _ipu_dp_dc_disable(ipu_channel_t channel, bool swap);
 void _ipu_dmfc_init(void);
 void _ipu_dmfc_set_wait4eot(int dma_chan, int width);
 int _ipu_chan_is_interlaced(ipu_channel_t channel);
diff --git a/drivers/mxc/ipu3/ipu_regs.h b/drivers/mxc/ipu3/ipu_regs.h
index 4723c22..542664e 100644
--- a/drivers/mxc/ipu3/ipu_regs.h
+++ b/drivers/mxc/ipu3/ipu_regs.h
@@ -216,6 +216,7 @@ extern u32 *ipu_disp_base[];
 #define DMFC_GENERAL1		(ipu_dmfc_reg + 0x0014/4)
 #define DMFC_GENERAL2		(ipu_dmfc_reg + 0x0018/4)
 #define DMFC_IC_CTRL		(ipu_dmfc_reg + 0x001C/4)
+#define DMFC_STAT		(ipu_dmfc_reg + 0x0020/4)
 
 #define DC_MAP_CONF_PTR(n)	(ipu_dc_reg + 0x0108/4 + n/2)
 #define DC_MAP_CONF_VAL(n)	(ipu_dc_reg + 0x0144/4 + n/2)
diff --git a/drivers/video/mxc/mxc_ipuv3_fb.c b/drivers/video/mxc/mxc_ipuv3_fb.c
index 05f5217..556e32e 100644
--- a/drivers/video/mxc/mxc_ipuv3_fb.c
+++ b/drivers/video/mxc/mxc_ipuv3_fb.c
@@ -77,10 +77,18 @@ struct mxcfb_alloc_list {
 	u32 size;
 };
 
+enum {
+	BOTH_ON,
+	SRC_ON,
+	TGT_ON,
+	BOTH_OFF
+};
+
 static char *fb_mode;
 static unsigned long default_bpp = 16;
 static bool g_dp_in_use;
 LIST_HEAD(fb_alloc_list);
+static struct fb_info *mxcfb_info[3];
 
 static uint32_t bpp_to_pixfmt(struct fb_info *fbi)
 {
@@ -129,6 +137,75 @@ static int mxcfb_set_fix(struct fb_info *info)
 	return 0;
 }
 
+static int _setup_disp_channel1(struct fb_info *fbi)
+{
+	ipu_channel_params_t params;
+	struct mxcfb_info *mxc_fbi = (struct mxcfb_info *)fbi->par;
+
+	memset(&params, 0, sizeof(params));
+	params.mem_dp_bg_sync.di = mxc_fbi->ipu_di;
+
+	/*
+	 * Assuming interlaced means yuv output, below setting also
+	 * valid for mem_dc_sync. FG should have the same vmode as BG.
+	 */
+	if (mxc_fbi->ipu_ch == MEM_FG_SYNC) {
+		struct mxcfb_info *mxc_fbi_tmp;
+		int i;
+
+		for (i = 0; i < num_registered_fb; i++) {
+			mxc_fbi_tmp = (struct mxcfb_info *)
+				(registered_fb[i]->par);
+			if (mxc_fbi_tmp->ipu_ch == MEM_BG_SYNC) {
+				fbi->var.vmode =
+				registered_fb[i]->var.vmode;
+				break;
+			}
+		}
+	}
+	if (fbi->var.vmode & FB_VMODE_INTERLACED) {
+		params.mem_dp_bg_sync.interlaced = true;
+		params.mem_dp_bg_sync.out_pixel_fmt =
+			IPU_PIX_FMT_YUV444;
+	} else {
+		if (mxc_fbi->ipu_di_pix_fmt)
+			params.mem_dp_bg_sync.out_pixel_fmt = mxc_fbi->ipu_di_pix_fmt;
+		else
+			params.mem_dp_bg_sync.out_pixel_fmt = IPU_PIX_FMT_RGB666;
+	}
+	params.mem_dp_bg_sync.in_pixel_fmt = bpp_to_pixfmt(fbi);
+
+	ipu_init_channel(mxc_fbi->ipu_ch, &params);
+
+	return 0;
+}
+
+static int _setup_disp_channel2(struct fb_info *fbi)
+{
+	int retval = 0;
+	struct mxcfb_info *mxc_fbi = (struct mxcfb_info *)fbi->par;
+
+	mxc_fbi->cur_ipu_buf = 1;
+	sema_init(&mxc_fbi->flip_sem, 1);
+	fbi->var.xoffset = fbi->var.yoffset = 0;
+
+	retval = ipu_init_channel_buffer(mxc_fbi->ipu_ch, IPU_INPUT_BUFFER,
+					 bpp_to_pixfmt(fbi),
+					 fbi->var.xres, fbi->var.yres,
+					 fbi->fix.line_length,
+					 IPU_ROTATE_NONE,
+					 fbi->fix.smem_start +
+					 (fbi->fix.line_length * fbi->var.yres),
+					 fbi->fix.smem_start,
+					 0, 0);
+	if (retval) {
+		dev_err(fbi->device,
+			"ipu_init_channel_buffer error %d\n", retval);
+	}
+
+	return retval;
+}
+
 /*
  * Set framebuffer parameters and change the operating mode.
  *
@@ -136,10 +213,9 @@ static int mxcfb_set_fix(struct fb_info *info)
  */
 static int mxcfb_set_par(struct fb_info *fbi)
 {
-	int retval;
+	int retval = 0;
 	u32 mem_len;
 	ipu_di_signal_cfg_t sig_cfg;
-	ipu_channel_params_t params;
 	struct mxcfb_info *mxc_fbi = (struct mxcfb_info *)fbi->par;
 
 	dev_dbg(fbi->device, "Reconfiguring framebuffer\n");
@@ -158,30 +234,25 @@ static int mxcfb_set_par(struct fb_info *fbi)
 		if (mxcfb_map_video_memory(fbi) < 0)
 			return -ENOMEM;
 	}
-#ifdef CONFIG_MXC_IPU_V1
-	ipu_init_channel(mxc_fbi->ipu_ch, NULL);
-#else
-	memset(&params, 0, sizeof(params));
-	params.mem_dp_bg_sync.di = mxc_fbi->ipu_di;
 
-	/* Assuming interlaced means YUV output */
-	if (fbi->var.vmode & FB_VMODE_INTERLACED) {
-		params.mem_dp_bg_sync.interlaced = true;
-		params.mem_dp_bg_sync.out_pixel_fmt = IPU_PIX_FMT_YUV444;
-	} else {
-		if (mxc_fbi->ipu_di_pix_fmt)
-			params.mem_dp_bg_sync.out_pixel_fmt = mxc_fbi->ipu_di_pix_fmt;
-		else
-			params.mem_dp_bg_sync.out_pixel_fmt = IPU_PIX_FMT_RGB666;
-	}
-	params.mem_dp_bg_sync.in_pixel_fmt = bpp_to_pixfmt(fbi);
-	ipu_init_channel(mxc_fbi->ipu_ch, &params);
-#endif
+	if (mxc_fbi->blank != FB_BLANK_UNBLANK)
+		return retval;
+
+	_setup_disp_channel1(fbi);
 
 	if (!mxc_fbi->overlay) {
+		uint32_t out_pixel_fmt;
+
 		memset(&sig_cfg, 0, sizeof(sig_cfg));
-		if (fbi->var.vmode & FB_VMODE_INTERLACED)
+		if (fbi->var.vmode & FB_VMODE_INTERLACED) {
 			sig_cfg.interlaced = true;
+			out_pixel_fmt = IPU_PIX_FMT_YUV444;
+		} else {
+			if (mxc_fbi->ipu_di_pix_fmt)
+				out_pixel_fmt = mxc_fbi->ipu_di_pix_fmt;
+			else
+				out_pixel_fmt = IPU_PIX_FMT_RGB666;
+		}
 		if (fbi->var.vmode & FB_VMODE_ODD_FLD_FIRST) /* PAL */
 			sig_cfg.odd_field_first = true;
 		if (fbi->var.sync & FB_SYNC_EXT)
@@ -202,23 +273,10 @@ static int mxcfb_set_par(struct fb_info *fbi)
 		dev_dbg(fbi->device, "pixclock = %ul Hz\n",
 			(u32) (PICOS2KHZ(fbi->var.pixclock) * 1000UL));
 
-#ifdef CONFIG_MXC_IPU_V1
-		if (ipu_sdc_init_panel(mode,
-				       (PICOS2KHZ(fbi->var.pixclock)) * 1000UL,
-				       fbi->var.xres, fbi->var.yres,
-				       (fbi->var.sync & FB_SYNC_SWAP_RGB) ?
-				       IPU_PIX_FMT_BGR666 : IPU_PIX_FMT_RGB666,
-				       fbi->var.left_margin,
-				       fbi->var.hsync_len,
-				       fbi->var.right_margin,
-				       fbi->var.upper_margin,
-				       fbi->var.vsync_len,
-				       fbi->var.lower_margin, sig_cfg) != 0) {
-#else
 		if (ipu_init_sync_panel(mxc_fbi->ipu_di,
 					(PICOS2KHZ(fbi->var.pixclock)) * 1000UL,
 					fbi->var.xres, fbi->var.yres,
-					params.mem_dp_bg_sync.out_pixel_fmt,
+					out_pixel_fmt,
 					fbi->var.left_margin,
 					fbi->var.hsync_len,
 					fbi->var.right_margin,
@@ -226,7 +284,6 @@ static int mxcfb_set_par(struct fb_info *fbi)
 					fbi->var.vsync_len,
 					fbi->var.lower_margin,
 					480, sig_cfg) != 0) {
-#endif
 			dev_err(fbi->device,
 				"mxcfb: Error initializing panel.\n");
 			return -EINVAL;
@@ -238,29 +295,134 @@ static int mxcfb_set_par(struct fb_info *fbi)
 		ipu_disp_set_window_pos(mxc_fbi->ipu_ch, 0, 0);
 	}
 
-	mxc_fbi->cur_ipu_buf = 1;
-	sema_init(&mxc_fbi->flip_sem, 1);
-	fbi->var.xoffset = fbi->var.yoffset = 0;
-
-	retval = ipu_init_channel_buffer(mxc_fbi->ipu_ch, IPU_INPUT_BUFFER,
-					 bpp_to_pixfmt(fbi),
-					 fbi->var.xres, fbi->var.yres,
-					 fbi->fix.line_length,
-					 IPU_ROTATE_NONE,
-					 fbi->fix.smem_start +
-					 (fbi->fix.line_length * fbi->var.yres),
-					 fbi->fix.smem_start,
-					 0, 0);
-	if (retval) {
-		dev_err(fbi->device,
-			"ipu_init_channel_buffer error %d\n", retval);
+	retval = _setup_disp_channel2(fbi);
+	if (retval)
 		return retval;
-	}
 
 	if (mxc_fbi->blank == FB_BLANK_UNBLANK) {
 		ipu_enable_channel(mxc_fbi->ipu_ch);
 	}
 
+	return retval;
+}
+
+static int _swap_channels(struct fb_info *fbi,
+			  struct fb_info *fbi_to, bool both_on)
+{
+	int retval, tmp;
+	ipu_channel_t old_ch;
+	struct mxcfb_info *mxc_fbi_from = (struct mxcfb_info *)fbi->par;
+	struct mxcfb_info *mxc_fbi_to = (struct mxcfb_info *)fbi_to->par;
+
+	if (both_on) {
+		ipu_disable_channel(mxc_fbi_to->ipu_ch, true);
+		ipu_uninit_channel(mxc_fbi_to->ipu_ch);
+	}
+
+	/* switch the mxc fbi parameters */
+	old_ch = mxc_fbi_from->ipu_ch;
+	mxc_fbi_from->ipu_ch = mxc_fbi_to->ipu_ch;
+	mxc_fbi_to->ipu_ch = old_ch;
+	tmp = mxc_fbi_from->ipu_ch_irq;
+	mxc_fbi_from->ipu_ch_irq = mxc_fbi_to->ipu_ch_irq;
+	mxc_fbi_to->ipu_ch_irq = tmp;
+
+	_setup_disp_channel1(fbi);
+	retval = _setup_disp_channel2(fbi);
+	if (retval)
+		return retval;
+
+	/* switch between dp and dc, disable old idmac, enable new idmac */
+	retval = ipu_swap_channel(old_ch, mxc_fbi_from->ipu_ch);
+	ipu_uninit_channel(old_ch);
+
+	if (both_on) {
+		_setup_disp_channel1(fbi_to);
+		retval = _setup_disp_channel2(fbi_to);
+		if (retval)
+			return retval;
+		ipu_enable_channel(mxc_fbi_to->ipu_ch);
+	}
+
+	return retval;
+}
+
+static int swap_channels(struct fb_info *fbi)
+{
+	int i;
+	int swap_mode;
+	ipu_channel_t ch_to;
+	struct mxcfb_info *mxc_fbi_from = (struct mxcfb_info *)fbi->par;
+	struct fb_info *fbi_to = NULL;
+	struct mxcfb_info *mxc_fbi_to;
+
+	/* what's the target channel? */
+	if (mxc_fbi_from->ipu_ch == MEM_BG_SYNC)
+		ch_to = MEM_DC_SYNC;
+	else
+		ch_to = MEM_BG_SYNC;
+
+	for (i = 0; i < num_registered_fb; i++) {
+		mxc_fbi_to =
+			(struct mxcfb_info *)mxcfb_info[i]->par;
+		if (mxc_fbi_to->ipu_ch == ch_to) {
+			fbi_to = mxcfb_info[i];
+			break;
+		}
+	}
+	if (fbi_to == NULL)
+		return -1;
+
+	if (mxc_fbi_from->blank == FB_BLANK_UNBLANK) {
+		if (mxc_fbi_to->blank == FB_BLANK_UNBLANK)
+			swap_mode = BOTH_ON;
+		else
+			swap_mode = SRC_ON;
+	} else {
+		if (mxc_fbi_to->blank == FB_BLANK_UNBLANK)
+			swap_mode = TGT_ON;
+		else
+			swap_mode = BOTH_OFF;
+	}
+
+	/* tvout di-1: for DC use UYVY, for DP use RGB */
+	if (mxc_fbi_from->ipu_di == 1 && ch_to == MEM_DC_SYNC) {
+		fbi->var.bits_per_pixel = 16;
+		fbi->var.nonstd = IPU_PIX_FMT_UYVY;
+	} else if (mxc_fbi_from->ipu_di == 1 && ch_to == MEM_BG_SYNC) {
+		fbi->var.nonstd = 0;
+	} else if (mxc_fbi_from->ipu_di == 0 && ch_to == MEM_DC_SYNC) {
+		fbi_to->var.nonstd = 0;
+	} else if (mxc_fbi_from->ipu_di == 0 && ch_to == MEM_BG_SYNC) {
+		fbi->var.bits_per_pixel = 16;
+		fbi->var.nonstd = IPU_PIX_FMT_UYVY;
+	}
+
+	switch (swap_mode) {
+	case BOTH_ON:
+		/* disable target->switch src->enable target */
+		_swap_channels(fbi, fbi_to, true);
+		break;
+	case SRC_ON:
+		/* just switch src */
+		_swap_channels(fbi, fbi_to, false);
+		break;
+	case TGT_ON:
+		/* just switch target */
+		_swap_channels(fbi_to, fbi, false);
+		break;
+	case BOTH_OFF:
+		/* switch directly, no more need to do */
+		mxc_fbi_to->ipu_ch = mxc_fbi_from->ipu_ch;
+		mxc_fbi_from->ipu_ch = ch_to;
+		i = mxc_fbi_from->ipu_ch_irq;
+		mxc_fbi_from->ipu_ch_irq = mxc_fbi_to->ipu_ch_irq;
+		mxc_fbi_to->ipu_ch_irq = i;
+		break;
+	default:
+		break;
+	}
+
 	return 0;
 }
 
@@ -275,7 +437,6 @@ static int mxcfb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
 {
 	u32 vtotal;
 	u32 htotal;
-	struct mxcfb_info *mxc_fbi = (struct mxcfb_info *)info->par;
 
 	if (var->xres_virtual < var->xres)
 		var->xres_virtual = var->xres;
@@ -542,6 +703,16 @@ static int mxcfb_ioctl(struct fb_info *fbi, unsigned int cmd, unsigned long arg)
 							 pos.x, pos.y);
 			break;
 		}
+	case MXCFB_GET_FB_IPU_CHAN:
+		{
+			struct mxcfb_info *mxc_fbi =
+				(struct mxcfb_info *)fbi->par;
+
+			if (put_user(mxc_fbi->ipu_ch, argp))
+				return -EFAULT;
+
+			break;
+		}
 	default:
 		retval = -EINVAL;
 	}
@@ -861,6 +1032,60 @@ static struct fb_info *mxcfb_init_fbinfo(struct device *dev, struct fb_ops *ops)
 	return fbi;
 }
 
+static ssize_t show_disp_chan(struct device *dev,
+			      struct device_attribute *attr, char *buf)
+{
+	struct fb_info *info = dev_get_drvdata(dev);
+	struct mxcfb_info *mxcfbi = (struct mxcfb_info *)info->par;
+
+	if (mxcfbi->ipu_ch == MEM_BG_SYNC)
+		return sprintf(buf, "2-layer-fb-bg\n");
+	else if (mxcfbi->ipu_ch == MEM_FG_SYNC)
+		return sprintf(buf, "2-layer-fb-fg\n");
+	else if (mxcfbi->ipu_ch == MEM_DC_SYNC)
+		return sprintf(buf, "1-layer-fb\n");
+	else
+		return sprintf(buf, "err: no display chan\n");
+}
+
+static ssize_t swap_disp_chan(struct device *dev,
+			      struct device_attribute *attr,
+			      const char *buf, size_t count)
+{
+	struct fb_info *info = dev_get_drvdata(dev);
+	struct mxcfb_info *mxcfbi = (struct mxcfb_info *)info->par;
+	struct mxcfb_info *fg_mxcfbi = NULL;
+
+	/* swap only happen between DP-BG and DC, while DP-FG disable */
+	if (((mxcfbi->ipu_ch == MEM_BG_SYNC) &&
+	     (strstr(buf, "1-layer-fb") != NULL)) ||
+	    ((mxcfbi->ipu_ch == MEM_DC_SYNC) &&
+	     (strstr(buf, "2-layer-fb-bg") != NULL))) {
+		int i;
+
+		for (i = 0; i < num_registered_fb; i++) {
+			fg_mxcfbi =
+				(struct mxcfb_info *)mxcfb_info[i]->par;
+			if (fg_mxcfbi->ipu_ch == MEM_FG_SYNC)
+				break;
+			else
+				fg_mxcfbi = NULL;
+		}
+		if (!fg_mxcfbi ||
+			fg_mxcfbi->blank == FB_BLANK_UNBLANK) {
+			dev_err(dev,
+				"Can not switch while fb2(fb-fg) is on.\n");
+			return count;
+		}
+
+		if (swap_channels(info) < 0)
+			dev_err(dev, "Swap display channel failed.\n");
+	}
+
+	return count;
+}
+DEVICE_ATTR(fsl_disp_property, 644, show_disp_chan, swap_disp_chan);
+
 /*!
  * Probe routine for the framebuffer driver. It is called during the
  * driver binding process.      The following functions are performed in
@@ -920,6 +1145,8 @@ static int mxcfb_probe(struct platform_device *pdev)
 		strcpy(fbi->fix.id, "DISP3 FG");
 	}
 
+	mxcfb_info[pdev->id] = fbi;
+
 	if (ipu_request_irq(mxcfbi->ipu_ch_irq, mxcfb_irq_handler, 0,
 			    MXCFB_NAME, fbi) != 0) {
 		dev_err(&pdev->dev, "Error registering BG irq handler.\n");
@@ -957,6 +1184,8 @@ static int mxcfb_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, fbi);
 
+	device_create_file(fbi->dev, &dev_attr_fsl_disp_property);
+
 	dev_err(&pdev->dev, "fb registered, using mode %s\n", fb_mode);
 	return 0;
 
diff --git a/include/linux/ipu.h b/include/linux/ipu.h
index 0857e18..c993ff8 100644
--- a/include/linux/ipu.h
+++ b/include/linux/ipu.h
@@ -696,7 +696,8 @@ enum {
 typedef enum {
 	RGB,
 	YCbCr,
-	YUV
+	YUV,
+	NONE
 } ipu_color_space_t;
 
 /*!
@@ -861,6 +862,7 @@ int32_t ipu_unlink_channels(ipu_channel_t src_ch, ipu_channel_t dest_ch);
 int32_t ipu_is_channel_busy(ipu_channel_t channel);
 int32_t ipu_enable_channel(ipu_channel_t channel);
 int32_t ipu_disable_channel(ipu_channel_t channel, bool wait_for_stop);
+int32_t ipu_swap_channel(ipu_channel_t from_ch, ipu_channel_t to_ch);
 
 int ipu_lowpwr_display_enable(void);
 int ipu_lowpwr_display_disable(void);
diff --git a/include/linux/mxcfb.h b/include/linux/mxcfb.h
index c7bc6bc..a6ed32c 100644
--- a/include/linux/mxcfb.h
+++ b/include/linux/mxcfb.h
@@ -49,6 +49,7 @@ struct mxcfb_pos {
 #define MXCFB_SET_GBL_ALPHA     _IOW('F', 0x21, struct mxcfb_gbl_alpha)
 #define MXCFB_SET_CLR_KEY       _IOW('F', 0x22, struct mxcfb_color_key)
 #define MXCFB_SET_OVERLAY_POS   _IOW('F', 0x24, struct mxcfb_pos)
+#define MXCFB_GET_FB_IPU_CHAN 	_IOR('F', 0x25, u_int32_t)
 
 #ifdef __KERNEL__
 
-- 
1.5.4.4

