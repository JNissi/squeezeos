From 711fd66cbeaf3d5f27fba22f6d7fa0b02857f020 Mon Sep 17 00:00:00 2001
From: Ranjani Vaidyanathan-RA5478 <Ranjani.Vaidyanathan@freescale.com>
Date: Wed, 28 Jan 2009 14:30:38 -0600
Subject: [PATCH] ENGR00105878-2: MX51: Added code to drop LP & GP voltages in standby

Set LP and GP voltages to a lower value when the system is in standby. Also
added support for both standby (suspend-to-ram) & mem (suspend-to-disk) low
power modes.

Signed-off-by: Ranjani Vaidyanathan-RA5478 <Ranjani.Vaidyanathan@freescale.com>
---
 arch/arm/mach-mx51/mx51_3stack.c |   25 +++++++++++++++++++++++++
 arch/arm/mach-mx51/pm.c          |   35 ++++++++++++++++++++++++++---------
 arch/arm/mach-mx51/system.c      |    4 ++++
 3 files changed, 55 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-mx51/mx51_3stack.c b/arch/arm/mach-mx51/mx51_3stack.c
index e486ab8..dd6a7b4 100644
--- a/arch/arm/mach-mx51/mx51_3stack.c
+++ b/arch/arm/mach-mx51/mx51_3stack.c
@@ -97,6 +97,8 @@ static void mc13892_reg_int(void)
 {
 	int i = 0;
 	struct regulator *regulator;
+	struct regulator *gp;
+	struct regulator *lp;
 	char *reg_name[] = {
 		"SW1",
 		"SW2",
@@ -146,6 +148,29 @@ static void mc13892_reg_int(void)
 			regulator_put(regulator, NULL);
 		}
 	}
+
+	gp = regulator_get(NULL, "SW1_STBY");
+	lp = regulator_get(NULL, "SW2_STBY");
+	regulator_enable(gp);
+	regulator_enable(lp);
+
+	if (regulator_set_voltage(gp, 700000))
+		printk(KERN_INFO "cannot set GP STBY voltage\n");
+
+	if ((mxc_cpu_is_rev(CHIP_REV_2_0)) < 0) {
+		if (regulator_set_voltage(lp, 1100000))
+			printk(KERN_INFO "cannot set LP STBY voltage\n");
+	} else {
+		/* Cannot drop voltage for TO2.0 */
+		if (regulator_set_voltage(lp, 1200000))
+			printk(KERN_INFO "cannot set LP STBY voltage\n");
+	}
+
+	regulator_disable(gp);
+	regulator_disable(lp);
+
+	regulator_put(gp, NULL);
+	regulator_put(lp, NULL);
 }
 
 late_initcall(mc13892_reg_int);
diff --git a/arch/arm/mach-mx51/pm.c b/arch/arm/mach-mx51/pm.c
index 8dceb11..dffdffd 100644
--- a/arch/arm/mach-mx51/pm.c
+++ b/arch/arm/mach-mx51/pm.c
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ *  Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -15,36 +15,53 @@
 #include <linux/kernel.h>
 #include <linux/clk.h>
 #include <linux/platform_device.h>
+#include <linux/regulator/regulator.h>
 #include <linux/suspend.h>
 #include "crm_regs.h"
 
 static struct device *pm_dev;
 struct clk *gpc_dvfs_clk;
 extern void cpu_do_suspend_workaround(void);
+extern void cpu_cortexa8_do_idle(u32);
+
+extern int iram_ready;
 
 static int mx51_suspend_enter(suspend_state_t state)
 {
 	if (tzic_enable_wake(0) != 0)
 		return -EAGAIN;
+
+	if (gpc_dvfs_clk == NULL)
+		gpc_dvfs_clk = clk_get(NULL, "gpc_dvfs_clk");
+	/* gpc clock is needed for SRPG */
+	clk_enable(gpc_dvfs_clk);
 	switch (state) {
-	case PM_SUSPEND_STANDBY:
-		if (gpc_dvfs_clk == NULL)
-			gpc_dvfs_clk = clk_get(NULL, "gpc_dvfs_clk");
-		/* gpc clock is needed for SRPG */
-		clk_enable(gpc_dvfs_clk);
+	case PM_SUSPEND_MEM:
 		mxc_cpu_lp_set(STOP_POWER_OFF);
 		break;
+	case PM_SUSPEND_STANDBY:
+		mxc_cpu_lp_set(WAIT_UNCLOCKED_POWER_OFF);
+		break;
 	default:
 		return -EINVAL;
 	}
-	if ((mxc_cpu_is_rev(CHIP_REV_2_0)) < 0) {
+	if (state == PM_SUSPEND_MEM) {
 		cpu_do_suspend_workaround();
 		/*clear the EMPGC0/1 bits */
 		__raw_writel(0, MXC_SRPG_EMPGC0_SRPGCR);
 		__raw_writel(0, MXC_SRPG_EMPGC1_SRPGCR);
-
 	} else {
-		cpu_do_idle();
+		if ((mxc_cpu_is_rev(CHIP_REV_2_0)) < 0) {
+			/* do cpu_idle_workaround */
+			u32 l2_iram_addr = IRAM_AVAILABLE_ADDR;
+			if (!iram_ready)
+				return;
+			if ((l2_iram_addr + 0x1000) <
+					(IRAM_BASE_ADDR + IRAM_SIZE))
+				cpu_cortexa8_do_idle(IO_ADDRESS(l2_iram_addr));
+		} else {
+			cpu_do_idle();
+		}
 	}
 	clk_disable(gpc_dvfs_clk);
 
diff --git a/arch/arm/mach-mx51/system.c b/arch/arm/mach-mx51/system.c
index bb330e8..9b9a241 100644
--- a/arch/arm/mach-mx51/system.c
+++ b/arch/arm/mach-mx51/system.c
@@ -67,9 +67,13 @@ void mxc_cpu_lp_set(enum mxc_cpu_pwr_mode mode)
 			    | MXC_CORTEXA8_PLAT_LPC_DBG_DSM;
 		if (mode == WAIT_UNCLOCKED_POWER_OFF) {
 			ccm_clpcr |= (0x1 << MXC_CCM_CLPCR_LPM_OFFSET);
+			ccm_clpcr &= ~MXC_CCM_CLPCR_VSTBY;
 			stop_mode = 0;
 		} else {
 			ccm_clpcr |= (0x2 << MXC_CCM_CLPCR_LPM_OFFSET);
+			ccm_clpcr |= (0x3 << MXC_CCM_CLPCR_STBY_COUNT_OFFSET);
+			ccm_clpcr |= MXC_CCM_CLPCR_VSTBY;
+			ccm_clpcr |= MXC_CCM_CLPCR_SBYOS;
 			stop_mode = 1;
 		}
 
-- 
1.5.4.4

