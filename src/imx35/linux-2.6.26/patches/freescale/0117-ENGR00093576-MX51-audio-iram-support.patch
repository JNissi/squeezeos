From 0d687fd7d934eac391d73685e138edf7a7955545 Mon Sep 17 00:00:00 2001
From: Alan Tull <r80115@freescale.com>
Date: Wed, 1 Oct 2008 11:46:04 -0500
Subject: [PATCH] ENGR00093576 MX51: audio iram support

Support audio buffers in iram.

Signed-off-by: Alan Tull <r80115@freescale.com>
---
 arch/arm/configs/imx51_3stack_defconfig |    5 +-
 arch/arm/mach-mx51/devices.c            |   98 +++++++++++++++++++++++++++++++
 arch/arm/mach-mx51/mm.c                 |    5 ++
 drivers/mxc/security/Kconfig            |    2 +-
 include/asm-arm/arch-mxc/mx51.h         |   50 +++++++++++-----
 5 files changed, 143 insertions(+), 17 deletions(-)

diff --git a/arch/arm/configs/imx51_3stack_defconfig b/arch/arm/configs/imx51_3stack_defconfig
index 8b4f3ed..c29219d 100644
--- a/arch/arm/configs/imx51_3stack_defconfig
+++ b/arch/arm/configs/imx51_3stack_defconfig
@@ -177,7 +177,8 @@ CONFIG_ARCH_MX51=y
 # CONFIG_I2C_MXC_SELECT1 is not set
 CONFIG_I2C_MXC_SELECT2=y
 CONFIG_MXC_SDMA_API=y
-# CONFIG_SDMA_IRAM is not set
+CONFIG_SDMA_IRAM=y
+CONFIG_SDMA_IRAM_SIZE=0x1000
 # CONFIG_I2C_MXC_SELECT3 is not set
 CONFIG_ARCH_MXC_HAS_NFC_V3=y
 
@@ -1059,7 +1060,7 @@ CONFIG_SND_MXC_SPDIF=m
 CONFIG_SND_SOC=y
 CONFIG_SND_MXC_SOC=y
 CONFIG_SND_MXC_SOC_SSI=y
-# CONFIG_SND_MXC_SOC_IRAM is not set
+CONFIG_SND_MXC_SOC_IRAM=y
 # CONFIG_SND_SOC_IMX_3STACK_WM8350 is not set
 # CONFIG_SND_SOC_IMX_3STACK_AK4647 is not set
 # CONFIG_SND_SOC_IMX_3STACK_WM8580 is not set
diff --git a/arch/arm/mach-mx51/devices.c b/arch/arm/mach-mx51/devices.c
index 4c78166..22ae8ae 100644
--- a/arch/arm/mach-mx51/devices.c
+++ b/arch/arm/mach-mx51/devices.c
@@ -17,6 +17,7 @@
 #include <linux/init.h>
 #include <linux/platform_device.h>
 #include <linux/clk.h>
+#include <linux/delay.h>
 
 #include <linux/spi/spi.h>
 
@@ -26,6 +27,7 @@
 #include "iomux.h"
 #include <asm/arch/sdma.h>
 #include "sdma_script_code.h"
+#include <asm/arch/mxc_scc2_driver.h>
 
 extern void gpio_spdif_active(void);
 
@@ -270,6 +272,101 @@ static inline void mxc_init_vpu(void)
 }
 #endif
 
+/*!
+ * This is platform device structure for adding SCC
+ */
+#if defined(CONFIG_MXC_SECURITY_SCC) || defined(CONFIG_MXC_SECURITY_SCC_MODULE)
+static struct platform_device mxc_scc_device = {
+	.name = "mxc_scc",
+	.id = 0,
+};
+
+static void mxc_init_scc(void)
+{
+	platform_device_register(&mxc_scc_device);
+}
+#else
+static inline void mxc_init_scc(void)
+{
+	uint32_t reg_value;
+	uint32_t reg_mask = 0;
+	uint8_t *UMID_base;
+	uint32_t *MAP_base;
+	uint8_t i;
+	uint32_t partition_no;
+	uint32_t scc_partno;
+	void *scm_ram_base;
+	void *scc_base;
+
+	scc_base = ioremap((uint32_t) SCC_BASE_ADDR, 0x140);
+	if (scc_base == NULL) {
+		printk(KERN_ERR "FAILED TO MAP IRAM REGS\n");
+		return;
+	}
+	scm_ram_base = ioremap((uint32_t) IRAM_BASE_ADDR, IRAM_SIZE);
+	if (scm_ram_base == NULL) {
+		printk(KERN_ERR "FAILED TO MAP IRAM\n");
+		return;
+	}
+
+	for (partition_no = 0; partition_no < IRAM_PARTITIONS; partition_no++) {
+		reg_value = ((partition_no << SCM_ZCMD_PART_SHIFT) &
+			     SCM_ZCMD_PART_MASK) | ((0x03 <<
+						     SCM_ZCMD_CCMD_SHIFT)
+						    & SCM_ZCMD_CCMD_MASK);
+		__raw_writel(reg_value, scc_base + SCM_ZCMD_REG);
+
+		while ((__raw_readl(scc_base + SCM_STATUS_REG) &
+			SCM_STATUS_SRS_READY) != SCM_STATUS_SRS_READY) ;
+
+		__raw_writel(0, scc_base + (SCM_SMID0_REG + 8 * partition_no));
+
+		reg_mask |= (3 << (2 * (partition_no)));
+	}
+
+	msleep(1);
+	reg_value = __raw_readl(scc_base + SCM_PART_OWNERS_REG);
+
+	if ((reg_value & reg_mask) != reg_mask) {
+		printk(KERN_ERR "FAILED TO ACQUIRE IRAM PARTITION\n");
+		iounmap(scm_ram_base);
+		iounmap(scc_base);
+		return;
+	}
+
+	for (partition_no = 0; partition_no < IRAM_PARTITIONS; partition_no++) {
+		MAP_base = scm_ram_base + (partition_no * 0x2000);
+		UMID_base = (uint8_t *) MAP_base + 0x10;
+
+		for (i = 0; i < 16; i++)
+			UMID_base[i] = 0;
+
+		MAP_base[0] = SCM_PERM_NO_ZEROIZE | SCM_PERM_HD_SUP_DISABLE |
+		    SCM_PERM_HD_READ | SCM_PERM_HD_WRITE |
+		    SCM_PERM_TH_READ | SCM_PERM_TH_WRITE;
+
+	}
+
+	/* Freeing 2 partitions for SCC2 */
+	scc_partno = IRAM_PARTITIONS - (SCC_IRAM_SIZE / SZ_8K);
+	for (partition_no = scc_partno; partition_no < IRAM_PARTITIONS;
+	     partition_no++) {
+		reg_value = ((partition_no << SCM_ZCMD_PART_SHIFT) &
+			     SCM_ZCMD_PART_MASK) | ((0x03 <<
+						     SCM_ZCMD_CCMD_SHIFT)
+						    & SCM_ZCMD_CCMD_MASK);
+		__raw_writel(reg_value, scc_base + SCM_ZCMD_REG);
+
+		while ((__raw_readl(scc_base + SCM_STATUS_REG) &
+			SCM_STATUS_SRS_READY) != SCM_STATUS_SRS_READY) ;
+	}
+	iounmap(scm_ram_base);
+	iounmap(scc_base);
+	printk(KERN_INFO "IRAM READY\n");
+
+}
+#endif
+
 /* SPI controller and device data */
 #if defined(CONFIG_SPI_MXC) || defined(CONFIG_SPI_MXC_MODULE)
 
@@ -686,6 +783,7 @@ static int __init mxc_init_devices(void)
 	mxc_init_i2c();
 	mxc_init_i2c_hs();
 	mxc_init_rtc();
+	mxc_init_scc();
 	mxc_init_dma();
 	mxc_init_owire();
 	mxc_init_ipu();
diff --git a/arch/arm/mach-mx51/mm.c b/arch/arm/mach-mx51/mm.c
index c9e122e..dc0205a 100644
--- a/arch/arm/mach-mx51/mm.c
+++ b/arch/arm/mach-mx51/mm.c
@@ -30,6 +30,11 @@
  */
 static struct map_desc mxc_io_desc[] __initdata = {
 	{
+	 .virtual = IRAM_BASE_ADDR_VIRT,
+	 .pfn = __phys_to_pfn(IRAM_BASE_ADDR),
+	 .length = IRAM_SIZE,
+	 .type = MT_DEVICE},
+	{
 	 .virtual = DEBUG_BASE_ADDR_VIRT,
 	 .pfn = __phys_to_pfn(DEBUG_BASE_ADDR),
 	 .length = DEBUG_SIZE,
diff --git a/drivers/mxc/security/Kconfig b/drivers/mxc/security/Kconfig
index ca31171..2d566f3 100644
--- a/drivers/mxc/security/Kconfig
+++ b/drivers/mxc/security/Kconfig
@@ -9,7 +9,7 @@ config MXC_SECURITY_SCC
 
 config MXC_SECURITY_SCC2
         tristate "MXC SCC2 Driver"
-        depends on ARCH_MX37
+        depends on ARCH_MX37 || ARCH_MX51
         default n
         ---help---
           This module contains the core API's for accessing the SCC2 module.
diff --git a/include/asm-arm/arch-mxc/mx51.h b/include/asm-arm/arch-mxc/mx51.h
index b2f55ae..5c2237b 100644
--- a/include/asm-arm/arch-mxc/mx51.h
+++ b/include/asm-arm/arch-mxc/mx51.h
@@ -68,7 +68,16 @@
  * IRAM
  */
 #define IRAM_BASE_ADDR		0x1FFE8000	/* internal ram */
-#define IRAM_SIZE 		(12 * SZ_8K)	/* 96K */
+#define IRAM_BASE_ADDR_VIRT	0xFA3E8000
+#define IRAM_PARTITIONS		12
+#define IRAM_SIZE		(IRAM_PARTITIONS*SZ_8K)	/* 96KB */
+
+#if defined(CONFIG_MXC_SECURITY_SCC2) \
+    || defined(CONFIG_MXC_SECURITY_SCC2_MODULE)
+#define SCC_IRAM_SIZE  SZ_16K
+#else
+#define SCC_IRAM_SIZE  0
+#endif
 
 #ifdef CONFIG_SDMA_IRAM
 #define SDMA_IRAM_SIZE  CONFIG_SDMA_IRAM_SIZE
@@ -88,10 +97,12 @@
 #define VPU_IRAM_SIZE 0
 #endif
 
-#if (IRAM_SIZE < (SDMA_IRAM_SIZE + SND_RAM_SIZE + VPU_IRAM_SIZE))
+#if (IRAM_SIZE < (SDMA_IRAM_SIZE + SND_RAM_SIZE + VPU_IRAM_SIZE + \
+	SCC_IRAM_SIZE))
 #error "IRAM size exceeded"
 #endif
 
+#define SCC_IRAM_BASE_ADDR	(IRAM_BASE_ADDR + IRAM_SIZE - SCC_IRAM_SIZE)
 #define SDMA_RAM_BASE_ADDR	(IRAM_BASE_ADDR)
 #define SND_RAM_BASE_ADDR	(IRAM_BASE_ADDR + SDMA_IRAM_SIZE)
 #define VPU_IRAM_BASE_ADDR	(SND_RAM_BASE_ADDR + SND_RAM_SIZE)
@@ -191,6 +202,7 @@
 /*!
  * Defines for modules using static and dynamic DMA channels
  */
+#define MXC_DMA_CHANNEL_IRAM         30
 #define MXC_DMA_CHANNEL_SPDIF_TX        MXC_DMA_DYNAMIC_CHANNEL
 #define MXC_DMA_CHANNEL_UART1_RX	MXC_DMA_DYNAMIC_CHANNEL
 #define MXC_DMA_CHANNEL_UART1_TX	MXC_DMA_DYNAMIC_CHANNEL
@@ -203,7 +215,11 @@
 #define MXC_DMA_CHANNEL_SSI1_RX		MXC_DMA_DYNAMIC_CHANNEL
 #define MXC_DMA_CHANNEL_SSI1_TX		MXC_DMA_DYNAMIC_CHANNEL
 #define MXC_DMA_CHANNEL_SSI2_RX		MXC_DMA_DYNAMIC_CHANNEL
+#ifdef CONFIG_SDMA_IRAM
+#define MXC_DMA_CHANNEL_SSI2_TX  (MXC_DMA_CHANNEL_IRAM + 1)
+#else				/*CONFIG_SDMA_IRAM */
 #define MXC_DMA_CHANNEL_SSI2_TX		MXC_DMA_DYNAMIC_CHANNEL
+#endif				/*CONFIG_SDMA_IRAM */
 #define MXC_DMA_CHANNEL_CSPI1_RX	MXC_DMA_DYNAMIC_CHANNEL
 #define MXC_DMA_CHANNEL_CSPI1_TX	MXC_DMA_DYNAMIC_CHANNEL
 #define MXC_DMA_CHANNEL_CSPI2_RX	MXC_DMA_DYNAMIC_CHANNEL
@@ -275,23 +291,26 @@
  * it returns 0xDEADBEEF
  */
 #define IO_ADDRESS(x)   \
-	(((x >= (unsigned long)TZIC_BASE_ADDR) && \
-	    (x < (unsigned long)TZIC_BASE_ADDR + TZIC_SIZE)) ? \
+	((((x) >= (unsigned long)IRAM_BASE_ADDR) && \
+	    ((x) < (unsigned long)IRAM_BASE_ADDR + IRAM_SIZE)) ? \
+	     IRAM_IO_ADDRESS(x):\
+	(((x) >= (unsigned long)TZIC_BASE_ADDR) && \
+	    ((x) < (unsigned long)TZIC_BASE_ADDR + TZIC_SIZE)) ? \
 	     TZIC_IO_ADDRESS(x):\
-	((x >= (unsigned long)DEBUG_BASE_ADDR) && \
-	  (x < (unsigned long)DEBUG_BASE_ADDR + DEBUG_SIZE)) ? \
+	(((x) >= (unsigned long)DEBUG_BASE_ADDR) && \
+	  ((x) < (unsigned long)DEBUG_BASE_ADDR + DEBUG_SIZE)) ? \
 	   DEBUG_IO_ADDRESS(x):\
-	((x >= (unsigned long)SPBA0_BASE_ADDR) && \
-	  (x < (unsigned long)SPBA0_BASE_ADDR + SPBA0_SIZE)) ? \
+	(((x) >= (unsigned long)SPBA0_BASE_ADDR) && \
+	  ((x) < (unsigned long)SPBA0_BASE_ADDR + SPBA0_SIZE)) ? \
 	   SPBA0_IO_ADDRESS(x):\
-	((x >= (unsigned long)AIPS1_BASE_ADDR) && \
-	  (x < (unsigned long)AIPS1_BASE_ADDR + AIPS1_SIZE)) ? \
+	(((x) >= (unsigned long)AIPS1_BASE_ADDR) && \
+	  ((x) < (unsigned long)AIPS1_BASE_ADDR + AIPS1_SIZE)) ? \
 	   AIPS1_IO_ADDRESS(x):\
-	((x >= (unsigned long)AIPS2_BASE_ADDR) && \
-	  (x < (unsigned long)AIPS2_BASE_ADDR + AIPS2_SIZE)) ? \
+	(((x) >= (unsigned long)AIPS2_BASE_ADDR) && \
+	  ((x) < (unsigned long)AIPS2_BASE_ADDR + AIPS2_SIZE)) ? \
 	   AIPS2_IO_ADDRESS(x):\
-	((x >= (unsigned long)NFC_BASE_ADDR_AXI) && \
-	  (x < (unsigned long)NFC_BASE_ADDR_AXI + NFC_AXI_SIZE)) ? \
+	(((x) >= (unsigned long)NFC_BASE_ADDR_AXI) && \
+	  ((x) < (unsigned long)NFC_BASE_ADDR_AXI + NFC_AXI_SIZE)) ? \
 	   NFC_BASE_ADDR_AXI_IO_ADDRESS(x):\
 	0xDEADBEEF)
 
@@ -299,6 +318,9 @@
  * define the address mapping macros: in physical address order
  */
 
+#define IRAM_IO_ADDRESS(x)  \
+	(((x) - IRAM_BASE_ADDR) + IRAM_BASE_ADDR_VIRT)
+
 #define TZIC_IO_ADDRESS(x)  \
 	(((x) - TZIC_BASE_ADDR) + TZIC_BASE_ADDR_VIRT)
 
-- 
1.5.4.4

