From 8278c5a4fda8cdea248df26fb38dfb2ca8cce33d Mon Sep 17 00:00:00 2001
From: Jason <r64343@freescale.com>
Date: Thu, 9 Oct 2008 17:38:24 +0800
Subject: [PATCH] ENGR00094421-1 NAND:add interleave mode support

Support nand interleave mode.Interleave means we simulate one
virtual page size nand with several nand chips. Fox example,
there are 4 identical chips with 2K page size.
we treat them as one virtual nand chip with 2K*4=8K
page size nand. Thus, the data of 8K bytes will be distributed
into 0,1,2,3 chips with the same block and page offset,each
chip take 2K byte data

Signed-off-by:Jason Liu <r64343@freescale.com>
---
 drivers/mtd/nand/mxc_nd2.c |  863 ++++++++++++++++++++++++--------------------
 drivers/mtd/nand/mxc_nd2.h |   59 +++-
 include/linux/mtd/nand.h   |    4 +-
 3 files changed, 520 insertions(+), 406 deletions(-)

diff --git a/drivers/mtd/nand/mxc_nd2.c b/drivers/mtd/nand/mxc_nd2.c
index 4d351f9..82c0a1b 100644
--- a/drivers/mtd/nand/mxc_nd2.c
+++ b/drivers/mtd/nand/mxc_nd2.c
@@ -27,7 +27,7 @@
 #include <asm/io.h>
 #include "mxc_nd2.h"
 
-#define DVR_VER "2.4"
+#define DVR_VER "2.5"
 
 /* Global address Variables */
 static u32 nfc_axi_base, nfc_ip_base;
@@ -47,7 +47,6 @@ static struct mxc_mtd_s *mxc_nand_data;
 #define TROP_US_DELAY   2000
 
 struct nand_info {
-	bool bSpareOnly;
 	bool bStatusRequest;
 	u16 colAddr;
 };
@@ -60,6 +59,11 @@ static int hardware_ecc = 0;
 static int hardware_ecc = 1;
 #endif
 
+static u8 num_of_interleave = 1;
+
+static u8 *data_buf;
+static u8 *oob_buf;
+
 static int g_page_mask;
 
 static struct clk *nfc_clk;
@@ -116,63 +120,36 @@ static irqreturn_t mxc_nfc_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static u8 mxc_main_xfer_buf[4096] ____cacheline_aligned;
-
-/*
- * Functions to handle 32-bit aligned memcpy.
- */
-static void nfc_memcpy(void *dst, const void *src, int len)
-{
-	volatile u16 *d = (volatile u16 *)dst;
-	volatile u16 *s = (volatile u16 *)src;
-	int wc;
-
-	switch ((u32) dst & 3) {
-	case 2:
-		wc = len / 2;
-		/* adjust alignment */
-		*d = *s;
-		memcpy((void *)(d + 1), (const void *)(s + 1), len - 4);
-		*(d + wc - 1) = *(s + wc - 1);
-		break;
-
-	case 1:
-	case 3:
-		memcpy((void *)mxc_main_xfer_buf, (const void *)src,
-		       (len + 3) & (~3));
-		memcpy((void *)d, (const void *)mxc_main_xfer_buf, len);
-		break;
-	case 0:
-		memcpy((void *)d, (const void *)s, len);
-	}
-}
-
 /*
  * Functions to transfer data to/from spare erea.
  */
 static void
 copy_spare(struct mtd_info *mtd, void *pbuf, void *pspare, int len, bool bfrom)
 {
-	u16 ooblen = mtd->oobsize;
-	u8 i, count, size;
+	u16 i, j;
+	u16 m = mtd->oobsize;
+	u16 n = mtd->writesize >> 9;
+	u8 *d = (u8 *) pbuf;
+	u8 *s = (u8 *) pspare;
+	u16 t = SPARE_LEN;
+
+	m /= num_of_interleave;
+	n /= num_of_interleave;
 
-	count = mtd->writesize >> 9;
-	size = (ooblen / count >> 1) << 1;
+	j = (m / n >> 1) << 1;
 
 	if (bfrom) {
-		for (i = 0; i < count - 1; i++)
-			nfc_memcpy((pbuf + i * size), (pspare + i * SPARE_LEN),
-				   size);
+		for (i = 0; i < n - 1; i++)
+			memcpy(&d[i * j], &s[i * t], j);
 
-		nfc_memcpy((pbuf + i * size), (pspare + i * SPARE_LEN),
-			   len - i * size);
+		/* the last section */
+		memcpy(&d[i * j], &s[i * t], len - i * j);
 	} else {
-		for (i = 0; i < count - 1; i++)
-			nfc_memcpy((pspare + i * SPARE_LEN), (pbuf + i * size),
-				   size);
+		for (i = 0; i < n - 1; i++)
+			memcpy(&s[i * t], &d[i * j], j);
 
-		nfc_memcpy((pspare + i * SPARE_LEN), (pbuf + i * size),
-			   len - i * size);
+		/* the last section */
+		memcpy(&s[i * t], &d[i * j], len - i * j);
 	}
 }
 
@@ -214,7 +191,115 @@ static void wait_op_done(int maxRetries, bool useirq)
 	}
 }
 
+static inline void send_atomic_cmd(u16 cmd, bool useirq)
+{
+	/* fill command */
+	raw_write(cmd, REG_NFC_FLASH_CMD);
+
+	/* clear status */
+	ACK_OPS;
+
+	/* send out command */
+	raw_write(NFC_CMD, REG_NFC_OPS);
+
+	/* Wait for operation to complete */
+	wait_op_done(TROP_US_DELAY, useirq);
+}
+
+static void mxc_do_addr_cycle(struct mtd_info *mtd, int column, int page_addr);
+static int mxc_check_ecc_status(struct mtd_info *mtd);
+
+#ifdef NFC_AUTO_MODE_ENABLE
+/*!
+ * This function handle the interleave related work
+ * @param	mtd	mtd info
+ * @param	cmd	command
+ */
+static void auto_cmd_interleave(struct mtd_info *mtd, u16 cmd)
+{
+	u32 i;
+	u32 j = num_of_interleave;
+	struct nand_chip *this = mtd->priv;
+	u32 addr_low = raw_read(NFC_FLASH_ADDR0);
+	u32 addr_high = raw_read(NFC_FLASH_ADDR8);
+	u32 page_addr = addr_low >> 16 | addr_high << 16;
+	u8 *dbuf = data_buf;
+	u8 *obuf = oob_buf;
+	u32 dlen = mtd->writesize / j;
+	u32 olen = mtd->oobsize / j;
+
+	/* adjust the addr value
+	 * since ADD_OP mode is 01
+	 */
+	if (j > 1)
+		page_addr *= j;
+	else
+		page_addr *= this->numchips;
+
+	for (i = 0; i < j; i++) {
+		if (cmd == NAND_CMD_PAGEPROG) {
+
+			/* reset addr cycle */
+			if (j > 1)
+				mxc_do_addr_cycle(mtd, 0, page_addr++);
+
+			/* data transfer */
+			memcpy(MAIN_AREA0, dbuf, dlen);
+			copy_spare(mtd, obuf, SPARE_AREA0, olen, false);
+
+			/* update the value */
+			dbuf += dlen;
+			obuf += olen;
+
+			NFC_SET_RBA(0);
+			raw_write(0, REG_NFC_OPS_STAT);
+			raw_write(NFC_AUTO_PROG, REG_NFC_OPS);
+
+			/* wait auto_prog_done bit set */
+			if (i < j - 1) {
+				while (!
+				       (raw_read(REG_NFC_OPS_STAT) & 1 << 30)) ;
+			} else {
+				wait_op_done(TROP_US_DELAY, true);
+			}
+		} else if (cmd == NAND_CMD_READSTART) {
+			/* reset addr cycle */
+			if (j > 1)
+				mxc_do_addr_cycle(mtd, 0, page_addr++);
+
+			NFC_SET_RBA(0);
+			raw_write(0, REG_NFC_OPS_STAT);
+			raw_write(NFC_AUTO_READ, REG_NFC_OPS);
+			wait_op_done(TROP_US_DELAY, true);
+
+			/* check ecc error */
+			mxc_check_ecc_status(mtd);
+
+			/* data transfer */
+			memcpy(dbuf, MAIN_AREA0, dlen);
+			copy_spare(mtd, obuf, SPARE_AREA0, olen, true);
+
+			/* update the value */
+			dbuf += dlen;
+			obuf += olen;
+		} else if (cmd == NAND_CMD_ERASE2) {
+			if (!i && j > 1) {
+				page_addr = addr_low;
+				page_addr *= j;
+			}
+			mxc_do_addr_cycle(mtd, -1, page_addr++);
+			raw_write(NFC_AUTO_ERASE, REG_NFC_OPS);
+			wait_op_done(TROP_US_DELAY, true);
+		} else if (cmd == NAND_CMD_RESET) {
+			NFC_SET_NFC_ACTIVE_CS(i);
+			send_atomic_cmd(cmd, true);
+		}
+	}
+}
+#endif
+
 static void send_addr(u16 addr, bool useirq);
+
 /*!
  * This function issues the specified command to the NAND device and
  * waits for completion.
@@ -222,7 +307,7 @@ static void send_addr(u16 addr, bool useirq);
  * @param       cmd     command for NAND Flash
  * @param       useirq  True if IRQ should be used rather than polling
  */
-static void send_cmd(u16 cmd, bool useirq)
+static void send_cmd(struct mtd_info *mtd, u16 cmd, bool useirq)
 {
 	DEBUG(MTD_DEBUG_LEVEL3, "send_cmd(0x%x, %d)\n", cmd, useirq);
 
@@ -232,52 +317,30 @@ static void send_cmd(u16 cmd, bool useirq)
 	case NAND_CMD_READOOB:
 		raw_write(NAND_CMD_READ0, REG_NFC_FLASH_CMD);
 		break;
-
 	case NAND_CMD_SEQIN:
 	case NAND_CMD_ERASE1:
 		raw_write(cmd, REG_NFC_FLASH_CMD);
 		break;
-
 	case NAND_CMD_PAGEPROG:
 	case NAND_CMD_ERASE2:
 	case NAND_CMD_READSTART:
 		raw_write(raw_read(REG_NFC_FLASH_CMD) | cmd << NFC_CMD_1_SHIFT,
 			  REG_NFC_FLASH_CMD);
-
-		if (cmd == NAND_CMD_ERASE2) {
-			raw_write(NFC_AUTO_ERASE, REG_NFC_OPS);
-		} else if (cmd == NAND_CMD_PAGEPROG) {
-			NFC_SET_RBA(0);
-			raw_write(NFC_AUTO_PROG, REG_NFC_OPS);
-		} else if (cmd == NAND_CMD_READSTART) {
-			NFC_SET_RBA(0);
-			raw_write(NFC_AUTO_READ, REG_NFC_OPS);
-		}
-
-		wait_op_done(TROP_US_DELAY, useirq);
+		auto_cmd_interleave(mtd, cmd);
 		break;
-
 	case NAND_CMD_READID:
-		raw_write(cmd, REG_NFC_FLASH_CMD);
-		ACK_OPS;
-		raw_write(NFC_CMD, REG_NFC_OPS);
-		wait_op_done(TROP_US_DELAY, useirq);
+		send_atomic_cmd(cmd, useirq);
 		send_addr(0, false);
 		break;
-
+	case NAND_CMD_RESET:
+		auto_cmd_interleave(mtd, cmd);
 	case NAND_CMD_STATUS:
-		raw_write(NFC_AUTO_STATE, REG_NFC_OPS);
+		break;
+	default:
 		break;
 	}
-	DEBUG(MTD_DEBUG_LEVEL3, "AutoMode:CMD REG value is 0x%x \n",
-	      raw_read(REG_NFC_FLASH_CMD));
 #else
-	raw_write(cmd, REG_NFC_FLASH_CMD);
-	ACK_OPS;
-	raw_write(NFC_CMD, REG_NFC_OPS);
-
-	/* Wait for operation to complete */
-	wait_op_done(TROP_US_DELAY, useirq);
+	send_atomic_cmd(cmd, useirq);
 #endif
 }
 
@@ -292,9 +355,14 @@ static void send_cmd(u16 cmd, bool useirq)
 static void send_addr(u16 addr, bool useirq)
 {
 	DEBUG(MTD_DEBUG_LEVEL3, "send_addr(0x%x %d)\n", addr, useirq);
+
+	/* fill address */
 	raw_write((addr << NFC_FLASH_ADDR_SHIFT), REG_NFC_FLASH_ADDR);
 
-	ACK_OPS;		/* defined only for V3 */
+	/* clear status */
+	ACK_OPS;
+
+	/* send out address */
 	raw_write(NFC_ADDR, REG_NFC_OPS);
 
 	/* Wait for operation to complete */
@@ -305,18 +373,22 @@ static void send_addr(u16 addr, bool useirq)
  * This function requests the NFC to initate the transfer
  * of data currently in the NFC RAM buffer to the NAND device.
  *
- * @param	buf_id	      Specify Internal RAM Buffer number (0-3)
+ * @param	buf_id	      Specify Internal RAM Buffer number
  */
 static void send_prog_page(u8 buf_id)
 {
 #ifndef NFC_AUTO_MODE_ENABLE
 	DEBUG(MTD_DEBUG_LEVEL3, "%s\n", __FUNCTION__);
 
+	/* set ram buffer id */
 	NFC_SET_RBA(buf_id);
 
-	ACK_OPS;		/* defined only for V3 */
+	/* clear status */
+	ACK_OPS;
 
+	/* transfer data from NFC ram to nand */
 	raw_write(NFC_INPUT, REG_NFC_OPS);
+
 	/* Wait for operation to complete */
 	wait_op_done(TROP_US_DELAY, true);
 #endif
@@ -326,18 +398,22 @@ static void send_prog_page(u8 buf_id)
  * This function requests the NFC to initated the transfer
  * of data from the NAND device into in the NFC ram buffer.
  *
- * @param  	buf_id		Specify Internal RAM Buffer number (0-3)
+ * @param  	buf_id		Specify Internal RAM Buffer number
  */
 static void send_read_page(u8 buf_id)
 {
 #ifndef NFC_AUTO_MODE_ENABLE
 	DEBUG(MTD_DEBUG_LEVEL3, "%s(%d)\n", __FUNCTION__, buf_id);
 
+	/* set ram buffer id */
 	NFC_SET_RBA(buf_id);
 
-	ACK_OPS;		/* defined only for V3 */
+	/* clear status */
+	ACK_OPS;
 
+	/* transfer data from nand to NFC ram */
 	raw_write(NFC_OUTPUT, REG_NFC_OPS);
+
 	/* Wait for operation to complete */
 	wait_op_done(TROP_US_DELAY, true);
 #endif
@@ -349,13 +425,10 @@ static void send_read_page(u8 buf_id)
  */
 static void send_read_id(void)
 {
-	u8 val = 0;
-
-	/* NFC buffer 0 is used for device ID output */
 	/* Set RBA bits for BUFFER0 */
-	NFC_SET_RBA(val);
+	NFC_SET_RBA(0);
 
-	/* defined only for V3 */
+	/* clear status */
 	ACK_OPS;
 
 	/* Read ID into main buffer */
@@ -366,6 +439,20 @@ static void send_read_id(void)
 
 }
 
+#ifdef NFC_AUTO_MODE_ENABLE
+static inline void read_dev_status(u16 *status)
+{
+	u32 mask = 0xFF << 16;
+
+	/* send auto read status command */
+	raw_write(NFC_AUTO_STATE, REG_NFC_OPS);
+
+	do {
+		*status = (raw_read(NFC_CONFIG1) & mask) >> 16;
+	} while ((*status & NAND_STATUS_READY) == 0);
+}
+#endif
+
 /*!
  * This function requests the NFC to perform a read of the
  * NAND device status and returns the current status.
@@ -375,21 +462,35 @@ static void send_read_id(void)
 static u16 get_dev_status(void)
 {
 #ifdef NFC_AUTO_MODE_ENABLE
-	u16 status;
-	do {
-		status = (raw_read(NFC_CONFIG1) & 0x00FF0000) >> 16;
-	} while ((status & 0x40) == 0);
+	int i;
+	u16 status = 0;
+	for (i = 0; i < num_of_interleave; i++) {
+
+		/* set ative cs */
+		NFC_SET_NFC_ACTIVE_CS(i);
+
+		/* FIXME, NFC Auto erase may have
+		 * problem, have to pollingit until
+		 * the nand get idle, otherwise
+		 * it may get error
+		 */
+		read_dev_status(&status);
+		if (status & NAND_STATUS_FAIL)
+			break;
+	}
+
 	return status;
 #else
 	volatile u16 *mainBuf = MAIN_AREA1;
 	u8 val = 1;
 	u16 ret;
 
-	/* Set RBA bits for BUFFER1 */
+	/* Set ram buffer id */
 	NFC_SET_RBA(val);
 
-	/* defined only for V3 */
+	/* clear status */
 	ACK_OPS;
+
 	/* Read status into main buffer */
 	raw_write(NFC_STATUS, REG_NFC_OPS);
 
@@ -404,24 +505,6 @@ static u16 get_dev_status(void)
 #endif
 }
 
-/*!
- * This functions is used by upper layer to checks if device is ready
- *
- * @param       mtd     MTD structure for the NAND Flash
- *
- * @return  0 if device is busy else 1
- */
-static int mxc_nand_dev_ready(struct mtd_info *mtd)
-{
-	/*
-	 * For V1/V2 NFC this function returns always  1.
-	 */
-	if (CHECK_NFC_RB)
-		return 1;
-	else
-		return 0;
-}
-
 static void mxc_nand_enable_hwecc(struct mtd_info *mtd, int mode)
 {
 	raw_write((raw_read(REG_NFC_ECC_EN) | NFC_ECC_EN), REG_NFC_ECC_EN);
@@ -445,10 +528,14 @@ static int mxc_check_ecc_status(struct mtd_info *mtd)
 
 	no_subpages = mtd->writesize >> 9;
 
+	no_subpages /= num_of_interleave;
+
 	ecc_stat = GET_NFC_ECC_STATUS();
 	do {
 		err = ecc_stat & ecc_bit_mask;
 		if (err > err_limit) {
+			mtd->ecc_stats.failed++;
+			printk(KERN_WARNING "UnCorrectable RS-ECC Error\n");
 			return -1;
 		} else {
 			ret += err;
@@ -456,33 +543,84 @@ static int mxc_check_ecc_status(struct mtd_info *mtd)
 		ecc_stat >>= 4;
 	} while (--no_subpages);
 
+	mtd->ecc_stats.corrected += ret;
+	pr_debug("%d Symbol Correctable RS-ECC Error\n", ret);
+
 	return ret;
 }
 
 /*
  * Function to correct the detected errors. This NFC corrects all the errors
- * detected. So this function is not required.
+ * detected. So this function just return 0.
  */
 static int mxc_nand_correct_data(struct mtd_info *mtd, u_char * dat,
 				 u_char * read_ecc, u_char * calc_ecc)
 {
-	panic("Shouldn't be called here: %d\n", __LINE__);
-	return 0;		//FIXME
+	return 0;
 }
 
 /*
  * Function to calculate the ECC for the data to be stored in the Nand device.
  * This NFC has a hardware RS(511,503) ECC engine together with the RS ECC
  * CONTROL blocks are responsible for detection  and correction of up to
- * 4 symbols of 9 bits each in 528 byte page.
- * So this function is not required.
+ * 8 symbols of 9 bits each in 528 byte page.
+ * So this function is just return 0.
  */
 
 static int mxc_nand_calculate_ecc(struct mtd_info *mtd, const u_char * dat,
 				  u_char * ecc_code)
 {
-	panic(KERN_ERR "Shouldn't be called here %d \n", __LINE__);
-	return 0;		//FIXME
+	return 0;
+}
+
+/*!
+ * This function id is used to read the data buffer from the NAND Flash. To
+ * read the data from NAND Flash first the data output cycle is initiated by
+ * the NFC, which copies the data to RAMbuffer. This data of length \b len is
+ * then copied to buffer \b buf.
+ *
+ * @param       mtd     MTD structure for the NAND Flash
+ * @param       buf     data to be read from NAND Flash
+ * @param       len     number of bytes to be read
+ */
+static void mxc_nand_read_buf(struct mtd_info *mtd, u_char * buf, int len)
+{
+	u16 col = g_nandfc_info.colAddr;
+
+	if (mtd->writesize) {
+
+		int j = mtd->writesize - col;
+		int n = mtd->oobsize + j;
+
+		n = min(n, len);
+
+		if (j > 0) {
+			if (n > j) {
+				memcpy(buf, &data_buf[col], j);
+				memcpy(buf + j, &oob_buf[0], n - j);
+			} else {
+				memcpy(buf, &data_buf[col], n);
+			}
+		} else {
+			col -= mtd->writesize;
+			memcpy(buf, &oob_buf[col], len);
+		}
+
+		/* update */
+		g_nandfc_info.colAddr += n;
+
+	} else {
+		/* At flash identify phase,
+		 * mtd->writesize has not been
+		 * set correctly, it should
+		 * be zero.And len will less 2
+		 */
+		memcpy(buf, &data_buf[col], len);
+
+		/* update */
+		g_nandfc_info.colAddr += len;
+	}
+
 }
 
 /*!
@@ -492,39 +630,18 @@ static int mxc_nand_calculate_ecc(struct mtd_info *mtd, const u_char * dat,
  *
  * @return    data read from the NAND Flash
  */
-static u_char mxc_nand_read_byte(struct mtd_info *mtd)
+static uint8_t mxc_nand_read_byte(struct mtd_info *mtd)
 {
-	u_char retVal = 0;
-	u16 col, rdWord;
-	volatile u16 *mainBuf = MAIN_AREA0;
-	volatile u16 *spareBuf = SPARE_AREA0;
+	uint8_t ret;
 
 	/* Check for status request */
 	if (g_nandfc_info.bStatusRequest) {
 		return (get_dev_status() & 0xFF);
 	}
 
-	/* Get column for 16-bit access */
-	col = g_nandfc_info.colAddr >> 1;
+	mxc_nand_read_buf(mtd, &ret, 1);
 
-	/* If we are accessing the spare region */
-	if (g_nandfc_info.bSpareOnly) {
-		rdWord = spareBuf[col];
-	} else {
-		rdWord = mainBuf[col];
-	}
-
-	/* Pick upper/lower byte of word from RAM buffer */
-	if (g_nandfc_info.colAddr & 0x1) {
-		retVal = (rdWord >> 8) & 0xFF;
-	} else {
-		retVal = rdWord & 0xFF;
-	}
-
-	/* Update saved column address */
-	g_nandfc_info.colAddr++;
-
-	return retVal;
+	return ret;
 }
 
 /*!
@@ -536,24 +653,11 @@ static u_char mxc_nand_read_byte(struct mtd_info *mtd)
   */
 static u16 mxc_nand_read_word(struct mtd_info *mtd)
 {
-	u16 col, rdWord;
-	volatile u16 *mainBuf = MAIN_AREA0;
-	volatile u16 *spareBuf = SPARE_AREA0;
-
-	/* Get column for 16-bit access */
-	col = g_nandfc_info.colAddr >> 1;
-
-	/* If we are accessing the spare region */
-	if (g_nandfc_info.bSpareOnly) {
-		rdWord = spareBuf[col];
-	} else {
-		rdWord = mainBuf[col];
-	}
+	u16 ret;
 
-	/* Update saved column address */
-	g_nandfc_info.colAddr += 2;
+	mxc_nand_read_buf(mtd, (uint8_t *) &ret, sizeof(u16));
 
-	return rdWord;
+	return ret;
 }
 
 /*!
@@ -584,42 +688,26 @@ static u_char mxc_nand_read_byte16(struct mtd_info *mtd)
 static void mxc_nand_write_buf(struct mtd_info *mtd,
 			       const u_char * buf, int len)
 {
-	volatile uint32_t *base;
-	panic("re-work needed\n");
-	if (g_nandfc_info.colAddr >= mtd->writesize || g_nandfc_info.bSpareOnly) {
-		base = (uint32_t *) SPARE_AREA0;
-		copy_spare(mtd, (char *)buf, (char *)base, len, false);
-		return;
-	} else {
-		g_nandfc_info.colAddr += len;
-		base = (uint32_t *) MAIN_AREA0;
-	}
-	memcpy((void *)base, (void *)buf, len);
-}
+	u16 col = g_nandfc_info.colAddr;
+	int j = mtd->writesize - col;
+	int n = mtd->oobsize + j;
 
-/*!
- * This function id is used to read the data buffer from the NAND Flash. To
- * read the data from NAND Flash first the data output cycle is initiated by
- * the NFC, which copies the data to RAMbuffer. This data of length \b len is
- * then copied to buffer \b buf.
- *
- * @param       mtd     MTD structure for the NAND Flash
- * @param       buf     data to be read from NAND Flash
- * @param       len     number of bytes to be read
- */
-static void mxc_nand_read_buf(struct mtd_info *mtd, u_char * buf, int len)
-{
-	volatile uint32_t *base;
+	n = min(n, len);
 
-	if (g_nandfc_info.colAddr >= mtd->writesize || g_nandfc_info.bSpareOnly) {
-		base = (uint32_t *) SPARE_AREA0;
-		copy_spare(mtd, buf, (char *)base, len, true);
-		return;
+	if (j > 0) {
+		if (n > j) {
+			memcpy(&data_buf[col], buf, j);
+			memcpy(&oob_buf[0], buf + j, n - j);
+		} else {
+			memcpy(&data_buf[col], buf, n);
+		}
 	} else {
-		base = (uint32_t *) MAIN_AREA0;
-		g_nandfc_info.colAddr += len;
+		col -= mtd->writesize;
+		memcpy(&oob_buf[col], buf, len);
 	}
-	nfc_memcpy((void *)buf, (void *)base, len);
+
+	/* update */
+	g_nandfc_info.colAddr += n;
 }
 
 /*!
@@ -636,14 +724,13 @@ static void mxc_nand_read_buf(struct mtd_info *mtd, u_char * buf, int len)
 static int mxc_nand_verify_buf(struct mtd_info *mtd, const u_char * buf,
 			       int len)
 {
-	volatile u32 *mainBuf = (u32 *) MAIN_AREA0;
-	/* check for 32-bit alignment? */
-	uint32_t *p = (uint32_t *) buf;
+	u_char *s = data_buf;
 
-	for (; len > 0; len -= 4) {
-		if (*p++ != *mainBuf++) {
+	const u_char *p = buf;
+
+	for (; len > 0; len--) {
+		if (*p++ != *s++)
 			return -EFAULT;
-		}
 	}
 
 	return 0;
@@ -658,30 +745,17 @@ static int mxc_nand_verify_buf(struct mtd_info *mtd, const u_char * buf,
  */
 static void mxc_nand_select_chip(struct mtd_info *mtd, int chip)
 {
-#ifdef CONFIG_MTD_NAND_MXC_FORCE_CE
-	if (chip > 0) {
-		DEBUG(MTD_DEBUG_LEVEL0,
-		      "ERROR:  Illegal chip select (chip = %d)\n", chip);
-		return;
-	}
-
-	if (chip == -1) {
-		raw_write((raw_read(REG_NFC_CE) & ~NFC_CE), REG_NFC_CE);
-		return;
-	}
-
-	raw_write((raw_read(REG_NFC_CE) | NFC_CE), REG_NFC_CE);
-
-#endif
 
 	switch (chip) {
 	case -1:
 		/* Disable the NFC clock */
 		clk_disable(nfc_clk);
 		break;
-	case 0:
+	case 0 ... 7:
 		/* Enable the NFC clock */
 		clk_enable(nfc_clk);
+
+		NFC_SET_NFC_ACTIVE_CS(chip);
 		break;
 
 	default:
@@ -697,13 +771,15 @@ static void mxc_do_addr_cycle(struct mtd_info *mtd, int column, int page_addr)
 #ifdef NFC_AUTO_MODE_ENABLE
 
 	if (page_addr != -1 && column != -1) {
+		u32 mask = 0xFFFF;
 		/* the column address */
-		raw_write(column & 0x0000FFFF, NFC_FLASH_ADDR0);
+		raw_write(column & mask, NFC_FLASH_ADDR0);
 		raw_write((raw_read(NFC_FLASH_ADDR0) |
-			   ((page_addr & 0x0000FFFF) << 16)), NFC_FLASH_ADDR0);
+			   ((page_addr & mask) << 16)), NFC_FLASH_ADDR0);
 		/* the row address */
-		raw_write(((raw_read(NFC_FLASH_ADDR8) & 0xFFFF0000) |
-			   ((page_addr & 0xFFFF0000) >> 16)), NFC_FLASH_ADDR8);
+		raw_write(((raw_read(NFC_FLASH_ADDR8) & (mask << 16)) |
+			   ((page_addr & (mask << 16)) >> 16)),
+			  NFC_FLASH_ADDR8);
 	} else if (page_addr != -1) {
 		raw_write(page_addr, NFC_FLASH_ADDR0);
 	}
@@ -735,23 +811,6 @@ static void mxc_do_addr_cycle(struct mtd_info *mtd, int column, int page_addr)
 #endif
 }
 
-/*
- * Function to read a page from nand device.
- */
-static void read_full_page(struct mtd_info *mtd, int page_addr)
-{
-	send_cmd(NAND_CMD_READ0, false);
-
-	mxc_do_addr_cycle(mtd, 0, page_addr);
-
-	if (IS_LARGE_PAGE_NAND) {
-		send_cmd(NAND_CMD_READSTART, false);
-		READ_PAGE();
-	} else {
-		send_read_page(0);
-	}
-}
-
 /*!
  * This function is used by the upper layer to write command to NAND Flash for
  * different operations to be carried out on NAND Flash
@@ -774,48 +833,73 @@ static void mxc_nand_command(struct mtd_info *mtd, unsigned command,
 	 */
 	g_nandfc_info.bStatusRequest = false;
 
-	/* Reset column address to 0 */
-	g_nandfc_info.colAddr = 0;
-
 	/*
 	 * Command pre-processing step
 	 */
 	switch (command) {
 	case NAND_CMD_STATUS:
+		g_nandfc_info.colAddr = 0;
 		g_nandfc_info.bStatusRequest = true;
 		break;
 
 	case NAND_CMD_READ0:
-		g_nandfc_info.bSpareOnly = false;
+		g_nandfc_info.colAddr = column;
 		useirq = false;
 		break;
 
 	case NAND_CMD_READOOB:
 		g_nandfc_info.colAddr = column;
-		g_nandfc_info.bSpareOnly = true;
 		useirq = false;
-		command = NAND_CMD_READ0;	/* only READ0 is valid */
+		command = NAND_CMD_READ0;
 		break;
 
 	case NAND_CMD_SEQIN:
-		if (column >= mtd->writesize) {
-			g_nandfc_info.bSpareOnly = true;
-		} else {
-			g_nandfc_info.bSpareOnly = false;
+		if (column != 0) {
+
+			/* FIXME: before send SEQIN command for
+			 * partial write,We need read one page out.
+			 * FSL NFC does not support partial write
+			 * It alway send out 512+ecc+512+ecc ...
+			 * for large page nand flash. But for small
+			 * page nand flash, it did support SPARE
+			 * ONLY operation. But to make driver
+			 * simple. We take the same as large page,read
+			 * whole page out and update. As for MLC nand
+			 * NOP(num of operation) = 1. Partial written
+			 * on one programed page is not allowed! We
+			 * can't limit it on the driver, it need the
+			 * upper layer applicaiton take care it
+			 */
+
+			mxc_nand_command(mtd, NAND_CMD_READ0, 0, page_addr);
 		}
+
+		g_nandfc_info.colAddr = column;
 		useirq = false;
 		break;
 
 	case NAND_CMD_PAGEPROG:
-		if (!g_nandfc_info.bSpareOnly) {
-			if (IS_LARGE_PAGE_NAND) {
-				PROG_PAGE();
-			} else {
-				send_prog_page(0);
-			}
-		} else {
-			return;
-		}
+#ifndef NFC_AUTO_MODE_ENABLE
+		/* FIXME:the NFC interal buffer
+		 * access has some limitation, it
+		 * does not allow byte access. To
+		 * make the code simple and ease use
+		 * not every time check the address
+		 * alignment.Use the temp buffer
+		 * to accomadate the data.since We
+		 * know data_buf will be at leat 4
+		 * byte alignment, so we can use
+		 * memcpy safely
+		 */
+		memcpy(MAIN_AREA0, data_buf, mtd->writesize);
+		copy_spare(mtd, oob_buf, SPARE_AREA0, mtd->oobsize, false);
+#endif
+
+		if (IS_LARGE_PAGE_NAND)
+			PROG_PAGE();
+		else
+			send_prog_page(0);
+
 		break;
 
 	case NAND_CMD_ERASE1:
@@ -829,7 +913,7 @@ static void mxc_nand_command(struct mtd_info *mtd, unsigned command,
 	/*
 	 * Write out the command to the device.
 	 */
-	send_cmd(command, useirq);
+	send_cmd(mtd, command, useirq);
 
 	mxc_do_addr_cycle(mtd, column, page_addr);
 
@@ -842,145 +926,74 @@ static void mxc_nand_command(struct mtd_info *mtd, unsigned command,
 	case NAND_CMD_READ0:
 		if (IS_LARGE_PAGE_NAND) {
 			/* send read confirm command */
-			send_cmd(NAND_CMD_READSTART, true);
+			send_cmd(mtd, NAND_CMD_READSTART, true);
 			/* read for each AREA */
 			READ_PAGE();
 		} else {
 			send_read_page(0);
 		}
-		break;
-
-	case NAND_CMD_READID:
-		send_read_id();
-		break;
-	}
-}
-
-#ifdef CONFIG_MXC_NAND_LOW_LEVEL_ERASE
-static void mxc_low_erase(struct mtd_info *mtd)
-{
-
-	struct nand_chip *this = mtd->priv;
-	unsigned int page_addr, addr;
-	u_char status;
-
-	DEBUG(MTD_DEBUG_LEVEL0, "MXC_ND : mxc_low_erase:Erasing NAND\n");
-	for (addr = 0; addr < this->chipsize; addr += mtd->erasesize) {
-		page_addr = addr / mtd->writesize;
-		mxc_nand_command(mtd, NAND_CMD_ERASE1, -1, page_addr);
-		mxc_nand_command(mtd, NAND_CMD_ERASE2, -1, -1);
-		mxc_nand_command(mtd, NAND_CMD_STATUS, -1, -1);
-		status = mxc_nand_read_byte(mtd);
-		if (status & NAND_STATUS_FAIL) {
-			printk(KERN_ERR
-			       "ERASE FAILED(block = %d,status = 0x%x)\n",
-			       addr / mtd->erasesize, status);
-		}
-	}
 
-}
-#else
-#define mxc_low_erase(x)
+#ifndef NFC_AUTO_MODE_ENABLE
+		/* FIXME, the NFC interal buffer
+		 * access has some limitation, it
+		 * does not allow byte access. To
+		 * make the code simple and ease use
+		 * not every time check the address
+		 * alignment.Use the temp buffer
+		 * to accomadate the data.since We
+		 * know data_buf will be at leat 4
+		 * byte alignment, so we can use
+		 * memcpy safely
+		 */
+		memcpy(data_buf, MAIN_AREA0, mtd->writesize);
+		copy_spare(mtd, oob_buf, SPARE_AREA0, mtd->oobsize, true);
 #endif
 
-static int mxc_nand_wait(struct mtd_info *mtd, struct nand_chip *chip)
-{
-	unsigned long timeo = jiffies;
-	int status, state = chip->state;
-
-	if (state == FL_ERASING)
-		timeo += (HZ * 400) / 1000;
-	else
-		timeo += (HZ * 20) / 1000;
+		break;
 
-	send_cmd(NAND_CMD_STATUS, 1);
+	case NAND_CMD_READID:
+		send_read_id();
+		g_nandfc_info.colAddr = column;
+		memcpy(data_buf, MAIN_AREA0, 2048);
 
-	while (time_before(jiffies, timeo)) {
-#ifdef CONFIG_ARCH_MXC_HAS_NFC_V3
-		if (chip->dev_ready) {
-			if (chip->dev_ready(mtd))
-				break;
-		} else
-#endif
-		{
-			if (get_dev_status() & NAND_STATUS_READY)
-				break;
-		}
-		cond_resched();
+		break;
 	}
-
-	status = (int)(get_dev_status());
-	return status;
 }
 
-static int mxc_nand_read_oob(struct mtd_info *mtd, struct nand_chip *chip,
-			     int page, int sndcmd)
+static int mxc_nand_read_oob(struct mtd_info *mtd,
+			     struct nand_chip *chip, int page, int sndcmd)
 {
 	if (sndcmd) {
-		read_full_page(mtd, page);
+
+		chip->cmdfunc(mtd, NAND_CMD_READ0, 0x00, page);
 		sndcmd = 0;
 	}
 
-	copy_spare(mtd, chip->oob_poi, (char *)SPARE_AREA0, mtd->oobsize, true);
-	return sndcmd;
-}
-
-static int mxc_nand_write_oob(struct mtd_info *mtd, struct nand_chip *chip,
-			      int page)
-{
-	int status = 0;
-	const uint8_t *buf = chip->oob_poi;
-	int read_oob_col = 0;
-	volatile uint16_t *p_addr = SPARE_AREA0;
-
-	send_cmd(NAND_CMD_READ0, false);
-	send_cmd(NAND_CMD_SEQIN, false);
-	mxc_do_addr_cycle(mtd, read_oob_col, page);
-
-	/* copy the oob data */
-	copy_spare(mtd, (char *)p_addr, (char *)buf, mtd->oobsize, false);
+	memcpy(chip->oob_poi, oob_buf, mtd->oobsize);
 
-	if (IS_LARGE_PAGE_NAND)
-		PROG_PAGE();
-	else
-		send_prog_page(0);
-
-	send_cmd(NAND_CMD_PAGEPROG, true);
-
-	status = mxc_nand_wait(mtd, chip);
-	if (status & NAND_STATUS_FAIL)
-		return -EIO;
-	return 0;
+	return sndcmd;
 }
 
 static int mxc_nand_read_page(struct mtd_info *mtd, struct nand_chip *chip,
 			      uint8_t * buf)
 {
-	int stat;
 
-	stat = mxc_check_ecc_status(mtd);
-	if (stat == -1) {
-		mtd->ecc_stats.failed++;
-		printk(KERN_WARNING "UnCorrectable RS-ECC Error\n");
-	} else {
-		mtd->ecc_stats.corrected += stat;
-		if (stat)
-			pr_debug("%d Symbol Correctable RS-ECC Error\n", stat);
-	}
+#ifndef NFC_AUTO_MODE_ENABLE
+	mxc_check_ecc_status(mtd);
+#endif
+
+	memcpy(buf, data_buf, mtd->writesize);
+	memcpy(chip->oob_poi, oob_buf, mtd->oobsize);
 
-	nfc_memcpy((void *)buf, (void *)MAIN_AREA0, mtd->writesize);
-	copy_spare(mtd, (void *)chip->oob_poi, (void *)SPARE_AREA0,
-		   mtd->oobsize, true);
 	return 0;
 }
 
-/* Kevin: This is clean and solid */
 static void mxc_nand_write_page(struct mtd_info *mtd, struct nand_chip *chip,
 				const uint8_t * buf)
 {
-	memcpy((void *)MAIN_AREA0, buf, mtd->writesize);
-	copy_spare(mtd, (char *)chip->oob_poi, (char *)SPARE_AREA0,
-		   mtd->oobsize, false);
+	memcpy(data_buf, buf, mtd->writesize);
+	memcpy(oob_buf, chip->oob_poi, mtd->oobsize);
+
 }
 
 /* Define some generic bad / good block scan pattern which are used
@@ -1042,6 +1055,27 @@ static int mxc_nand_scan_bbt(struct mtd_info *mtd)
 		this->ecc.layout = &nand_hw_eccoob_512;
 	}
 
+	/* reconfig for interleave mode */
+#ifdef NFC_AUTO_MODE_ENABLE
+	if (this->numchips > 1) {
+		num_of_interleave = this->numchips;
+		this->numchips = 1;
+
+		/* FIXEME:need remove it
+		 * when kernel support
+		 * 4G larger space
+		 */
+		mtd->size = this->chipsize;
+		mtd->erasesize *= num_of_interleave;
+		mtd->writesize *= num_of_interleave;
+		mtd->oobsize *= num_of_interleave;
+		this->page_shift = ffs(mtd->writesize) - 1;
+		this->bbt_erase_shift =
+		    this->phys_erase_shift = ffs(mtd->erasesize) - 1;
+		this->chip_shift = ffs(this->chipsize) - 1;
+		this->oob_poi = this->buffers->databuf + mtd->writesize;
+	}
+#endif
 	/* propagate ecc.layout to mtd_info */
 	mtd->ecclayout = this->ecc.layout;
 
@@ -1064,6 +1098,54 @@ static int mxc_nand_scan_bbt(struct mtd_info *mtd)
 	return nand_scan_bbt(mtd, this->badblock_pattern);
 }
 
+static void mxc_nfc_init(void)
+{
+	/* Resetting  NFC */
+	raw_write((raw_read(REG_NFC_RST) | NFC_RST), REG_NFC_RST);
+
+	/* Disable interrupt */
+	raw_write((raw_read(REG_NFC_INTRRUPT) | NFC_INT_MSK), REG_NFC_INTRRUPT);
+
+	/* disable spare enable */
+	raw_write(raw_read(REG_NFC_SP_EN) & ~NFC_SP_EN, REG_NFC_SP_EN);
+
+	/* Unlock the internal RAM Buffer */
+	raw_write(NFC_SET_BLS(NFC_BLS_UNLCOKED), REG_NFC_BLS);
+
+	/* Blocks to be unlocked */
+	UNLOCK_ADDR(0x0, 0xFFFF);
+
+	/* Unlock Block Command for given address range */
+	raw_write(NFC_SET_WPC(NFC_WPC_UNLOCK), REG_NFC_WPC);
+}
+
+static int mxc_alloc_buf(void)
+{
+	int err = 0;
+
+	data_buf = kzalloc(NAND_MAX_PAGESIZE, GFP_KERNEL);
+	if (!data_buf) {
+		printk(KERN_ERR "%s: failed to allocate data_buf\n", __func__);
+		err = -ENOMEM;
+		goto out;
+	}
+	oob_buf = kzalloc(NAND_MAX_OOBSIZE, GFP_KERNEL);
+	if (!oob_buf) {
+		printk(KERN_ERR "%s: failed to allocate oob_buf\n", __func__);
+		err = -ENOMEM;
+		goto out;
+	}
+
+      out:
+	return err;
+}
+
+static void mxc_free_buf(void)
+{
+	kfree(data_buf);
+	kfree(oob_buf);
+}
+
 /*!
  * This function is called during the driver binding process.
  *
@@ -1083,8 +1165,12 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 	nfc_axi_base = IO_ADDRESS(NFC_AXI_BASE_ADDR);
 	nfc_ip_base = IO_ADDRESS(NFC_BASE_ADDR);
 
-	/* Resetting  NFC */
-	raw_write((raw_read(REG_NFC_RST) | NFC_RST), REG_NFC_RST);
+	/* init the nfc */
+	mxc_nfc_init();
+
+	/* init data buf */
+	if (mxc_alloc_buf())
+		goto out;
 
 	/* Allocate memory for MTD device structure and private data */
 	mxc_nand_data = kzalloc(sizeof(struct mxc_mtd_s), GFP_KERNEL);
@@ -1104,12 +1190,8 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 	mtd->priv = this;
 	mtd->owner = THIS_MODULE;
 
-	/* 5 us command delay time */
-	this->chip_delay = 5;
 	this->priv = mxc_nand_data;
-	this->dev_ready = mxc_nand_dev_ready;
 	this->cmdfunc = mxc_nand_command;
-	this->waitfunc = mxc_nand_wait;
 	this->select_chip = mxc_nand_select_chip;
 	this->read_byte = mxc_nand_read_byte;
 	this->read_word = mxc_nand_read_word;
@@ -1126,10 +1208,7 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 	}
 
 	nfc_clk = clk_get(&pdev->dev, "nfc_clk");
-	clk_enable(nfc_clk);	/* Enabled here to satisfy following reset command to succeed */
-
-	/* Disable interrupt */
-	raw_write((raw_read(REG_NFC_INTRRUPT) | NFC_INT_MSK), REG_NFC_INTRRUPT);
+	clk_enable(nfc_clk);
 
 	init_waitqueue_head(&irq_waitq);
 	err = request_irq(MXC_INT_NANDFC, mxc_nfc_irq, 0, "mxc_nd", NULL);
@@ -1141,14 +1220,13 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 		this->ecc.read_page = mxc_nand_read_page;
 		this->ecc.write_page = mxc_nand_write_page;
 		this->ecc.read_oob = mxc_nand_read_oob;
-		this->ecc.write_oob = mxc_nand_write_oob;
 		this->ecc.layout = &nand_hw_eccoob_512;
 		this->ecc.calculate = mxc_nand_calculate_ecc;
 		this->ecc.hwctl = mxc_nand_enable_hwecc;
 		this->ecc.correct = mxc_nand_correct_data;
 		this->ecc.mode = NAND_ECC_HW;
-		this->ecc.size = 512;	/* RS-ECC is applied for both MAIN+SPARE not MAIN alone */
-		this->ecc.bytes = 9;	/* used for both main and spare area */
+		this->ecc.size = 512;
+		this->ecc.bytes = 9;
 		raw_write((raw_read(REG_NFC_ECC_EN) | NFC_ECC_EN),
 			  REG_NFC_ECC_EN);
 	} else {
@@ -1157,26 +1235,17 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 			  REG_NFC_ECC_EN);
 	}
 
-	raw_write(raw_read(REG_NFC_SP_EN) & ~NFC_SP_EN, REG_NFC_SP_EN);
+	/* config the gpio */
+	if (flash->init)
+		flash->init();
 
 	/* Reset NAND */
 	this->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
 
-	/* preset operation */
-	/* Unlock the internal RAM Buffer */
-	raw_write(NFC_SET_BLS(NFC_BLS_UNLCOKED), REG_NFC_BLS);
-
-	/* Blocks to be unlocked */
-	/* Start Address = 0X0, End Address   = 0xFFFF */
-	UNLOCK_ADDR(0x0, 0xFFFF);
-
-	/* Unlock Block Command for given address range */
-	raw_write(NFC_SET_WPC(NFC_WPC_UNLOCK), REG_NFC_WPC);
-
 	/* Scan to find existence of the device */
-	if (nand_scan(mtd, 1)) {
+	if (nand_scan(mtd, NFC_GET_MAXCHIP_SP())) {
 		DEBUG(MTD_DEBUG_LEVEL0,
-		      "MXC_ND: Unable to find any NAND device.\n");
+		      "MXC_ND2: Unable to find any NAND device.\n");
 		err = -ENXIO;
 		goto out_1;
 	}
@@ -1198,9 +1267,6 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, mtd);
 
-	/* Erase all the blocks of a NAND -- depend on the config */
-	mxc_low_erase(mtd);
-
 	return 0;
 
       out_1:
@@ -1221,6 +1287,12 @@ static int __init mxcnd_probe(struct platform_device *pdev)
 static int __exit mxcnd_remove(struct platform_device *pdev)
 {
 	struct mtd_info *mtd = platform_get_drvdata(pdev);
+	struct flash_platform_data *flash = pdev->dev.platform_data;
+
+	if (flash->exit)
+		flash->exit();
+
+	mxc_free_buf();
 
 	clk_disable(nfc_clk);
 	clk_put(nfc_clk);
@@ -1253,13 +1325,16 @@ static int mxcnd_suspend(struct platform_device *pdev, pm_message_t state)
 	struct mtd_info *info = platform_get_drvdata(pdev);
 	int ret = 0;
 
-	DEBUG(MTD_DEBUG_LEVEL0, "MXC_ND : NAND suspend\n");
+	DEBUG(MTD_DEBUG_LEVEL0, "MXC_ND2 : NAND suspend\n");
 	if (info)
 		ret = info->suspend(info);
 
 	/* Disable the NFC clock */
 	clk_disable(nfc_clk);
 
+	/* Disable the NFC clock */
+	clk_disable(nfc_clk);
+
 	return ret;
 }
 
@@ -1277,7 +1352,7 @@ static int mxcnd_resume(struct platform_device *pdev)
 	struct mtd_info *info = platform_get_drvdata(pdev);
 	int ret = 0;
 
-	DEBUG(MTD_DEBUG_LEVEL0, "MXC_ND : NAND resume\n");
+	DEBUG(MTD_DEBUG_LEVEL0, "MXC_ND2 : NAND resume\n");
 	/* Enable the NFC clock */
 	clk_enable(nfc_clk);
 
@@ -1334,5 +1409,5 @@ module_init(mxc_nd_init);
 module_exit(mxc_nd_cleanup);
 
 MODULE_AUTHOR("Freescale Semiconductor, Inc.");
-MODULE_DESCRIPTION("MXC NAND MTD driver Version 2-3");
+MODULE_DESCRIPTION("MXC NAND MTD driver Version 2-5");
 MODULE_LICENSE("GPL");
diff --git a/drivers/mtd/nand/mxc_nd2.h b/drivers/mtd/nand/mxc_nd2.h
index 1042995..685af16 100644
--- a/drivers/mtd/nand/mxc_nd2.h
+++ b/drivers/mtd/nand/mxc_nd2.h
@@ -25,11 +25,14 @@
 
 #include <asm/hardware.h>
 
-#define IS_2K_PAGE_NAND		(mtd->writesize == NAND_PAGESIZE_2KB)
-#define IS_4K_PAGE_NAND		(mtd->writesize == NAND_PAGESIZE_4KB)
+#define IS_2K_PAGE_NAND         ((mtd->writesize / num_of_interleave) \
+						== NAND_PAGESIZE_2KB)
+#define IS_4K_PAGE_NAND         ((mtd->writesize / num_of_interleave) \
+						== NAND_PAGESIZE_4KB)
+#define IS_LARGE_PAGE_NAND      ((mtd->writesize / num_of_interleave) > 512)
+
 #define NAND_PAGESIZE_2KB	2048
 #define NAND_PAGESIZE_4KB	4096
-#define IS_LARGE_PAGE_NAND	(mtd->writesize > 512)
 
 #ifdef CONFIG_ARCH_MXC_HAS_NFC_V3
 /*
@@ -310,10 +313,31 @@
 	(NFC_FIELD_RESET(NFC_PS_WIDTH, NFC_PS_SHIFT))) | \
 	((val) << NFC_PS_SHIFT), NFC_CONFIG2);
 
+#ifdef CONFIG_ARCH_MXC_HAS_NFC_V3_2
+#define UNLOCK_ADDR(start_addr,end_addr)     \
+{ \
+	int i = 0; \
+	for (; i < NAND_MAX_CHIPS; i++)  \
+	raw_write(start_addr | \
+	(end_addr << NFC_UNLOCK_END_ADDR_SHIFT), \
+	REG_UNLOCK_BLK_ADD0 + (i << 2)); \
+}
+#define NFC_SET_NFC_ACTIVE_CS(val) \
+	raw_write((raw_read(NFC_CONFIG1) & \
+	(NFC_FIELD_RESET(NFC_ACTIVE_CS_WIDTH, NFC_ACTIVE_CS_SHIFT))) | \
+	((val) << NFC_ACTIVE_CS_SHIFT), NFC_CONFIG1);
+
+#define NFC_GET_MAXCHIP_SP() 		8
+
+#else
 #define UNLOCK_ADDR(start_addr,end_addr)     \
 	raw_write(start_addr | \
 	(end_addr << NFC_UNLOCK_END_ADDR_SHIFT), REG_UNLOCK_BLK_ADD0);
 
+#define NFC_SET_NFC_ACTIVE_CS(val)
+#define NFC_GET_MAXCHIP_SP() 		1
+#endif
+
 #define NFC_SET_BLS(val) ((raw_read(REG_NFC_BLS) & NFC_BLS_RESET) | val )
 #define NFC_SET_WPC(val) ((raw_read(REG_NFC_WPC) & NFC_WPC_RESET) | val )
 #define CHECK_NFC_RB    raw_read(REG_NFC_RB) & NFC_RB
@@ -336,16 +360,28 @@
 	(NFC_FIELD_RESET(NFC_ITERATION_WIDTH, NFC_ITERATION_SHIFT))) | \
 	((val) << NFC_ITERATION_SHIFT), NFC_CONFIG1);
 
-#define NFC_SET_NFC_ACTIVE_CS(val) \
-	raw_write((raw_read(NFC_CONFIG1) & \
-	(NFC_FIELD_RESET(NFC_ACTIVE_CS_SHIFT, NFC_ACTIVE_CS_SHIFT))) | \
-	((val) << NFC_ACTIVE_CS_SHIFT), NFC_CONFIG2);
-
 #define NFC_SET_FW(val) \
 	raw_write((raw_read(NFC_CONFIG3) & \
-	(NFC_FIELD_RESET(NFC_FW_SHIFT, NFC_FW_SHIFT))) | \
+	(NFC_FIELD_RESET(NFC_FW_WIDTH, NFC_FW_SHIFT))) | \
 	((val) << NFC_FW_SHIFT), NFC_CONFIG3);
 
+#define NFC_SET_NUM_OF_DEVICE(val) \
+	raw_write((raw_read(NFC_CONFIG3) & \
+	(NFC_FIELD_RESET(NFC_NUM_OF_DEVICES_WIDTH, \
+	NFC_NUM_OF_DEVICES_SHIFT))) | \
+	((val) << NFC_NUM_OF_DEVICES_SHIFT), NFC_CONFIG3);
+
+#define NFC_SET_ADD_OP_MODE(val) \
+	 raw_write((raw_read(NFC_CONFIG3) & \
+	(NFC_FIELD_RESET(NFC_ADD_OP_WIDTH, NFC_ADD_OP_SHIFT))) | \
+	((val) << NFC_ADD_OP_SHIFT), NFC_CONFIG3);
+
+#define NFC_SET_ADD_CS_MODE(val) \
+{ \
+	NFC_SET_ADD_OP_MODE(val); \
+	NFC_SET_NUM_OF_DEVICE(this->numchips - 1); \
+}
+
 #define NFMS_NF_DWIDTH 0
 #define NFMS_NF_PG_SZ  1
 #define NFC_CMD_1_SHIFT 8
@@ -375,8 +411,9 @@ do {	\
 			NFC_SET_NFC_NUM_ADDR_PHASE1(NUM_OF_ADDR_CYCLE - 1); \
 			NFC_SET_NFC_NUM_ADDR_PHASE0(NFC_ONE_LESS_PHASE1); \
 		}	\
+		NFC_SET_ADD_CS_MODE(1) \
 		NFC_SET_ECC_MODE(NFC_SPAS_128); \
-	}	\
+	} \
 } while (0)
 #endif
 
@@ -574,6 +611,8 @@ do {	\
         raw_write(end_addr,REG_END_BLKADDR);		\
 }
 
+#define NFC_SET_NFC_ACTIVE_CS(val)
+#define NFC_GET_MAXCHIP_SP() 		1
 #define NFC_SET_WPC(val)                val
 
 /* NULL Definitions */
diff --git a/include/linux/mtd/nand.h b/include/linux/mtd/nand.h
index 71d85d9..a5e6b76 100644
--- a/include/linux/mtd/nand.h
+++ b/include/linux/mtd/nand.h
@@ -45,8 +45,8 @@ extern void nand_wait_ready(struct mtd_info *mtd);
  * is supported now. If you add a chip with bigger oobsize/page
  * adjust this accordingly.
  */
-#define NAND_MAX_OOBSIZE	218
-#define NAND_MAX_PAGESIZE	4096
+#define NAND_MAX_OOBSIZE	(218 * NAND_MAX_CHIPS)
+#define NAND_MAX_PAGESIZE	(4096 * NAND_MAX_CHIPS)
 
 /*
  * Constants for hardware specific CLE/ALE/NCE function
-- 
1.5.4.4

