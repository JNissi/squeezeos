From 29d31d6cffb997ea1baaf2ec1297c6c4d7fa11b7 Mon Sep 17 00:00:00 2001
From: Robby Cai <r63905@freescale.com>
Date: Tue, 16 Dec 2008 11:11:04 +0000
Subject: [PATCH] ENGR00103380 [MX37] Add support for VPU stop mode

when enter stop mode, save vpu register and running context
upon resume, restore saved vpu register and context

Signed-off-by: Robby Cai <r63905@freescale.com>
---
 drivers/mxc/vpu/mxc_vpu.c          |  288 ++++++++++++++++++++++++++++++------
 include/asm-arm/arch-mxc/mxc_vpu.h |   40 +++++-
 2 files changed, 283 insertions(+), 45 deletions(-)

diff --git a/drivers/mxc/vpu/mxc_vpu.c b/drivers/mxc/vpu/mxc_vpu.c
index 196260c..b765608 100644
--- a/drivers/mxc/vpu/mxc_vpu.c
+++ b/drivers/mxc/vpu/mxc_vpu.c
@@ -40,18 +40,14 @@
 
 #include <asm/arch/mxc_vpu.h>
 
-#define	BIT_INT_CLEAR		0x00C
-#define	BIT_INT_STATUS		0x010
-#define BIT_INT_ENABLE		0x170
-
-typedef struct vpu_t {
+struct vpu_priv {
 	struct fasync_struct *async_queue;
-} vpu_t;
+};
 
 /* To track the allocated memory buffer */
 typedef struct memalloc_record {
 	struct list_head list;
-	vpu_mem_desc mem;
+	struct vpu_mem_desc mem;
 } memalloc_record;
 
 struct iram_setting {
@@ -64,11 +60,12 @@ static LIST_HEAD(head);
 
 static int vpu_major = 0;
 static struct class *vpu_class;
-static struct vpu_t vpu_data;
+static struct vpu_priv vpu_data;
 static u8 open_count = 0;
 static struct clk *vpu_clk;
-static int clkgate_refcount;
-static vpu_mem_desc bitwork_mem = { 0 };
+static struct vpu_mem_desc bitwork_mem = { 0 };
+static struct vpu_mem_desc pic_para_mem = { 0 };
+static struct vpu_mem_desc user_data_mem = { 0 };
 
 /* IRAM setting */
 static struct iram_setting iram;
@@ -77,17 +74,72 @@ static struct iram_setting iram;
 static int codec_done = 0;
 static wait_queue_head_t vpu_queue;
 
+static u32 workctrl_regsave[6];
+static u32 rd_ptr_regsave[4];
+static u32 wr_ptr_regsave[4];
+static u32 dis_flag_regsave[4];
+
+#define	READ_REG(x)	__raw_readl(IO_ADDRESS(VPU_BASE_ADDR+(x)))
+#define	WRITE_REG(val, x)					\
+		__raw_writel((val), IO_ADDRESS(VPU_BASE_ADDR+(x)))
+
+#define	SAVE_WORK_REGS	do {					\
+	int i;							\
+	for (i = 0; i < ARRAY_SIZE(workctrl_regsave)/2; i++)	\
+		workctrl_regsave[i] = READ_REG(BIT_WORK_CTRL_BUF_REG(i));\
+} while (0)
+#define	RESTORE_WORK_REGS	do {				\
+	int i;							\
+	for (i = 0; i < ARRAY_SIZE(workctrl_regsave)/2; i++)	\
+		WRITE_REG(workctrl_regsave[i], BIT_WORK_CTRL_BUF_REG(i));\
+} while (0)
+#define	SAVE_CTRL_REGS	do {					\
+	int i;							\
+	for (i = ARRAY_SIZE(workctrl_regsave)/2;		\
+			i < ARRAY_SIZE(workctrl_regsave); i++)		\
+		workctrl_regsave[i] = READ_REG(BIT_WORK_CTRL_BUF_REG(i));\
+} while (0)
+#define	RESTORE_CTRL_REGS	do {				\
+	int i;							\
+	for (i = ARRAY_SIZE(workctrl_regsave)/2;		\
+			i < ARRAY_SIZE(workctrl_regsave); i++)		\
+		WRITE_REG(workctrl_regsave[i], BIT_WORK_CTRL_BUF_REG(i));\
+} while (0)
+#define	SAVE_RDWR_PTR_REGS	do {					\
+	int i;								\
+	for (i = 0; i < ARRAY_SIZE(rd_ptr_regsave); i++)		\
+		rd_ptr_regsave[i] = READ_REG(BIT_RD_PTR_REG(i));	\
+	for (i = 0; i < ARRAY_SIZE(wr_ptr_regsave); i++)		\
+		wr_ptr_regsave[i] = READ_REG(BIT_WR_PTR_REG(i));	\
+} while (0)
+#define	RESTORE_RDWR_PTR_REGS	do {					\
+	int i;								\
+	for (i = 0; i < ARRAY_SIZE(rd_ptr_regsave); i++)		\
+		WRITE_REG(rd_ptr_regsave[i], BIT_RD_PTR_REG(i));	\
+	for (i = 0; i < ARRAY_SIZE(wr_ptr_regsave); i++)		\
+		WRITE_REG(wr_ptr_regsave[i], BIT_WR_PTR_REG(i));	\
+} while (0)
+#define	SAVE_DIS_FLAG_REGS	do {					\
+	int i;								\
+	for (i = 0; i < ARRAY_SIZE(dis_flag_regsave); i++)		\
+		dis_flag_regsave[i] = READ_REG(BIT_FRM_DIS_FLG_REG(i));	\
+} while (0)
+#define	RESTORE_DIS_FLAG_REGS	do {					\
+	int i;								\
+	for (i = 0; i < ARRAY_SIZE(dis_flag_regsave); i++)		\
+		WRITE_REG(dis_flag_regsave[i], BIT_FRM_DIS_FLG_REG(i));	\
+} while (0)
+
 /*!
  * Private function to alloc dma buffer
  * @return status  0 success.
  */
-static int vpu_alloc_dma_buffer(vpu_mem_desc *mem)
+static int vpu_alloc_dma_buffer(struct vpu_mem_desc *mem)
 {
 	mem->cpu_addr = (unsigned long)
-	    dma_alloc_coherent(NULL,
-			       PAGE_ALIGN(mem->size),
-			       (dma_addr_t
-				*) (&(mem->phy_addr)), GFP_DMA | GFP_KERNEL);
+	    dma_alloc_coherent(NULL, PAGE_ALIGN(mem->size),
+			       (dma_addr_t *) (&mem->phy_addr),
+			       GFP_DMA | GFP_KERNEL);
 	pr_debug("[ALLOC] mem alloc cpu_addr = 0x%x\n", mem->cpu_addr);
 	if ((void *)(mem->cpu_addr) == NULL) {
 		printk(KERN_ERR "Physical memory allocation error!\n");
@@ -99,7 +151,7 @@ static int vpu_alloc_dma_buffer(vpu_mem_desc *mem)
 /*!
  * Private function to free dma buffer
  */
-static void vpu_free_dma_buffer(vpu_mem_desc *mem)
+static void vpu_free_dma_buffer(struct vpu_mem_desc *mem)
 {
 	if (mem->cpu_addr != 0) {
 		dma_free_coherent(0, PAGE_ALIGN(mem->size),
@@ -114,7 +166,7 @@ static void vpu_free_dma_buffer(vpu_mem_desc *mem)
 static int vpu_free_buffers(void)
 {
 	struct memalloc_record *rec, *n;
-	vpu_mem_desc mem;
+	struct vpu_mem_desc mem;
 
 	list_for_each_entry_safe(rec, n, &head, list) {
 		mem = rec->mem;
@@ -135,10 +187,10 @@ static int vpu_free_buffers(void)
  */
 static irqreturn_t vpu_irq_handler(int irq, void *dev_id)
 {
-	struct vpu_t *dev = dev_id;
+	struct vpu_priv *dev = dev_id;
 
-	__raw_readl(IO_ADDRESS(VPU_BASE_ADDR + BIT_INT_STATUS));
-	__raw_writel(0x1, IO_ADDRESS(VPU_BASE_ADDR + BIT_INT_CLEAR));
+	READ_REG(BIT_INT_STATUS);
+	WRITE_REG(0x1, BIT_INT_CLEAR);
 
 	if (dev->async_queue)
 		kill_fasync(&dev->async_queue, SIGIO, POLL_IN);
@@ -147,10 +199,7 @@ static irqreturn_t vpu_irq_handler(int irq, void *dev_id)
 	 * Clock is gated on when dec/enc started, gate it off when
 	 * interrupt is received.
 	 */
-	spin_lock(&vpu_lock);
-	if (clkgate_refcount > 0 && !(--clkgate_refcount))
-		clk_disable(vpu_clk);
-	spin_unlock(&vpu_lock);
+	clk_disable(vpu_clk);
 
 	codec_done = 1;
 	wake_up_interruptible(&vpu_queue);
@@ -192,8 +241,9 @@ static int vpu_ioctl(struct inode *inode, struct file *filp, u_int cmd,
 			if (!rec)
 				return -ENOMEM;
 
-			ret = copy_from_user(&(rec->mem), (vpu_mem_desc *) arg,
-					     sizeof(vpu_mem_desc));
+			ret = copy_from_user(&(rec->mem),
+					     (struct vpu_mem_desc *)arg,
+					     sizeof(struct vpu_mem_desc));
 			if (ret) {
 				kfree(rec);
 				return -EFAULT;
@@ -210,7 +260,7 @@ static int vpu_ioctl(struct inode *inode, struct file *filp, u_int cmd,
 				break;
 			}
 			ret = copy_to_user((void __user *)arg, &(rec->mem),
-					   sizeof(vpu_mem_desc));
+					   sizeof(struct vpu_mem_desc));
 			if (ret) {
 				kfree(rec);
 				ret = -EFAULT;
@@ -226,10 +276,11 @@ static int vpu_ioctl(struct inode *inode, struct file *filp, u_int cmd,
 	case VPU_IOC_PHYMEM_FREE:
 		{
 			struct memalloc_record *rec, *n;
-			vpu_mem_desc vpu_mem;
+			struct vpu_mem_desc vpu_mem;
 
-			ret = copy_from_user(&vpu_mem, (vpu_mem_desc *) arg,
-					     sizeof(vpu_mem_desc));
+			ret = copy_from_user(&vpu_mem,
+					     (struct vpu_mem_desc *)arg,
+					     sizeof(struct vpu_mem_desc));
 			if (ret)
 				return -EACCES;
 
@@ -286,21 +337,15 @@ static int vpu_ioctl(struct inode *inode, struct file *filp, u_int cmd,
 	case VPU_IOC_CLKGATE_SETTING:
 		{
 			u32 clkgate_en;
-			unsigned long lock_flags;
 
 			if (get_user(clkgate_en, (u32 __user *) arg))
 				return -EFAULT;
 
-			spin_lock_irqsave(&vpu_lock, lock_flags);
 			if (clkgate_en) {
-				if (++clkgate_refcount == 1)
-					clk_enable(vpu_clk);
+				clk_enable(vpu_clk);
 			} else {
-				if (clkgate_refcount > 0
-				    && !(--clkgate_refcount))
-					clk_disable(vpu_clk);
+				clk_disable(vpu_clk);
 			}
-			spin_unlock_irqrestore(&vpu_lock, lock_flags);
 
 			break;
 		}
@@ -310,19 +355,68 @@ static int vpu_ioctl(struct inode *inode, struct file *filp, u_int cmd,
 				ret =
 				    copy_to_user((void __user *)arg,
 						 &bitwork_mem,
-						 sizeof(vpu_mem_desc));
+						 sizeof(struct vpu_mem_desc));
 				break;
 			} else {
 				if (copy_from_user(&bitwork_mem,
-						   (vpu_mem_desc *) arg,
-						   sizeof(vpu_mem_desc)))
+						   (struct vpu_mem_desc *)arg,
+						   sizeof(struct vpu_mem_desc)))
 					return -EFAULT;
 
 				if (vpu_alloc_dma_buffer(&bitwork_mem) == -1)
 					ret = -EFAULT;
 				else if (copy_to_user((void __user *)arg,
 						      &bitwork_mem,
-						      sizeof(vpu_mem_desc)))
+						      sizeof(struct
+							     vpu_mem_desc)))
+					ret = -EFAULT;
+			}
+			break;
+		}
+	case VPU_IOC_GET_PIC_PARA_ADDR:
+		{
+			if (pic_para_mem.cpu_addr != 0) {
+				ret =
+				    copy_to_user((void __user *)arg,
+						 &pic_para_mem,
+						 sizeof(struct vpu_mem_desc));
+				break;
+			} else {
+				if (copy_from_user(&pic_para_mem,
+						   (struct vpu_mem_desc *)arg,
+						   sizeof(struct vpu_mem_desc)))
+					return -EFAULT;
+
+				if (vpu_alloc_dma_buffer(&pic_para_mem) == -1)
+					ret = -EFAULT;
+				else if (copy_to_user((void __user *)arg,
+						      &pic_para_mem,
+						      sizeof(struct
+							     vpu_mem_desc)))
+					ret = -EFAULT;
+			}
+			break;
+		}
+	case VPU_IOC_GET_USER_DATA_ADDR:
+		{
+			if (user_data_mem.cpu_addr != 0) {
+				ret =
+				    copy_to_user((void __user *)arg,
+						 &user_data_mem,
+						 sizeof(struct vpu_mem_desc));
+				break;
+			} else {
+				if (copy_from_user(&user_data_mem,
+						   (struct vpu_mem_desc *)arg,
+						   sizeof(struct vpu_mem_desc)))
+					return -EFAULT;
+
+				if (vpu_alloc_dma_buffer(&user_data_mem) == -1)
+					ret = -EFAULT;
+				else if (copy_to_user((void __user *)arg,
+						      &user_data_mem,
+						      sizeof(struct
+							     vpu_mem_desc)))
 					ret = -EFAULT;
 			}
 			break;
@@ -352,6 +446,7 @@ static int vpu_release(struct inode *inode, struct file *filp)
 
 		if (cpu_is_mx32())
 			vl2cc_disable();
+
 	}
 	spin_unlock(&vpu_lock);
 
@@ -364,7 +459,7 @@ static int vpu_release(struct inode *inode, struct file *filp)
  */
 static int vpu_fasync(int fd, struct file *filp, int mode)
 {
-	struct vpu_t *dev = (struct vpu_t *)filp->private_data;
+	struct vpu_priv *dev = (struct vpu_priv *)filp->private_data;
 	return fasync_helper(fd, filp, mode, &dev->async_queue);
 }
 
@@ -508,6 +603,109 @@ static int vpu_dev_probe(struct platform_device *pdev)
 	return err;
 }
 
+#ifdef CONFIG_PM
+static int vpu_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	if (codec_done == 1)
+		return -EINVAL;
+
+	clk_enable(vpu_clk);
+	if (bitwork_mem.cpu_addr != 0) {
+		SAVE_WORK_REGS;
+		SAVE_CTRL_REGS;
+		SAVE_RDWR_PTR_REGS;
+		SAVE_DIS_FLAG_REGS;
+
+		WRITE_REG(0x1, BIT_BUSY_FLAG);
+		WRITE_REG(VPU_SLEEP_REG_VALUE, BIT_RUN_COMMAND);
+		while (READ_REG(BIT_BUSY_FLAG)) ;
+	}
+
+	clk_disable(vpu_clk);
+	mxc_pg_enable(pdev);
+
+	return 0;
+}
+
+static int vpu_resume(struct platform_device *pdev)
+{
+	mxc_pg_disable(pdev);
+
+	clk_enable(vpu_clk);
+
+	if (bitwork_mem.cpu_addr != 0) {
+		u32 *p = (u32 *) bitwork_mem.cpu_addr;
+		u32 data;
+		u16 data_hi;
+		u16 data_lo;
+		int i;
+
+		RESTORE_WORK_REGS;
+
+		WRITE_REG(0x0, BIT_RESET_CTRL);
+		WRITE_REG(0x0, BIT_CODE_RUN);
+
+		/*
+		 * Re-load boot code, from the codebuffer in external RAM.
+		 * Thankfully, we only need 4096 bytes, same for all platforms.
+		 */
+		if (cpu_is_mx51()) {
+			for (i = 0; i < 2048; i += 4) {
+				data = p[(i / 2) + 1];
+				data_hi = (data >> 16) & 0xFFFF;
+				data_lo = data & 0xFFFF;
+				WRITE_REG((i << 16) | data_hi, BIT_CODE_DOWN);
+				WRITE_REG(((i + 1) << 16) | data_lo,
+					  BIT_CODE_DOWN);
+
+				data = p[i / 2];
+				data_hi = (data >> 16) & 0xFFFF;
+				data_lo = data & 0xFFFF;
+				WRITE_REG(((i + 2) << 16) | data_hi,
+					  BIT_CODE_DOWN);
+				WRITE_REG(((i + 3) << 16) | data_lo,
+					  BIT_CODE_DOWN);
+			}
+		} else {
+			for (i = 0; i < 2048; i += 2) {
+				if (cpu_is_mx37())
+					data = swab32(p[i / 2]);
+				else
+					data = p[i / 2];
+				data_hi = (data >> 16) & 0xFFFF;
+				data_lo = data & 0xFFFF;
+
+				WRITE_REG((i << 16) | data_hi, BIT_CODE_DOWN);
+				WRITE_REG(((i + 1) << 16) | data_lo,
+					  BIT_CODE_DOWN);
+			}
+		}
+
+		RESTORE_CTRL_REGS;
+
+		WRITE_REG(BITVAL_PIC_RUN, BIT_INT_ENABLE);
+
+		WRITE_REG(0x1, BIT_BUSY_FLAG);
+		WRITE_REG(0x1, BIT_CODE_RUN);
+		while (READ_REG(BIT_BUSY_FLAG)) ;
+
+		RESTORE_RDWR_PTR_REGS;
+		RESTORE_DIS_FLAG_REGS;
+
+		WRITE_REG(0x1, BIT_BUSY_FLAG);
+		WRITE_REG(VPU_WAKE_REG_VALUE, BIT_RUN_COMMAND);
+		while (READ_REG(BIT_BUSY_FLAG)) ;
+	}
+
+	clk_disable(vpu_clk);
+
+	return 0;
+}
+#else
+#define	vpu_suspend	NULL
+#define	vpu_resume	NULL
+#endif /* !CONFIG_PM */
+
 /*! Driver definition
  *
  */
@@ -516,6 +714,8 @@ static struct platform_driver mxcvpu_driver = {
 		   .name = "mxc_vpu",
 		   },
 	.probe = vpu_dev_probe,
+	.suspend = vpu_suspend,
+	.resume = vpu_resume,
 };
 
 static int __init vpu_init(void)
@@ -542,6 +742,8 @@ static void __exit vpu_exit(void)
 	}
 
 	vpu_free_dma_buffer(&bitwork_mem);
+	vpu_free_dma_buffer(&pic_para_mem);
+	vpu_free_dma_buffer(&user_data_mem);
 
 	clk_put(vpu_clk);
 
diff --git a/include/asm-arm/arch-mxc/mxc_vpu.h b/include/asm-arm/arch-mxc/mxc_vpu.h
index 905ae59..51f1979 100644
--- a/include/asm-arm/arch-mxc/mxc_vpu.h
+++ b/include/asm-arm/arch-mxc/mxc_vpu.h
@@ -28,12 +28,12 @@
 
 #include <linux/fs.h>
 
-typedef struct vpu_mem_desc {
+struct vpu_mem_desc {
 	u32 size;
 	dma_addr_t phy_addr;
 	u32 cpu_addr;		/* cpu address to free the dma mem */
 	u32 virt_uaddr;		/* virtual user space address */
-} vpu_mem_desc;
+};
 
 #define VPU_IOC_MAGIC  'V'
 
@@ -46,6 +46,42 @@ typedef struct vpu_mem_desc {
 #define VPU_IOC_IRAM_SETTING	_IO(VPU_IOC_MAGIC, 6)
 #define VPU_IOC_CLKGATE_SETTING	_IO(VPU_IOC_MAGIC, 7)
 #define VPU_IOC_GET_WORK_ADDR   _IO(VPU_IOC_MAGIC, 8)
+#define VPU_IOC_GET_PIC_PARA_ADDR   _IO(VPU_IOC_MAGIC, 9)
+#define VPU_IOC_GET_USER_DATA_ADDR   _IO(VPU_IOC_MAGIC, 10)
+
+#define BIT_CODE_RUN			0x000
+#define BIT_CODE_DOWN			0x004
+#define	BIT_INT_CLEAR			0x00C
+#define	BIT_INT_STATUS			0x010
+
+#define BIT_WORK_CTRL_BUF_BASE		0x100
+#define BIT_WORK_CTRL_BUF_REG(i)	(BIT_WORK_CTRL_BUF_BASE + i * 4)
+#define BIT_CODE_BUF_ADDR		BIT_WORK_CTRL_BUF_REG(0)
+#define BIT_WORK_BUF_ADDR		BIT_WORK_CTRL_BUF_REG(1)
+#define BIT_PARA_BUF_ADDR		BIT_WORK_CTRL_BUF_REG(2)
+#define BIT_BIT_STREAM_CTRL		BIT_WORK_CTRL_BUF_REG(3)
+#define BIT_FRAME_MEM_CTRL		BIT_WORK_CTRL_BUF_REG(4)
+#define BIT_BIT_STREAM_PARAM		BIT_WORK_CTRL_BUF_REG(5)
+
+#define BIT_RESET_CTRL			0x11C
+
+/* i could be 0, 1, 2, 3 */
+#define	BIT_RD_PTR_BASE			0x120
+#define BIT_RD_PTR_REG(i)		(BIT_RD_PTR_BASE + i * 8)
+#define BIT_WR_PTR_REG(i)		(BIT_RD_PTR_BASE + i * 8 + 4)
+
+/* i could be 0, 1, 2, 3 */
+#define BIT_FRM_DIS_FLG_BASE		(cpu_is_mx51() ? 0x150 : 0x140)
+#define	BIT_FRM_DIS_FLG_REG(i)		(BIT_FRM_DIS_FLG_BASE + i * 4)
+
+#define BIT_BUSY_FLAG			0x160
+#define BIT_RUN_COMMAND			0x164
+#define BIT_INT_ENABLE			0x170
+
+#define	BITVAL_PIC_RUN			8
+
+#define	VPU_SLEEP_REG_VALUE		10
+#define	VPU_WAKE_REG_VALUE		11
 
 int vl2cc_init(u32 vl2cc_hw_base);
 void vl2cc_enable(void);
-- 
1.5.4.4

