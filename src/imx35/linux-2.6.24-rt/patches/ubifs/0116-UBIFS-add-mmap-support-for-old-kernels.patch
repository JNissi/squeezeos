From 4448eca6a4d67e9db58630c278183724610a350e Mon Sep 17 00:00:00 2001
From: Artem Bityutskiy <Artem.Bityutskiy@nokia.com>
Date: Wed, 30 Jul 2008 10:14:59 +0300
Subject: [PATCH] UBIFS: add mmap support for old kernels

There is no reason not to support mmap in 2.6.21.

Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com>
---
 fs/ubifs/compat.c |    7 -------
 fs/ubifs/compat.h |    7 -------
 fs/ubifs/file.c   |    7 ++-----
 3 files changed, 2 insertions(+), 19 deletions(-)

diff --git a/fs/ubifs/compat.c b/fs/ubifs/compat.c
index f46916b..8c61da0 100644
--- a/fs/ubifs/compat.c
+++ b/fs/ubifs/compat.c
@@ -472,10 +472,3 @@ int ubifs_make_free_space(struct ubifs_info *c, struct retries_info *ri,
 }
 
 #endif /* UBIFS_COMPAT_USE_OLD_PREPARE_WRITE */
-
-#ifdef UBIFS_COMPAT_NO_SHARED_MMAP
-int ubifs_file_mmap(struct file *file, struct vm_area_struct *vma)
-{
-	return generic_file_readonly_mmap(file, vma);
-}
-#endif /* UBIFS_COMPAT_NO_SHARED_MMAP */
diff --git a/fs/ubifs/compat.h b/fs/ubifs/compat.h
index 87322df..6c1a9c4 100644
--- a/fs/ubifs/compat.h
+++ b/fs/ubifs/compat.h
@@ -75,13 +75,6 @@ int ubifs_make_free_space(struct ubifs_info *c, struct retries_info *ri,
 /* print_hex_dump() did not exist in kernel prior to 2.6.22 */
 #define print_hex_dump(a, b, c, f, e, buf, len, g) ubifs_hexdump(buf, len)
 void ubifs_hexdump(const void *ptr, int size);
-/*
- * Older kernel have no '->page_mkwrite()' call-back in
- * 'struct vm_operations_struct', so we just do not support writeble mmaps. The
- * support can be added if someone needs it badly, though.
- */
-int ubifs_file_mmap(struct file *file, struct vm_area_struct *vma);
-#define UBIFS_COMPAT_NO_SHARED_MMAP
 #endif
 
 #if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,24))
diff --git a/fs/ubifs/file.c b/fs/ubifs/file.c
index 8f49268..6ee73c9 100644
--- a/fs/ubifs/file.c
+++ b/fs/ubifs/file.c
@@ -1132,8 +1132,6 @@ static int ubifs_releasepage(struct page *page, gfp_t unused_gfp_flags)
 	return 1;
 }
 
-#ifndef UBIFS_COMPAT_NO_SHARED_MMAP
-
 /*
  * mmap()d file has taken write protection fault and is being made
  * writable. UBIFS must ensure page is budgeted for.
@@ -1228,8 +1226,9 @@ out_unlock:
 }
 
 static struct vm_operations_struct ubifs_file_vm_ops = {
-#if (LINUX_VERSION_CODE == KERNEL_VERSION(2,6,22))
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,23))
 	.nopage       = filemap_nopage,
+	.populate     = filemap_populate,
 #else
 	.fault        = filemap_fault,
 #endif
@@ -1247,12 +1246,10 @@ static int ubifs_file_mmap(struct file *file, struct vm_area_struct *vma)
 	vma->vm_ops = &ubifs_file_vm_ops;
 	return 0;
 }
-#endif
 
 struct address_space_operations ubifs_file_address_operations = {
 	.readpage       = ubifs_readpage,
 	.writepage      = ubifs_writepage,
-/* TODO: remove compatibility stuff as late as possible */
 #ifdef UBIFS_COMPAT_USE_OLD_PREPARE_WRITE
 	.prepare_write  = ubifs_prepare_write,
 	.commit_write   = ubifs_commit_write,
-- 
1.5.6.3

