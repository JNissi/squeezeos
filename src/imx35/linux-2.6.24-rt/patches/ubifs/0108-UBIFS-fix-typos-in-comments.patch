From db024a5efe3764a99371003ac451ea0f2d60b0a7 Mon Sep 17 00:00:00 2001
From: Adrian Hunter <ext-adrian.hunter@nokia.com>
Date: Wed, 23 Jul 2008 15:48:39 +0300
Subject: [PATCH] UBIFS: fix typos in comments

Signed-off-by: Adrian Hunter <ext-adrian.hunter@nokia.com>
---
 fs/ubifs/journal.c |   10 +++++-----
 fs/ubifs/super.c   |    2 +-
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/fs/ubifs/journal.c b/fs/ubifs/journal.c
index 0bcee7d..25de6fd 100644
--- a/fs/ubifs/journal.c
+++ b/fs/ubifs/journal.c
@@ -822,7 +822,7 @@ out_free:
 }
 
 /**
- * ubifs_jnl_write_inode - delete an inode.
+ * ubifs_jnl_delete_inode - delete an inode.
  * @c: UBIFS file-system description object
  * @inode: inode to delete
  *
@@ -831,21 +831,21 @@ out_free:
  * journal.
  *
  * When regular file inodes are unlinked or a directory inode is removed, the
- * 'ubifs_jnl_update()' function write corresponding deletion inode and
+ * 'ubifs_jnl_update()' function writes a corresponding deletion inode and
  * direntry to the media, and adds the inode to orphans. After this, when the
  * last reference to this inode has been dropped, this function is called. In
  * general, it has to write one more deletion inode to the media, because if
  * a commit happened between 'ubifs_jnl_update()' and
  * 'ubifs_jnl_delete_inode()', the deletion inode is not in the journal
- * anymore, and in fact it might be not on the flash anymore, becouse it might
- * have been garbage-collected already. And for optimization reasond UBIFS does
+ * anymore, and in fact it might not be on the flash anymore, because it might
+ * have been garbage-collected already. And for optimization reasons UBIFS does
  * not read the orphan area if it has been unmounted cleanly, so it would have
  * no indication in the journal that there is a deleted inode which has to be
  * removed from TNC.
  *
  * However, if there was no commit between 'ubifs_jnl_update()' and
  * 'ubifs_jnl_delete_inode()', then there is no need to write the deletion
- * inode to the media for the second time. And this is quite typical case.
+ * inode to the media for the second time. And this is quite a typical case.
  *
  * This function returns zero in case of success and a negative error code in
  * case of failure.
diff --git a/fs/ubifs/super.c b/fs/ubifs/super.c
index 7945fa4..3dd9b67 100644
--- a/fs/ubifs/super.c
+++ b/fs/ubifs/super.c
@@ -1595,7 +1595,7 @@ struct super_operations ubifs_super_operations = {
 
 #ifdef UBIFS_COMPAT_SUPPORT_NFS
 /*
- * Note, since UBIFS does re-use inode numbers at the moment, we do not check
+ * Note, since UBIFS doesn't re-use inode numbers at the moment, we do not check
  * the generation number in this function.
  */
 static struct dentry *ubifs_fh_to_dentry(struct super_block *sb,
-- 
1.5.6.3

