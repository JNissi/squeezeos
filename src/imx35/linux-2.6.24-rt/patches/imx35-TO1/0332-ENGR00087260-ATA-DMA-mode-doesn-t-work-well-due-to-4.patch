From 5849bfabf14a97de4802a74a5d823f28939ff64a Mon Sep 17 00:00:00 2001
From: Fred Fan <r01011@freescale.com>
Date: Fri, 15 Aug 2008 14:57:14 +0800
Subject: [PATCH] ENGR00087260 ATA DMA mode doesn't work well due to 4k byte alignment issue

ADMA need the address 4kB aligned. The modification redirects the unaligned
transfer to adma buffers. And comments redundant alt status check in interrrupt
handler. And change the dma_boundary and FSL_ATA_MAX_SG_LEN
to half ATA_DMA_BOUNDARY.

Signed-off-by: Fred Fan <r01011@freescale.com>
(cherry picked from commit b80e60e6d32c179837548dbfd6b78bede181c3aa)
---
 drivers/ata/pata_fsl.c |  300 +++++++++++++++++++++++++++++++-----------------
 1 files changed, 193 insertions(+), 107 deletions(-)

diff --git a/drivers/ata/pata_fsl.c b/drivers/ata/pata_fsl.c
index a605c6e..40b8153 100644
--- a/drivers/ata/pata_fsl.c
+++ b/drivers/ata/pata_fsl.c
@@ -30,10 +30,6 @@
 
 #define DRV_NAME "pata_fsl"
 
-static unsigned int *adma_des_table;
-static struct regulator *io_reg;
-static struct regulator *core_reg;
-
 struct pata_fsl_priv {
 	int ultra;
 	u8 *fsl_ata_regs;
@@ -42,12 +38,27 @@ struct pata_fsl_priv {
 	int dma_wchan;
 	int dma_done;
 	int dma_dir;
-	unsigned int adma_des_tp;
+	unsigned int adma_des_paddr;
+	unsigned int *adma_des_tp;
+};
+
+struct adma_bd {
+	unsigned char *sg_buf;
+	unsigned char *work_buf;
+	unsigned int dma_address;
+	int length;
+};
+
+struct adma_bulk {
+	struct adma_bd adma_bd_table[MXC_IDE_DMA_BD_NR];
+	struct ata_queued_cmd *qc;
+	int sg_ents;
+	int reserved[2];
 };
 
 enum {
 	/* various constants */
-	FSL_ATA_MAX_SG_LEN = 65534,
+	FSL_ATA_MAX_SG_LEN = ATA_DMA_BOUNDARY << 1,
 
 	/* offsets to registers */
 	FSL_ATA_TIMING_REGS = 0x00,
@@ -110,20 +121,21 @@ static struct {
 	short t0, t1, t2_8, t2_16, t2i, t4, t9, tA;
 } pio_specs[] = {
 	[0] = {
-		.t0 = 600, .t1 = 70, .t2_8 = 290, .t2_16 = 165, .t2i = 0,
-		.t4 = 30, .t9 = 20, .tA = 50,},
+	.t0 = 600, .t1 = 70, .t2_8 = 290, .t2_16 = 165, .t2i = 0, .t4 =
+		30, .t9 = 20, .tA = 50,},
 	[1] = {
-		.t0 = 383, .t1 = 50, .t2_8 = 290, .t2_16 = 125, .t2i = 0,
-		.t4 = 20 , .t9 = 15, .tA = 50,},
+	.t0 = 383, .t1 = 50, .t2_8 = 290, .t2_16 = 125, .t2i = 0, .t4 =
+		20, .t9 = 15, .tA = 50,},
 	[2] = {
-		.t0 = 240, .t1 = 30, .t2_8 = 290, .t2_16 = 100, .t2i = 0,
-		.t4 = 15, .t9 = 10, .tA = 50,},
+	.t0 = 240, .t1 = 30, .t2_8 = 290, .t2_16 = 100, .t2i = 0, .t4 =
+		15, .t9 = 10, .tA = 50,},
 	[3] = {
-		.t0 = 180, .t1 = 30, .t2_8 = 80, .t2_16 = 80, .t2i = 0,
-		.t4 = 10, .t9 = 10, .tA = 50,},
+	.t0 = 180, .t1 = 30, .t2_8 = 80, .t2_16 = 80, .t2i = 0, .t4 =
+		10, .t9 = 10, .tA = 50,},
 	[4] = {
-		.t0 = 120, .t1 = 25, .t2_8 = 70, .t2_16 = 70, .t2i = 0,
-		.t4 = 10, .t9 = 10, .tA = 50,},};
+	.t0 = 120, .t1 = 25, .t2_8 = 70, .t2_16 = 70, .t2i = 0, .t4 =
+		10, .t9 = 10, .tA = 50,},
+	};
 
 #define NR_PIO_SPECS (sizeof pio_specs / sizeof pio_specs[0])
 
@@ -138,14 +150,15 @@ static struct {
 	short t0M, tD, tH, tJ, tKW, tM, tN, tJNH;
 } mdma_specs[] = {
 	[0] = {
-		.t0M = 480, .tD = 215, .tH = 20, .tJ = 20, .tKW = 215, .tM = 50,
-		.tN =  15, .tJNH = 20,},
+	.t0M = 480, .tD = 215, .tH = 20, .tJ = 20, .tKW = 215, .tM = 50, .tN =
+		15, .tJNH = 20,},
 	[1] = {
-		.t0M = 150, .tD = 80, .tH = 15, .tJ = 5, .tKW = 50, .tM = 30,
-		.tN = 10, .tJNH = 15,},
+	.t0M = 150, .tD = 80, .tH = 15, .tJ = 5, .tKW = 50, .tM = 30, .tN =
+		10, .tJNH = 15,},
 	[2] = {
-		.t0M = 120, .tD = 70, .tH = 10, .tJ = 5, .tKW = 25, .tM = 25,
-		.tN = 10, .tJNH = 10,},};
+	.t0M = 120, .tD = 70, .tH = 10, .tJ = 5, .tKW = 25, .tM = 25, .tN =
+		10, .tJNH = 10,},
+	};
 
 #define NR_MDMA_SPECS (sizeof mdma_specs / sizeof mdma_specs[0])
 
@@ -161,41 +174,42 @@ static struct {
 	    tMLI, tAZ, tZAH, tENV_min, tSR, tRFS, tRP, tACK, tSS, tDZFS;
 } udma_specs[] = {
 	[0] = {
-		.t2CYC = 235, .tCYC = 114, .tDS = 15, .tDH = 5, .tDVS = 70,
-		.tDVH = 6, .tCVS = 70, .tCVH = 6, .tFS_min = 0, .tLI_max =
+	.t2CYC = 235, .tCYC = 114, .tDS = 15, .tDH = 5, .tDVS = 70, .tDVH =
+		6, .tCVS = 70, .tCVH = 6, .tFS_min = 0, .tLI_max =
 		100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
 		20, .tSR = 50, .tRFS = 75, .tRP = 160, .tACK = 20, .tSS =
 		50, .tDZFS = 80,},
 	[1] = {
-		.t2CYC = 156, .tCYC = 75, .tDS = 10, .tDH = 5, .tDVS = 48,
-		.tDVH = 6, .tCVS = 48, .tCVH = 6, .tFS_min = 0, .tLI_max =
-		    100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
-		    20, .tSR = 30, .tRFS = 70, .tRP = 125, .tACK = 20, .tSS =
-		    50, .tDZFS = 63,},
+	.t2CYC = 156, .tCYC = 75, .tDS = 10, .tDH = 5, .tDVS = 48, .tDVH =
+		6, .tCVS = 48, .tCVH = 6, .tFS_min = 0, .tLI_max =
+		100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
+		20, .tSR = 30, .tRFS = 70, .tRP = 125, .tACK = 20, .tSS =
+		50, .tDZFS = 63,},
 	[2] = {
-		.t2CYC = 117, .tCYC = 55, .tDS = 7, .tDH = 5, .tDVS = 34,
-		.tDVH = 6, .tCVS = 34, .tCVH = 6, .tFS_min = 0, .tLI_max =
-		    100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
-		    20, .tSR = 20, .tRFS = 60, .tRP = 100, .tACK = 20, .tSS =
-		    50, .tDZFS = 47,},
+	.t2CYC = 117, .tCYC = 55, .tDS = 7, .tDH = 5, .tDVS = 34, .tDVH =
+		6, .tCVS = 34, .tCVH = 6, .tFS_min = 0, .tLI_max =
+		100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
+		20, .tSR = 20, .tRFS = 60, .tRP = 100, .tACK = 20, .tSS =
+		50, .tDZFS = 47,},
 	[3] = {
-		.t2CYC = 86, .tCYC = 39, .tDS = 7, .tDH = 5, .tDVS = 20,
-		.tDVH = 6, .tCVS = 20, .tCVH = 6, .tFS_min = 0, .tLI_max =
-		    100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
-		    20, .tSR = 20, .tRFS = 60, .tRP = 100, .tACK = 20, .tSS =
-		    50, .tDZFS = 35,},
+	.t2CYC = 86, .tCYC = 39, .tDS = 7, .tDH = 5, .tDVS = 20, .tDVH =
+		6, .tCVS = 20, .tCVH = 6, .tFS_min = 0, .tLI_max =
+		100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
+		20, .tSR = 20, .tRFS = 60, .tRP = 100, .tACK = 20, .tSS =
+		50, .tDZFS = 35,},
 	[4] = {
-		.t2CYC = 57, .tCYC = 25, .tDS = 5, .tDH = 5, .tDVS = 7,
-		.tDVH = 6, .tCVS = 7, .tCVH = 6, .tFS_min = 0, .tLI_max =
-		    100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
-		    20, .tSR = 50, .tRFS = 60, .tRP = 100, .tACK = 20, .tSS =
-		    50, .tDZFS = 25,},
+	.t2CYC = 57, .tCYC = 25, .tDS = 5, .tDH = 5, .tDVS = 7, .tDVH =
+		6, .tCVS = 7, .tCVH = 6, .tFS_min = 0, .tLI_max =
+		100, .tMLI = 20, .tAZ = 10, .tZAH = 20, .tENV_min =
+		20, .tSR = 50, .tRFS = 60, .tRP = 100, .tACK = 20, .tSS =
+		50, .tDZFS = 25,},
 	[5] = {
-		.t2CYC = 38, .tCYC = 17, .tDS = 4, .tDH = 5, .tDVS = 5,
-		.tDVH = 6, .tCVS = 10, .tCVH = 10, .tFS_min =
-		    0, .tLI_max = 75, .tMLI = 20, .tAZ = 10, .tZAH =
-		    20, .tENV_min = 20, .tSR = 20, .tRFS =
-		    50, .tRP = 85, .tACK = 20, .tSS = 50, .tDZFS = 40,},};
+	.t2CYC = 38, .tCYC = 17, .tDS = 4, .tDH = 5, .tDVS = 5, .tDVH =
+		6, .tCVS = 10, .tCVH = 10, .tFS_min =
+		0, .tLI_max = 75, .tMLI = 20, .tAZ = 10, .tZAH =
+		20, .tENV_min = 20, .tSR = 20, .tRFS =
+		50, .tRP = 85, .tACK = 20, .tSS = 50, .tDZFS = 40,},
+};
 
 #define NR_UDMA_SPECS (sizeof udma_specs / sizeof udma_specs[0])
 
@@ -208,6 +222,10 @@ struct fsl_ata_time_regs {
 	u8 time_dvs, time_cvh, time_ss, time_cyc;
 };
 
+static struct regulator *io_reg;
+static struct regulator *core_reg;
+static struct adma_bulk adma_info;
+
 static void
 update_timing_config(struct fsl_ata_time_regs *tp, struct ata_host *host)
 {
@@ -314,6 +332,72 @@ static int pata_fsl_port_start(struct ata_port *ap)
 	return 0;
 }
 
+static void pata_adma_bulk_unmap(struct ata_queued_cmd *qc)
+{
+	int i;
+	struct adma_bd *bdp = adma_info.adma_bd_table;
+	if (adma_info.qc == NULL)
+		return;
+	BUG_ON(adma_info.qc != qc);
+
+	adma_info.qc = NULL;
+
+	for (i = 0; i < adma_info.sg_ents; i++) {
+		if (bdp->work_buf != bdp->sg_buf) {
+			if (qc->dma_dir == DMA_FROM_DEVICE) {
+				memcpy(bdp->sg_buf, bdp->work_buf, bdp->length);
+				dma_cache_maint(bdp->sg_buf, bdp->length,
+						DMA_FROM_DEVICE);
+			}
+			dma_free_coherent(qc->ap->dev, bdp->length,
+					  bdp->work_buf, bdp->dma_address);
+		}
+		bdp->work_buf = bdp->sg_buf = NULL;
+		bdp++;
+	}
+}
+
+static int pata_adma_bulk_map(struct ata_queued_cmd *qc)
+{
+	struct scatterlist *sg;
+	struct adma_bd *bdp = adma_info.adma_bd_table;
+
+	BUG_ON(adma_info.qc);
+
+	adma_info.qc = qc;
+	adma_info.sg_ents = 0;
+
+	ata_for_each_sg(sg, qc) {
+		/*
+		 * The ADMA mode is used setup the ADMA descriptor table
+		 */
+		bdp->sg_buf = sg_virt(sg);
+		bdp->length = sg->length;
+		if (sg->dma_address & 0xFFF) {
+			bdp->work_buf =
+			    dma_alloc_coherent(qc->ap->dev, bdp->length,
+					       &bdp->dma_address, GFP_KERNEL);
+			if (!bdp->work_buf) {
+				printk(KERN_WARNING
+				       "can not allocate aligned buffer\n");
+				goto fail;
+			}
+			if (qc->dma_dir == DMA_TO_DEVICE)
+				memcpy(bdp->work_buf, bdp->sg_buf, bdp->length);
+		} else {
+			bdp->work_buf = bdp->sg_buf;
+			bdp->dma_address = sg->dma_address;
+		}
+
+		adma_info.sg_ents++;
+		bdp++;
+	}
+	return 0;
+      fail:
+	pata_adma_bulk_unmap(qc);
+	return -1;
+}
+
 static void dma_callback(void *arg, int error_status, unsigned int count)
 {
 	struct ata_port *ap = arg;
@@ -353,7 +437,6 @@ static irqreturn_t pata_fsl_adma_intr(int irq, void *dev_instance)
 		__raw_writel(i, ata_regs + FSL_ATA_CONTROL);
 	}
 
-	/* TODO: make _irqsave conditional on x86 PCI IDE legacy mode */
 	spin_lock_irqsave(&host->lock, flags);
 
 	for (i = 0; i < host->n_ports; i++) {
@@ -364,6 +447,9 @@ static irqreturn_t pata_fsl_adma_intr(int irq, void *dev_instance)
 			struct ata_queued_cmd *qc;
 
 			qc = ata_qc_from_tag(ap, ap->link.active_tag);
+			raw_local_irq_restore(flags);
+			pata_adma_bulk_unmap(qc);
+			raw_local_irq_save(flags);
 			if (qc && (!(qc->tf.flags & ATA_TFLAG_POLLING)) &&
 			    (qc->flags & ATA_QCFLAG_ACTIVE))
 				handled |= ata_host_intr(ap, qc);
@@ -377,7 +463,6 @@ static irqreturn_t pata_fsl_adma_intr(int irq, void *dev_instance)
 
 static void pata_fsl_bmdma_setup(struct ata_queued_cmd *qc)
 {
-	int nr_sg = 0;
 	int chan, i;
 	int dma_mode = 0, dma_ultra;
 	u32 ata_control;
@@ -385,7 +470,6 @@ static void pata_fsl_bmdma_setup(struct ata_queued_cmd *qc)
 	struct pata_fsl_priv *priv = ap->host->private_data;
 	u8 *ata_regs = priv->fsl_ata_regs;
 	struct fsl_ata_platform_data *plat = ap->dev->platform_data;
-	struct scatterlist tmp[plat->max_sg], *tsg, *sg;
 	int err;
 
 	priv->dma_dir = qc->dma_dir;
@@ -397,7 +481,7 @@ static void pata_fsl_bmdma_setup(struct ata_queued_cmd *qc)
 
 	ata_control = FSL_ATA_CTRL_FIFO_RST_B |
 	    FSL_ATA_CTRL_ATA_RST_B | FSL_ATA_CTRL_DMA_PENDING | dma_ultra;
-	if (1 == plat->adma_flag)
+	if (plat->adma_flag)
 		ata_control |= FSL_ATA_CTRL_DMA_32ADMA |
 		    FSL_ATA_CTRL_DMA_ENABLE;
 
@@ -414,7 +498,7 @@ static void pata_fsl_bmdma_setup(struct ata_queued_cmd *qc)
 	__raw_writel(ata_control, ata_regs + FSL_ATA_CONTROL);
 	__raw_writel(plat->fifo_alarm, ata_regs + FSL_ATA_FIFO_ALARM);
 
-	if (1 == plat->adma_flag) {
+	if (plat->adma_flag) {
 		i = FSL_ATA_INTR_DMA_TRANS_OVER | FSL_ATA_INTR_DMA_ERR;
 		__raw_writel(FSL_ATA_INTR_ATA_INTRQ2 | i,
 			     ata_regs + FSL_ATA_INT_EN);
@@ -430,49 +514,42 @@ static void pata_fsl_bmdma_setup(struct ata_queued_cmd *qc)
 	/*
 	 * Copy the sg list to an array.
 	 */
-	tsg = tmp;
-	ata_for_each_sg(sg, qc) {
-		memcpy(tsg, sg, sizeof *sg);
-		tsg++;
-		nr_sg++;
-	}
-
-	if (1 == plat->adma_flag) {
-		tsg = tmp;
-		/*
-		 * The ADMA mode is used setup the ADMA descriptor table
-		 */
-		for (i = 0; i < nr_sg; i++) {
-			if (tsg->dma_address & 0xFFF)
-				printk(KERN_ERR "ADMA addr isn't 4K aligned\n");
-			adma_des_table[2 * i] = tsg->length << 12;
-			adma_des_table[2 * i] |= FSL_ADMA_DES_ATTR_SET;
-			adma_des_table[2 * i] |= FSL_ADMA_DES_ATTR_VALID;
-			adma_des_table[2 * i + 1] = tsg->dma_address;
-			adma_des_table[2 * i + 1] |= FSL_ADMA_DES_ATTR_TRAN;
-			adma_des_table[2 * i + 1] |= FSL_ADMA_DES_ATTR_VALID;
-			if (nr_sg == (i + 1))
-				adma_des_table[2 * i + 1] |=
+	if (plat->adma_flag) {
+		struct adma_bd *bdp = adma_info.adma_bd_table;
+		pata_adma_bulk_map(qc);
+		for (i = 0; i < adma_info.sg_ents; i++) {
+			priv->adma_des_tp[i << 1] = bdp->length << 12;
+			priv->adma_des_tp[i << 1] |= FSL_ADMA_DES_ATTR_SET;
+			priv->adma_des_tp[i << 1] |= FSL_ADMA_DES_ATTR_VALID;
+			priv->adma_des_tp[(i << 1) + 1] = bdp->dma_address;
+			priv->adma_des_tp[(i << 1) + 1] |=
+			    FSL_ADMA_DES_ATTR_TRAN;
+			priv->adma_des_tp[(i << 1) + 1] |=
+			    FSL_ADMA_DES_ATTR_VALID;
+			if (adma_info.sg_ents == (i + 1))
+				priv->adma_des_tp[(i << 1) + 1] |=
 				    FSL_ADMA_DES_ATTR_END;
-			tsg++;
+			bdp++;
 		}
-
-		/*
-		 * The ADMA mode is used, set the ADMA Sysetem Address
-		 * burst length, block cnt.
-		 */
 		__raw_writel((qc->nbytes / qc->sect_size), ata_regs +
 			     FSL_ATA_BLOCK_COUNT);
 		__raw_writel(plat->fifo_alarm, ata_regs + FSL_ATA_BURST_LENGTH);
-		__raw_writel(priv->adma_des_tp,
+		__raw_writel(priv->adma_des_paddr,
 			     ata_regs + FSL_ATA_ADMA_SYS_ADDR);
 	} else {
+		int nr_sg = 0;
+		struct scatterlist tmp[MXC_IDE_DMA_BD_NR], *tsg, *sg;
+		tsg = tmp;
+		ata_for_each_sg(sg, qc) {
+			memcpy(tsg, sg, sizeof(*sg));
+			tsg++;
+			nr_sg++;
+		}
 		err = mxc_dma_sg_config(chan, tmp, nr_sg, 0, dma_mode);
 		if (err)
 			printk(KERN_ERR "pata_fsl_bmdma_setup: error %d\n",
 			       err);
 	}
-
 }
 
 static void pata_fsl_bmdma_start(struct ata_queued_cmd *qc)
@@ -516,7 +593,7 @@ static void pata_fsl_bmdma_stop(struct ata_queued_cmd *qc)
 	struct fsl_ata_platform_data *plat = ap->dev->platform_data;
 	unsigned i;
 
-	if (1 == plat->adma_flag) {
+	if (plat->adma_flag) {
 		/* The adma mode is used, set dma_start_stop to 0 */
 		i = FSL_ATA_CTRL_DMA_32ADMA | FSL_ATA_CTRL_DMA_ENABLE;
 		__raw_writel((i | __raw_readl(ata_regs + FSL_ATA_CONTROL)) &
@@ -525,7 +602,9 @@ static void pata_fsl_bmdma_stop(struct ata_queued_cmd *qc)
 	}
 
 	/* do a dummy read as in ata_bmdma_stop */
+#if 0
 	ata_altstatus(ap);
+#endif
 }
 
 static u8 pata_fsl_bmdma_status(struct ata_port *ap)
@@ -558,7 +637,7 @@ static void pata_fsl_dma_init(struct ata_port *ap)
 		   priv->dma_wchan);
 	return;
 
-err_out:
+      err_out:
 	ap->mwdma_mask = 0;
 	ap->udma_mask = 0;
 	mxc_dma_free(priv->dma_rchan);
@@ -566,6 +645,7 @@ err_out:
 	kfree(priv);
 }
 
+#if 0
 static u8 pata_fsl_irq_ack(struct ata_port *ap, unsigned int chk_drq)
 {
 	unsigned int bits = chk_drq ? ATA_BUSY | ATA_DRQ : ATA_BUSY;
@@ -578,6 +658,7 @@ static u8 pata_fsl_irq_ack(struct ata_port *ap, unsigned int chk_drq)
 
 	return status;
 }
+#endif
 
 static void ata_dummy_noret(struct ata_port *ap)
 {
@@ -716,17 +797,18 @@ static int __devinit pata_fsl_probe(struct platform_device *pdev)
 	ap->mwdma_mask = plat->mwdma_mask;	/* support mdma 0~2 */
 	ap->udma_mask = plat->udma_mask;
 	pata_fsl_sht.sg_tablesize = plat->max_sg;
-
 	fsl_setup_port(&ap->ioaddr);
 
-	if (1 == plat->adma_flag) {
-		adma_des_table = kcalloc((2 * MXC_IDE_DMA_BD_NR + 1),
-					 sizeof(unsigned int), GFP_DMA);
-		if (adma_des_table == NULL) {
+	if (plat->adma_flag) {
+		priv->adma_des_tp =
+		    dma_alloc_coherent(&(pdev->dev),
+				       (2 * MXC_IDE_DMA_BD_NR) *
+				       sizeof(unsigned int),
+				       &(priv->adma_des_paddr), GFP_DMA);
+		if (priv->adma_des_tp == NULL) {
 			ret = -ENOMEM;
 			goto err1;
 		}
-		priv->adma_des_tp = virt_to_phys(adma_des_table);
 	}
 	/*
 	 * Do platform-specific initialization (e.g. allocate pins,
@@ -736,7 +818,7 @@ static int __devinit pata_fsl_probe(struct platform_device *pdev)
 	 */
 	if (plat->init && plat->init(pdev)) {
 		ret = -ENODEV;
-		goto err1;
+		goto err2;
 	}
 
 	priv->clk = clk_get(&pdev->dev, "ata_clk");
@@ -778,35 +860,36 @@ static int __devinit pata_fsl_probe(struct platform_device *pdev)
 	 */
 	int_enable = FSL_ATA_INTR_DMA_TRANS_OVER | FSL_ATA_INTR_DMA_ERR |
 	    FSL_ATA_INTR_ATA_INTRQ2;
-	if (1 == plat->adma_flag)
+	if (plat->adma_flag)
 		__raw_writel(int_enable, ata_regs + FSL_ATA_INT_EN);
 	else
 		__raw_writel(FSL_ATA_INTR_ATA_INTRQ2,
 			     ata_regs + FSL_ATA_INT_EN);
 
 	/* activate */
-	if (1 == plat->adma_flag)
+	if (plat->adma_flag)
 		ret = ata_host_activate(host, platform_get_irq(pdev, 0),
 					pata_fsl_adma_intr, 0, &pata_fsl_sht);
 	else
 		ret = ata_host_activate(host, platform_get_irq(pdev, 0),
 					ata_interrupt, 0, &pata_fsl_sht);
 
-	if (ret < 0)
-		goto err2;
-
-	return ret;
+	if (!ret)
+		return ret;
 
-err2:
 	clk_disable(priv->clk);
 	regulator_disable(core_reg);
 	regulator_disable(io_reg);
-	if (1 == plat->adma_flag)
-		kfree(adma_des_table);
-err1:
+      err2:
+	if (plat->adma_flag && priv->adma_des_tp)
+		dma_free_coherent(&(pdev->dev),
+				  (2 * MXC_IDE_DMA_BD_NR +
+				   1) * sizeof(unsigned int), priv->adma_des_tp,
+				  priv->adma_des_paddr);
+      err1:
 	iounmap(ata_regs);
 	kfree(priv);
-err0:
+      err0:
 	ata_host_detach(host);
 	return ret;
 
@@ -849,8 +932,11 @@ static int __devexit pata_fsl_remove(struct platform_device *pdev)
 	if (plat->exit)
 		plat->exit();
 
-	if (1 == plat->adma_flag)
-		kfree(adma_des_table);
+	if (plat->adma_flag && priv->adma_des_tp)
+		dma_free_coherent(&(pdev->dev),
+				  (2 * MXC_IDE_DMA_BD_NR) *
+				  sizeof(unsigned int), priv->adma_des_tp,
+				  priv->adma_des_paddr);
 	iounmap(ata_regs);
 
 	kfree(priv);
-- 
1.5.4.4

