From cf8599f5c5f136e3ea83817ce5ab515024d55319 Mon Sep 17 00:00:00 2001
From: Rob Herring <r.herring@freescale.com>
Date: Mon, 18 Feb 2008 11:59:50 -0600
Subject: [PATCH] ENGR00061932 Remove the platform specific #ifdefs in the SPI driver

Description:
Remove the platform specific #ifdefs found inside the SPI driver

Signed-off-by: Nancy Chen <Nancy.Chen@freescale.com>
---
 drivers/spi/mxc_spi.c         |  511 +++++++++++++++++++++++++++--------------
 drivers/spi/mxc_spi.h         |   86 -------
 drivers/spi/mxc_spi_rev_0_0.h |   88 -------
 drivers/spi/mxc_spi_rev_2_3.h |   88 -------
 4 files changed, 334 insertions(+), 439 deletions(-)

diff --git a/drivers/spi/mxc_spi.c b/drivers/spi/mxc_spi.c
index 04c3804..b1ddc44 100644
--- a/drivers/spi/mxc_spi.c
+++ b/drivers/spi/mxc_spi.c
@@ -33,22 +33,42 @@
 #include <linux/delay.h>
 #include <linux/types.h>
 #include <linux/clk.h>
-
 #include <linux/spi/spi.h>
 #include <linux/spi/spi_bitbang.h>
-
 #include <asm/hardware.h>
-#include <asm/irq.h>
-#include <asm/io.h>
-#include <asm/arch/gpio.h>
-
-#if defined(CONFIG_ARCH_MX27)
-#include "mxc_spi_rev_0_0.h"
-#elif defined(CONFIG_ARCH_MX37)
-#include "mxc_spi_rev_2_3.h"
-#else
-#include "mxc_spi.h"
-#endif
+
+#define MXC_CSPIRXDATA		0x00
+#define MXC_CSPITXDATA		0x04
+#define MXC_CSPICTRL		0x08
+#define MXC_CSPICONFIG		0x08
+#define MXC_CSPIINT			0x0C
+
+#define MXC_CSPICTRL_DISABLE	0x0
+#define MXC_CSPICTRL_SLAVE	0x0
+#define MXC_CSPICTRL_CSMASK	0x3
+#define MXC_CSPICTRL_SMC	(1 << 3)
+
+#define MXC_CSPIINT_TEEN_SHIFT		0
+#define MXC_CSPIINT_THEN_SHIFT	1
+#define MXC_CSPIINT_TFEN_SHIFT		2
+#define MXC_CSPIINT_RREN_SHIFT		3
+#define MXC_CSPIINT_RHEN_SHIFT       4
+#define MXC_CSPIINT_RFEN_SHIFT        5
+#define MXC_CSPIINT_ROEN_SHIFT        6
+
+#define MXC_HIGHPOL	0x0
+#define MXC_NOPHA	0x0
+#define MXC_LOWSSPOL		0x0
+
+#define MXC_CSPISTAT_TE		0
+#define MXC_CSPISTAT_TH		1
+#define MXC_CSPISTAT_TF		2
+#define MXC_CSPISTAT_RR		3
+#define MXC_CSPISTAT_RH		4
+#define MXC_CSPISTAT_RF		5
+#define MXC_CSPISTAT_RO		6
+
+#define MXC_CSPIPERIOD_32KHZ	(1 << 15)
 
 /*!
  * @struct mxc_spi_unique_def
@@ -56,38 +76,70 @@
  * SPI master controller hardware version
  */
 struct mxc_spi_unique_def {
-	/*!
-	 * Width of valid bits in MXC_CSPIINT.
-	 */
+	/* Width of valid bits in MXC_CSPIINT */
 	unsigned int intr_bit_shift;
-	/*!
-	 * Chip Select shift.
-	 */
+	/* Chip Select shift */
 	unsigned int cs_shift;
-	/*!
-	 * Bit count shift.
-	 */
+	/* Bit count shift */
 	unsigned int bc_shift;
-	/*!
-	 * Bit count mask.
-	 */
+	/* Bit count mask */
 	unsigned int bc_mask;
-	/*!
-	 * Data Control shift.
-	 */
+	/* Data Control shift */
 	unsigned int drctrl_shift;
-	/*!
-	 * Transfer Complete shift.
-	 */
+	/* Transfer Complete shift */
 	unsigned int xfer_complete;
-	/*!
-	 * Bit counnter overflow shift.
-	 */
+	/* Bit counnter overflow shift */
 	unsigned int bc_overflow;
-	/*!
-	 * FIFO Size.
-	 */
+	/* FIFO Size */
 	unsigned int fifo_size;
+	/* Control reg address */
+	unsigned int ctrl_reg_addr;
+	/* Status reg address */
+	unsigned int stat_reg_addr;
+	/* Period reg address */
+	unsigned int period_reg_addr;
+	/* Test reg address */
+	unsigned int test_reg_addr;
+	/* Reset reg address */
+	unsigned int reset_reg_addr;
+	/* SPI mode mask */
+	unsigned int mode_mask;
+	/* SPI enable */
+	unsigned int spi_enable;
+	/* XCH bit */
+	unsigned int xch;
+	/* Spi mode shift */
+	unsigned int mode_shift;
+	/* Spi master mode enable */
+	unsigned int master_enable;
+	/* TX interrupt enable diff */
+	unsigned int tx_inten_dif;
+	/* RX interrupt enable bit diff */
+	unsigned int rx_inten_dif;
+	/* Interrupt status diff */
+	unsigned int int_status_dif;
+	/* Low pol shift */
+	unsigned int low_pol_shift;
+	/* Phase shift */
+	unsigned int pha_shift;
+	/* SS control shift */
+	unsigned int ss_ctrl_shift;
+	/* SS pol shift */
+	unsigned int ss_pol_shift;
+	/* Maximum data rate */
+	unsigned int max_data_rate;
+	/* Data mask */
+	unsigned int data_mask;
+	/* Data shift */
+	unsigned int data_shift;
+	/* Loopback control */
+	unsigned int lbc;
+	/* RX count off */
+	unsigned int rx_cnt_off;
+	/* RX count mask */
+	unsigned int rx_cnt_mask;
+	/* Reset start */
+	unsigned int reset_start;
 };
 
 struct mxc_spi;
@@ -97,26 +149,15 @@ struct mxc_spi;
  * used in data transfers.
  */
 struct mxc_spi_xfer {
-	/*!
-	 * Transmit buffer.
-	 */
+	/* Transmit buffer */
 	const void *tx_buf;
-	/*!
-	 * Receive buffer.
-	 */
+	/* Receive buffer */
 	void *rx_buf;
-	/*!
-	 * Data transfered count.
-	 */
+	/* Data transfered count */
 	unsigned int count;
-
-	/*!
-	 * Function to read the FIFO data to rx_buf.
-	 */
+	/* Function to read the FIFO data to rx_buf */
 	void (*rx_get) (struct mxc_spi *, u32 val);
-	/*!
-	 * Function to get the data to be written to FIFO.
-	 */
+	/* Function to get the data to be written to FIFO */
 	 u32(*tx_get) (struct mxc_spi *);
 };
 
@@ -128,42 +169,34 @@ struct mxc_spi_xfer {
  * low-level driver.
  */
 struct mxc_spi {
-	/*!
-	 * SPI Master and a simple I/O queue runner.
-	 */
+	/* SPI Master and a simple I/O queue runner */
 	struct spi_bitbang mxc_bitbang;
-	/*!
-	 * Completion flags used in data transfers.
-	 */
+	/* Completion flags used in data transfers */
 	struct completion xfer_done;
-	/*!
-	 * Data transfer structure.
-	 */
+	/* Data transfer structure */
 	struct mxc_spi_xfer transfer;
-	/*!
-	 * Resource structure, which will maintain base addresses and IRQs.
-	 */
+	/* Resource structure, which will maintain base addresses and IRQs */
 	struct resource *res;
-	/*!
-	 * Base address of CSPI, used in readl and writel.
-	 */
+	/* Base address of CSPI, used in readl and writel */
 	void *base;
-	/*!
-	 * CSPI IRQ number.
-	 */
+	/* CSPI IRQ number */
 	int irq;
-	/*!
-	 * CSPI Clock id.
-	 */
+	/* CSPI Clock id */
 	struct clk *clk;
-	/*!
-	 * CSPI input clock SCLK.
-	 */
+	/* CSPI input clock SCLK */
 	unsigned long spi_ipg_clk;
-	/*!
-	 * CSPI registers' bit pattern.
-	 */
+	/* CSPI registers' bit pattern */
 	struct mxc_spi_unique_def *spi_ver_def;
+	/* Control reg address */
+	void *ctrl_addr;
+	/* Status reg address */
+	void *stat_addr;
+	/* Period reg address */
+	void *period_addr;
+	/* Test reg address */
+	void *test_addr;
+	/* Reset reg address */
+	void *reset_addr;
 };
 
 #ifdef CONFIG_SPI_MXC_TEST_LOOPBACK
@@ -218,6 +251,30 @@ static struct mxc_spi_unique_def spi_ver_2_3 = {
 	.xfer_complete = (1 << 7),
 	.bc_overflow = 0,
 	.fifo_size = 64,
+	.ctrl_reg_addr = 4,
+	.stat_reg_addr = 0x18,
+	.period_reg_addr = 0x1C,
+	.test_reg_addr = 0x20,
+	.reset_reg_addr = 0x0,
+	.mode_mask = 0xF,
+	.spi_enable = 0x1,
+	.xch = (1 << 2),
+	.mode_shift = 4,
+	.master_enable = 0,
+	.tx_inten_dif = 0,
+	.rx_inten_dif = 0,
+	.int_status_dif = 0,
+	.low_pol_shift = 4,
+	.pha_shift = 0,
+	.ss_ctrl_shift = 8,
+	.ss_pol_shift = 12,
+	.max_data_rate = 0xF,
+	.data_mask = 0xFF,
+	.data_shift = 8,
+	.lbc = (1 << 31),
+	.rx_cnt_off = 8,
+	.rx_cnt_mask = (0x7F << 8),
+	.reset_start = 0,
 };
 
 static struct mxc_spi_unique_def spi_ver_0_7 = {
@@ -229,6 +286,30 @@ static struct mxc_spi_unique_def spi_ver_0_7 = {
 	.xfer_complete = (1 << 7),
 	.bc_overflow = 0,
 	.fifo_size = 8,
+	.ctrl_reg_addr = 0,
+	.stat_reg_addr = 0x14,
+	.period_reg_addr = 0x18,
+	.test_reg_addr = 0x1C,
+	.reset_reg_addr = 0x0,
+	.mode_mask = 0x1,
+	.spi_enable = 0x1,
+	.xch = (1 << 2),
+	.mode_shift = 1,
+	.master_enable = 1 << 1,
+	.tx_inten_dif = 0,
+	.rx_inten_dif = 0,
+	.int_status_dif = 0,
+	.low_pol_shift = 4,
+	.pha_shift = 5,
+	.ss_ctrl_shift = 6,
+	.ss_pol_shift = 7,
+	.max_data_rate = 0x7,
+	.data_mask = 0x7,
+	.data_shift = 16,
+	.lbc = (1 << 14),
+	.rx_cnt_off = 4,
+	.rx_cnt_mask = (0xF << 4),
+	.reset_start = 1,
 };
 
 static struct mxc_spi_unique_def spi_ver_0_5 = {
@@ -240,6 +321,30 @@ static struct mxc_spi_unique_def spi_ver_0_5 = {
 	.xfer_complete = (1 << 8),
 	.bc_overflow = (1 << 7),
 	.fifo_size = 8,
+	.ctrl_reg_addr = 0,
+	.stat_reg_addr = 0x14,
+	.period_reg_addr = 0x18,
+	.test_reg_addr = 0x1C,
+	.reset_reg_addr = 0x0,
+	.mode_mask = 0x1,
+	.spi_enable = 0x1,
+	.xch = (1 << 2),
+	.mode_shift = 1,
+	.master_enable = 1 << 1,
+	.tx_inten_dif = 0,
+	.rx_inten_dif = 0,
+	.int_status_dif = 0,
+	.low_pol_shift = 4,
+	.pha_shift = 5,
+	.ss_ctrl_shift = 6,
+	.ss_pol_shift = 7,
+	.max_data_rate = 0x7,
+	.data_mask = 0x7,
+	.data_shift = 16,
+	.lbc = (1 << 14),
+	.rx_cnt_off = 4,
+	.rx_cnt_mask = (0xF << 4),
+	.reset_start = 1,
 };
 
 static struct mxc_spi_unique_def spi_ver_0_4 = {
@@ -251,6 +356,30 @@ static struct mxc_spi_unique_def spi_ver_0_4 = {
 	.xfer_complete = (1 << 8),
 	.bc_overflow = (1 << 7),
 	.fifo_size = 8,
+	.ctrl_reg_addr = 0,
+	.stat_reg_addr = 0x14,
+	.period_reg_addr = 0x18,
+	.test_reg_addr = 0x1C,
+	.reset_reg_addr = 0x0,
+	.mode_mask = 0x1,
+	.spi_enable = 0x1,
+	.xch = (1 << 2),
+	.mode_shift = 1,
+	.master_enable = 1 << 1,
+	.tx_inten_dif = 0,
+	.rx_inten_dif = 0,
+	.int_status_dif = 0,
+	.low_pol_shift = 4,
+	.pha_shift = 5,
+	.ss_ctrl_shift = 6,
+	.ss_pol_shift = 7,
+	.max_data_rate = 0x7,
+	.data_mask = 0x7,
+	.data_shift = 16,
+	.lbc = (1 << 14),
+	.rx_cnt_off = 4,
+	.rx_cnt_mask = (0xF << 4),
+	.reset_start = 1,
 };
 
 static struct mxc_spi_unique_def spi_ver_0_0 = {
@@ -262,6 +391,30 @@ static struct mxc_spi_unique_def spi_ver_0_0 = {
 	.xfer_complete = (1 << 3),
 	.bc_overflow = (1 << 8),
 	.fifo_size = 8,
+	.ctrl_reg_addr = 0,
+	.stat_reg_addr = 0x0C,
+	.period_reg_addr = 0x14,
+	.test_reg_addr = 0x10,
+	.reset_reg_addr = 0x1C,
+	.mode_mask = 0x1,
+	.spi_enable = (1 << 10),
+	.xch = (1 << 9),
+	.mode_shift = 11,
+	.master_enable = 1 << 11,
+	.tx_inten_dif = 9,
+	.rx_inten_dif = 10,
+	.int_status_dif = 1,
+	.low_pol_shift = 5,
+	.pha_shift = 6,
+	.ss_ctrl_shift = 7,
+	.ss_pol_shift = 8,
+	.max_data_rate = 0x10,
+	.data_mask = 0x1F,
+	.data_shift = 14,
+	.lbc = (1 << 14),
+	.rx_cnt_off = 4,
+	.rx_cnt_mask = (0xF << 4),
+	.reset_start = 1,
 };
 
 extern void gpio_spi_active(int cspi_mod);
@@ -284,6 +437,7 @@ u32 mxc_spi_buf_tx_##type(struct mxc_spi *master_drv_data)\
 	master_drv_data->transfer.tx_buf = tx;\
 	return val;\
 }
+
 MXC_SPI_BUF_RX(u8)
     MXC_SPI_BUF_TX(u8)
     MXC_SPI_BUF_RX(u16)
@@ -305,9 +459,8 @@ static int spi_enable_interrupt(struct mxc_spi *master_data, unsigned int irqs)
 		return -1;
 	}
 
-	__raw_writel((irqs | __raw_readl(master_data->base + MXC_CSPIINT)),
-		     master_data->base + MXC_CSPIINT);
-
+	__raw_writel((irqs | __raw_readl(MXC_CSPIINT + master_data->ctrl_addr)),
+		     MXC_CSPIINT + master_data->ctrl_addr);
 	return 0;
 }
 
@@ -325,8 +478,9 @@ static int spi_disable_interrupt(struct mxc_spi *master_data, unsigned int irqs)
 		return -1;
 	}
 
-	__raw_writel((~irqs & __raw_readl(master_data->base + MXC_CSPIINT)),
-		     master_data->base + MXC_CSPIINT);
+	__raw_writel((~irqs &
+		      __raw_readl(MXC_CSPIINT + master_data->ctrl_addr)),
+		     MXC_CSPIINT + master_data->ctrl_addr);
 	return 0;
 }
 
@@ -348,11 +502,19 @@ static unsigned int spi_find_baudrate(struct mxc_spi *master_data,
 	divisor = (master_data->spi_ipg_clk + baud / 2) / baud;
 	while (divisor >>= 1)
 		shift++;
-	MXC_CSPICTRL_ADJUST_SHIFT(shift);
-	if (shift > MXC_CSPICTRL_MAXDATRATE)
-		shift = MXC_CSPICTRL_MAXDATRATE;
 
-	return (shift << MXC_CSPICTRL_DATASHIFT);
+	if (master_data->spi_ver_def == &spi_ver_0_0) {
+		shift = (shift - 1) * 2;
+	} else if (master_data->spi_ver_def == &spi_ver_2_3) {
+		shift = shift;
+	} else {
+		shift -= 2;
+	}
+
+	if (shift > master_data->spi_ver_def->max_data_rate)
+		shift = master_data->spi_ver_def->max_data_rate;
+
+	return (shift << master_data->spi_ver_def->data_shift);
 }
 
 /*!
@@ -377,7 +539,7 @@ static void spi_put_tx_data(void *base, unsigned int count,
 
 	ctrl_reg = __raw_readl(base + MXC_CSPICTRL);
 
-	ctrl_reg |= MXC_CSPICTRL_XCH;
+	ctrl_reg |= master_drv_data->spi_ver_def->xch;
 
 	__raw_writel(ctrl_reg, base + MXC_CSPICTRL);
 
@@ -396,10 +558,8 @@ void mxc_spi_chipselect(struct spi_device *spi, int is_active)
 	struct mxc_spi *master_drv_data;
 	struct mxc_spi_xfer *ptransfer;
 	struct mxc_spi_unique_def *spi_ver_def;
-	unsigned int ctrl_reg;
-	unsigned int config_reg;
-	unsigned int ctrl_mask;
-	unsigned int config_mask;
+	unsigned int ctrl_reg = 0;
+	unsigned int config_reg = 0;
 	unsigned int xfer_len;
 
 	if (is_active == BITBANG_CS_INACTIVE) {
@@ -416,33 +576,14 @@ void mxc_spi_chipselect(struct spi_device *spi, int is_active)
 
 	if (spi_ver_def == &spi_ver_2_3) {
 		/* Control Register Settings for transfer to this slave */
-
-		ctrl_reg = __raw_readl(master_drv_data->base + MXC_CSPICTRL);
-		config_reg =
-		    __raw_readl(master_drv_data->base + MXC_CSPICONFIG);
-
-		ctrl_mask =
-		    (MXC_CSPICTRL_CSMASK << spi_ver_def->cs_shift |
-		     MXC_CSPICTRL_DATAMASK << MXC_CSPICTRL_DATASHIFT |
-		     MXC_CSPICTRL_MODEMASK << MXC_CSPICTRL_MODESHIFT |
-		     spi_ver_def->bc_mask << spi_ver_def->bc_shift);
-
-		config_mask =
-		    (MXC_SCLKPOLMASK << MXC_LOWPOLSHIFT |
-		     MXC_PHAMASK << MXC_PHASHIFT |
-		     MXC_SSCTLMASK << MXC_SSCTLSHIFT |
-		     MXC_SSPOLMASK << MXC_SSPOLSHIFT);
-
-		ctrl_reg &= ~ctrl_mask;
-		config_reg &= ~config_mask;
-
+		ctrl_reg = master_drv_data->spi_ver_def->spi_enable;
 		ctrl_reg |=
 		    ((spi->chip_select & MXC_CSPICTRL_CSMASK) << spi_ver_def->
 		     cs_shift);
 		ctrl_reg |=
 		    (((1 << spi->
-		       chip_select) & MXC_CSPICTRL_MODEMASK) <<
-		     MXC_CSPICTRL_MODESHIFT);
+		       chip_select) & spi_ver_def->mode_mask) <<
+		     spi_ver_def->mode_shift);
 		ctrl_reg |=
 		    spi_find_baudrate(master_drv_data, spi->max_speed_hz);
 		ctrl_reg |=
@@ -452,54 +593,47 @@ void mxc_spi_chipselect(struct spi_device *spi, int is_active)
 		if (spi->mode & SPI_CPHA)
 			config_reg |=
 			    (((1 << spi->
-			       chip_select) & MXC_PHAMASK) << MXC_PHASHIFT);
+			       chip_select) & spi_ver_def->
+			      mode_mask) << spi_ver_def->pha_shift);
 		if ((spi->mode & SPI_CPOL))
 			config_reg |=
 			    (((1 << spi->
-			       chip_select) & MXC_SCLKPOLMASK) <<
-			     MXC_LOWPOLSHIFT);
+			       chip_select) & spi_ver_def->mode_mask) <<
+			     spi_ver_def->low_pol_shift);
 		if (spi->mode & SPI_CS_HIGH)
 			config_reg |=
 			    (((1 << spi->
-			       chip_select) & MXC_SSPOLMASK) << MXC_SSPOLSHIFT);
+			       chip_select) & spi_ver_def->
+			      mode_mask) << spi_ver_def->ss_pol_shift);
 		config_reg |=
-		    (((1 << spi->
-		       chip_select) & MXC_SSCTLMASK) << MXC_SSCTLSHIFT);
+		    (((1 << spi->chip_select) & spi_ver_def->
+		      mode_mask) << spi_ver_def->ss_ctrl_shift);
 
 		__raw_writel(ctrl_reg, master_drv_data->base + MXC_CSPICTRL);
 		__raw_writel(config_reg,
-			     master_drv_data->base + MXC_CSPICONFIG);
+			     MXC_CSPICONFIG + master_drv_data->ctrl_addr);
 	} else {
 		/* Control Register Settings for transfer to this slave */
-
-		ctrl_reg = __raw_readl(master_drv_data->base + MXC_CSPICTRL);
-
-		ctrl_mask =
-		    (MXC_SCLKPOLMASK << MXC_LOWPOLSHIFT |
-		     MXC_PHAMASK << MXC_PHASHIFT |
-		     MXC_SSCTLMASK << MXC_SSCTLSHIFT |
-		     MXC_SSPOLMASK << MXC_SSPOLSHIFT |
-		     MXC_CSPICTRL_MODEMASK << MXC_CSPICTRL_MODESHIFT |
-		     MXC_CSPICTRL_CSMASK << spi_ver_def->cs_shift |
-		     MXC_CSPICTRL_DATAMASK << MXC_CSPICTRL_DATASHIFT |
-		     spi_ver_def->bc_mask << spi_ver_def->bc_shift);
-		ctrl_reg &= ~ctrl_mask;
-
+		ctrl_reg = master_drv_data->spi_ver_def->spi_enable;
 		ctrl_reg |=
 		    (((spi->chip_select & MXC_CSPICTRL_CSMASK) << spi_ver_def->
-		      cs_shift) | MXC_CSPICTRL_MODEMASK <<
-		     MXC_CSPICTRL_MODESHIFT);
+		      cs_shift) | spi_ver_def->mode_mask <<
+		     spi_ver_def->mode_shift);
 		ctrl_reg |=
 		    spi_find_baudrate(master_drv_data, spi->max_speed_hz);
 		ctrl_reg |=
 		    (((xfer_len -
 		       1) & spi_ver_def->bc_mask) << spi_ver_def->bc_shift);
 		if (spi->mode & SPI_CPHA)
-			ctrl_reg |= MXC_PHAMASK << MXC_PHASHIFT;
+			ctrl_reg |=
+			    spi_ver_def->mode_mask << spi_ver_def->pha_shift;
 		if (!(spi->mode & SPI_CPOL))
-			ctrl_reg |= MXC_SCLKPOLMASK << MXC_LOWPOLSHIFT;
+			ctrl_reg |=
+			    spi_ver_def->mode_mask << spi_ver_def->
+			    low_pol_shift;
 		if (spi->mode & SPI_CS_HIGH)
-			ctrl_reg |= MXC_SSPOLMASK << MXC_SSPOLSHIFT;
+			ctrl_reg |=
+			    spi_ver_def->mode_mask << spi_ver_def->ss_pol_shift;
 
 		__raw_writel(ctrl_reg, master_drv_data->base + MXC_CSPICTRL);
 	}
@@ -521,10 +655,10 @@ void mxc_spi_chipselect(struct spi_device *spi, int is_active)
 		struct spi_chip_info *lb_chip =
 		    (struct spi_chip_info *)spi->controller_data;
 		if (!lb_chip)
-			__raw_writel(0, master_drv_data->base + MXC_CSPITEST);
+			__raw_writel(0, master_drv_data->test_addr);
 		else if (lb_chip->lb_enable)
-			__raw_writel(MXC_CSPITEST_LBC,
-				     master_drv_data->base + MXC_CSPITEST);
+			__raw_writel(spi_ver_def->lbc,
+				     master_drv_data->test_addr);
 	}
 #endif
 	return;
@@ -551,7 +685,7 @@ static irqreturn_t mxc_spi_isr(int irq, void *dev_id)
 	pass_counter = fifo_size;
 
 	/* Read the interrupt status register to determine the source */
-	status = __raw_readl(master_drv_data->base + MXC_CSPISTAT);
+	status = __raw_readl(master_drv_data->stat_addr);
 	do {
 		u32 rx_tmp =
 		    __raw_readl(master_drv_data->base + MXC_CSPIRXDATA);
@@ -564,8 +698,11 @@ static irqreturn_t mxc_spi_isr(int irq, void *dev_id)
 		if (pass_counter-- == 0) {
 			break;
 		}
-		status = __raw_readl(master_drv_data->base + MXC_CSPISTAT);
-	} while (status & MXC_CSPISTAT_RR);
+		status = __raw_readl(master_drv_data->stat_addr);
+	} while (status &
+		 (1 <<
+		  (MXC_CSPISTAT_RR +
+		   master_drv_data->spi_ver_def->int_status_dif)));
 
 	if (master_drv_data->transfer.count) {
 		if (master_drv_data->transfer.tx_buf) {
@@ -634,9 +771,9 @@ int mxc_spi_poll_transfer(struct spi_device *spi, struct spi_transfer *t)
 	count = (t->len > fifo_size) ? fifo_size : t->len;
 	spi_put_tx_data(master_drv_data->base, count, master_drv_data);
 
-	while ((((status = __raw_readl(master_drv_data->base + MXC_CSPITEST)) &
-		 MXC_CSPITEST_RXCNT_MASK) >> MXC_CSPITEST_RXCNT_OFF) != count) {
-	}
+	while ((((status = __raw_readl(master_drv_data->test_addr)) &
+		 master_drv_data->spi_ver_def->rx_cnt_mask) >> master_drv_data->
+		spi_ver_def->rx_cnt_off) != count) ;
 
 	for (i = 0; i < count; i++) {
 		rx_tmp = __raw_readl(master_drv_data->base + MXC_CSPIRXDATA);
@@ -677,7 +814,9 @@ int mxc_spi_transfer(struct spi_device *spi, struct spi_transfer *t)
 
 	/* Enable the Rx Interrupts */
 
-	spi_enable_interrupt(master_drv_data, MXC_CSPIINT_RREN);
+	spi_enable_interrupt(master_drv_data,
+			     1 << (MXC_CSPIINT_RREN_SHIFT +
+				   master_drv_data->spi_ver_def->rx_inten_dif));
 	count = (t->len > fifo_size) ? fifo_size : t->len;
 
 	/* Perform Tx transaction */
@@ -690,7 +829,10 @@ int mxc_spi_transfer(struct spi_device *spi, struct spi_transfer *t)
 
 	/* Disable the Rx Interrupts */
 
-	spi_disable_interrupt(master_drv_data, MXC_CSPIINT_RREN);
+	spi_disable_interrupt(master_drv_data,
+			      1 << (MXC_CSPIINT_RREN_SHIFT +
+				    master_drv_data->spi_ver_def->
+				    rx_inten_dif));
 
 	return (t->len - master_drv_data->transfer.count);
 }
@@ -755,6 +897,23 @@ static int mxc_spi_probe(struct platform_device *pdev)
 	master_drv_data = spi_master_get_devdata(master);
 	master_drv_data->mxc_bitbang.master = spi_master_get(master);
 
+	/* Identify SPI version */
+
+	spi_ver = mxc_platform_info->spi_version;
+	if (spi_ver == 7) {
+		master_drv_data->spi_ver_def = &spi_ver_0_7;
+	} else if (spi_ver == 5) {
+		master_drv_data->spi_ver_def = &spi_ver_0_5;
+	} else if (spi_ver == 4) {
+		master_drv_data->spi_ver_def = &spi_ver_0_4;
+	} else if (spi_ver == 0) {
+		master_drv_data->spi_ver_def = &spi_ver_0_0;
+	} else if (spi_ver == 23) {
+		master_drv_data->spi_ver_def = &spi_ver_2_3;
+	}
+
+	dev_dbg(&pdev->dev, "SPI_REV 0.%d\n", spi_ver);
+
 	/* Set the master bitbang data */
 
 	master_drv_data->mxc_bitbang.chipselect = mxc_spi_chipselect;
@@ -815,36 +974,33 @@ static int mxc_spi_probe(struct platform_device *pdev)
 
 	gpio_spi_active(master->bus_num - 1);
 
-	/* Identify SPI version */
-
-	spi_ver = mxc_platform_info->spi_version;
-	if (spi_ver == 7) {
-		master_drv_data->spi_ver_def = &spi_ver_0_7;
-	} else if (spi_ver == 5) {
-		master_drv_data->spi_ver_def = &spi_ver_0_5;
-	} else if (spi_ver == 4) {
-		master_drv_data->spi_ver_def = &spi_ver_0_4;
-	} else if (spi_ver == 0) {
-		master_drv_data->spi_ver_def = &spi_ver_0_0;
-	} else if (spi_ver == 23) {
-		master_drv_data->spi_ver_def = &spi_ver_2_3;
-	}
-
-	dev_dbg(&pdev->dev, "SPI_REV 0.%d\n", spi_ver);
-
 	/* Enable the CSPI Clock, CSPI Module, set as a master */
 
+	master_drv_data->ctrl_addr =
+	    master_drv_data->base + master_drv_data->spi_ver_def->ctrl_reg_addr;
+	master_drv_data->stat_addr =
+	    master_drv_data->base + master_drv_data->spi_ver_def->stat_reg_addr;
+	master_drv_data->period_addr =
+	    master_drv_data->base +
+	    master_drv_data->spi_ver_def->period_reg_addr;
+	master_drv_data->test_addr =
+	    master_drv_data->base + master_drv_data->spi_ver_def->test_reg_addr;
+	master_drv_data->reset_addr =
+	    master_drv_data->base +
+	    master_drv_data->spi_ver_def->reset_reg_addr;
+
 	master_drv_data->clk = clk_get(&pdev->dev, "cspi_clk");
 	clk_enable(master_drv_data->clk);
 	master_drv_data->spi_ipg_clk = clk_get_rate(master_drv_data->clk);
 
-	__raw_writel(MXC_CSPIRESET_START,
-		     master_drv_data->base + MXC_CSPIRESET);
+	__raw_writel(master_drv_data->spi_ver_def->reset_start,
+		     master_drv_data->reset_addr);
 	udelay(1);
-	__raw_writel(MXC_CSPICTRL_ENABLE, master_drv_data->base + MXC_CSPICTRL);
-	__raw_writel(MXC_CSPIPERIOD_32KHZ,
-		     master_drv_data->base + MXC_CSPIPERIOD);
-	__raw_writel(0, master_drv_data->base + MXC_CSPIINT);
+	__raw_writel((master_drv_data->spi_ver_def->spi_enable +
+		      master_drv_data->spi_ver_def->master_enable),
+		     master_drv_data->base + MXC_CSPICTRL);
+	__raw_writel(MXC_CSPIPERIOD_32KHZ, master_drv_data->period_addr);
+	__raw_writel(0, MXC_CSPIINT + master_drv_data->ctrl_addr);
 
 	/* Start the SPI Master Controller driver */
 
@@ -1024,7 +1180,8 @@ static int mxc_spi_resume(struct platform_device *pdev)
 	clk_enable(master_drv_data->clk);
 
 	spi_bitbang_resume(&master_drv_data->mxc_bitbang);
-	__raw_writel(MXC_CSPICTRL_ENABLE, master_drv_data->base + MXC_CSPICTRL);
+	__raw_writel(master_drv_data->spi_ver_def->spi_enable,
+		     master_drv_data->base + MXC_CSPICTRL);
 
 	return 0;
 }
diff --git a/drivers/spi/mxc_spi.h b/drivers/spi/mxc_spi.h
deleted file mode 100644
index 20a3732..0000000
--- a/drivers/spi/mxc_spi.h
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
- *
- * http://www.opensource.org/licenses/gpl-license.html
- * http://www.gnu.org/copyleft/gpl.html
- */
-
-/*!
- * @file mxc_spi.h
- * @brief This header file contains SPI driver low level register definitions.
- *
- * @ingroup SPI
- */
-
-#ifndef __MXC_SPI_H__
-#define __MXC_SPI_H__
-
-#include <asm/hardware.h>
-#include <asm/mach-types.h>
-
-#define MXC_CSPIRXDATA		0x00
-#define MXC_CSPITXDATA		0x04
-#define MXC_CSPICTRL		0x08
-#define MXC_CSPICONFIG		0x08
-#define MXC_CSPIINT		0x0C
-#define MXC_CSPIDMA		0x10
-#define MXC_CSPISTAT		0x14
-#define MXC_CSPIPERIOD		0x18
-#define MXC_CSPITEST		0x1C
-#define MXC_CSPIRESET		0x00
-
-#define MXC_CSPICTRL_ENABLE	0x1
-#define MXC_CSPICTRL_DISABLE	0x0
-#define MXC_CSPICTRL_XCH	(1 << 2)
-#define MXC_CSPICTRL_SMC	(1 << 3)
-#define MXC_CSPICTRL_SLAVE	0x0
-#define MXC_CSPICTRL_MODEMASK	0x1
-#define MXC_CSPICTRL_MODESHIFT	1
-#define MXC_CSPICTRL_CSMASK	0x3
-#define MXC_CSPICTRL_MAXDATRATE	0x7
-#define MXC_CSPICTRL_DATAMASK	0x7
-#define MXC_CSPICTRL_DATASHIFT 	16
-#define MXC_CSPICTRL_ADJUST_SHIFT(x) ((x) -= 2)
-
-#define MXC_SCLKPOLMASK	0x1
-#define MXC_LOWPOLSHIFT	4
-#define MXC_HIGHPOL	0x0
-#define MXC_PHAMASK	0x1
-#define MXC_PHASHIFT	5
-#define MXC_NOPHA	0x0
-#define MXC_SSCTLMASK	0x1
-#define MXC_SSCTLSHIFT	6
-#define MXC_SSPOLMASK	0x1
-#define MXC_SSPOLSHIFT	7
-#define MXC_LOWSSPOL	0x0
-
-#define MXC_CSPIINT_TEEN	(1 << 0)
-#define MXC_CSPIINT_THEN	(1 << 1)
-#define MXC_CSPIINT_TFEN	(1 << 2)
-#define MXC_CSPIINT_RREN	(1 << 3)
-#define MXC_CSPIINT_RHEN        (1 << 4)
-#define MXC_CSPIINT_RFEN        (1 << 5)
-#define MXC_CSPIINT_ROEN        (1 << 6)
-
-#define MXC_CSPISTAT_TE		(1 << 0)
-#define MXC_CSPISTAT_TH		(1 << 1)
-#define MXC_CSPISTAT_TF		(1 << 2)
-#define MXC_CSPISTAT_RR		(1 << 3)
-#define MXC_CSPISTAT_RH         (1 << 4)
-#define MXC_CSPISTAT_RF         (1 << 5)
-#define MXC_CSPISTAT_RO         (1 << 6)
-
-#define MXC_CSPIPERIOD_32KHZ	(1 << 15)
-
-#define MXC_CSPITEST_LBC	(1 << 14)
-#define MXC_CSPITEST_RXCNT_OFF	(4)
-#define MXC_CSPITEST_RXCNT_MASK	(0xF << 4)
-#define MXC_CSPIRESET_START	1
-
-#endif				//__MXC_SPI_H__
diff --git a/drivers/spi/mxc_spi_rev_0_0.h b/drivers/spi/mxc_spi_rev_0_0.h
deleted file mode 100644
index 23ffc55..0000000
--- a/drivers/spi/mxc_spi_rev_0_0.h
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
- *
- * http://www.opensource.org/licenses/gpl-license.html
- * http://www.gnu.org/copyleft/gpl.html
- */
-
-/*!
- * @file mxc_spi_rev_0_0.h
- * @brief This header file contains SPI driver low level register definitions.
- *
- * @ingroup SPI
- */
-
-#ifndef __MXC_SPI_REV_0_0_H__
-#define __MXC_SPI_REV_0_0_H__
-
-#include <asm/hardware.h>
-#include <asm/mach-types.h>
-
-#define MXC_CSPIRXDATA		0x00
-#define MXC_CSPITXDATA		0x04
-#define MXC_CSPICTRL		0x08
-#define MXC_CSPICONFIG		0x08
-#define MXC_CSPIINT		0x0C
-#define MXC_CSPIDMA		0x18
-#define MXC_CSPISTAT		0x0C
-#define MXC_CSPIPERIOD		0x14
-#define MXC_CSPITEST		0x10
-#define MXC_CSPIRESET		0x1C
-
-#define MXC_CSPICTRL_ENABLE	(1 << 10)
-#define MXC_CSPICTRL_DISABLE	0x0
-#define MXC_CSPICTRL_XCH	(1 << 9)
-#define MXC_CSPICTRL_SLAVE	0x0
-#define MXC_CSPICTRL_MODEMASK	0x1
-#define MXC_CSPICTRL_MODESHIFT	11
-#define MXC_CSPICTRL_CSMASK	0x3
-#define MXC_CSPICTRL_MAXDATRATE	0x10
-#define MXC_CSPICTRL_DATAMASK	0x1F
-#define MXC_CSPICTRL_DATASHIFT 	14
-/* This adjustment in the shift is valid only for even states only(i.e. divide
-   ratio of 2). SDHC_SPIEN is not set by default. If SDHC_SPIEN bit is set in
-   MXC_CSPICTRL, then divide ratio is 3, this shift adjustment is invalid. */
-#define MXC_CSPICTRL_ADJUST_SHIFT(x) ((x) = ((x) - 1) * 2)
-
-#define MXC_SCLKPOLMASK	0x1
-#define MXC_LOWPOLSHIFT	5
-#define MXC_HIGHPOL	0x0
-#define MXC_PHAMASK	0x1
-#define MXC_PHASHIFT	6
-#define MXC_NOPHA	0x0
-#define MXC_SSCTLMASK	0x1
-#define MXC_SSCTLSHIFT	7
-#define MXC_SSPOLMASK 	0x1
-#define MXC_SSPOLSHIFT 	8
-#define MXC_LOWSSPOL	0x0
-
-#define MXC_CSPIINT_TEEN	(1 << 9)
-#define MXC_CSPIINT_THEN	(1 << 10)
-#define MXC_CSPIINT_TFEN	(1 << 11)
-#define MXC_CSPIINT_RREN	(1 << 13)
-#define MXC_CSPIINT_RHEN        (1 << 14)
-#define MXC_CSPIINT_RFEN        (1 << 15)
-#define MXC_CSPIINT_ROEN        (1 << 16)
-
-#define MXC_CSPISTAT_TE		(1 << 0)
-#define MXC_CSPISTAT_TH		(1 << 1)
-#define MXC_CSPISTAT_TF		(1 << 2)
-#define MXC_CSPISTAT_RR		(1 << 3)
-#define MXC_CSPISTAT_RH         (1 << 4)
-#define MXC_CSPISTAT_RF         (1 << 5)
-#define MXC_CSPISTAT_RO         (1 << 6)
-
-#define MXC_CSPIPERIOD_32KHZ	(1 << 15)
-
-#define MXC_CSPITEST_LBC	(1 << 14)
-#define MXC_CSPITEST_RXCNT_OFF	(4)
-#define MXC_CSPITEST_RXCNT_MASK	(0xF << 4)
-#define MXC_CSPIRESET_START	1
-
-#endif				//__MXC_SPI_REV_0_0_H__
diff --git a/drivers/spi/mxc_spi_rev_2_3.h b/drivers/spi/mxc_spi_rev_2_3.h
deleted file mode 100644
index 1e47a79..0000000
--- a/drivers/spi/mxc_spi_rev_2_3.h
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
- *
- * http://www.opensource.org/licenses/gpl-license.html
- * http://www.gnu.org/copyleft/gpl.html
- */
-
-/*!
- * @file mxc_spi_rev_2_3.h
- * @brief This header file contains SPI driver low level register definitions.
- *
- * @ingroup SPI
- */
-
-#ifndef __MXC_SPI_REV_2_3_H__
-#define __MXC_SPI_REV_2_3_H__
-
-#include <asm/hardware.h>
-#include <asm/mach-types.h>
-
-#define MXC_CSPIRXDATA		0x00
-#define MXC_CSPITXDATA		0x04
-#define MXC_CSPICTRL		0x08
-#define MXC_CSPICONFIG		0x0C
-#define MXC_CSPIINT		0x10
-#define MXC_CSPIDMA		0x14
-#define MXC_CSPISTAT		0x18
-#define MXC_CSPIPERIOD		0x1C
-#define MXC_CSPITEST		0x20
-#define MXC_CSPIRESET		0x00
-
-#define MXC_CSPICTRL_ENABLE	0x1
-#define MXC_CSPICTRL_DISABLE	0x0
-#define MXC_CSPICTRL_HT_ENABLE	(1 << 1)
-#define MXC_CSPICTRL_HT_DISABLE	0x0
-#define MXC_CSPICTRL_XCH	(1 << 2)
-#define MXC_CSPICTRL_SMC	(1 << 3)
-#define MXC_CSPICTRL_SLAVE	0x0
-#define MXC_CSPICTRL_MODEMASK	0xF
-#define MXC_CSPICTRL_MODESHIFT	4
-#define MXC_CSPICTRL_CSMASK	0x3
-#define MXC_CSPICTRL_MAXDATRATE	0xF
-#define MXC_CSPICTRL_DATAMASK	0xFF
-#define MXC_CSPICTRL_DATASHIFT 	8
-#define MXC_CSPICTRL_ADJUST_SHIFT(x)	(x)
-
-#define MXC_SCLKPOLMASK		0xF
-#define MXC_LOWPOLSHIFT		4
-#define MXC_HIGHPOL		0x0
-#define MXC_PHAMASK		0xF
-#define MXC_PHASHIFT		0
-#define MXC_NOPHA		0x0
-#define MXC_SSCTLMASK		0xF
-#define MXC_SSCTLSHIFT		8
-#define MXC_SSPOLMASK		0xF
-#define MXC_SSPOLSHIFT		12
-#define MXC_LOWSSPOL		0x0
-
-#define MXC_CSPIINT_TEEN	(1 << 0)
-#define MXC_CSPIINT_THEN	(1 << 1)
-#define MXC_CSPIINT_TFEN	(1 << 2)
-#define MXC_CSPIINT_RREN	(1 << 3)
-#define MXC_CSPIINT_RHEN        (1 << 4)
-#define MXC_CSPIINT_RFEN        (1 << 5)
-#define MXC_CSPIINT_ROEN        (1 << 6)
-
-#define MXC_CSPISTAT_TE		(1 << 0)
-#define MXC_CSPISTAT_TH		(1 << 1)
-#define MXC_CSPISTAT_TF		(1 << 2)
-#define MXC_CSPISTAT_RR		(1 << 3)
-#define MXC_CSPISTAT_RH         (1 << 4)
-#define MXC_CSPISTAT_RF         (1 << 5)
-#define MXC_CSPISTAT_RO         (1 << 6)
-
-#define MXC_CSPIPERIOD_32KHZ	(1 << 15)
-
-#define MXC_CSPITEST_LBC	(1 << 31)
-#define MXC_CSPITEST_RXCNT_OFF	(8)
-#define MXC_CSPITEST_RXCNT_MASK	(0x7F << 8)
-#define MXC_CSPIRESET_START	0
-
-#endif				//__MXC_SPI_REV_2_3_H__
-- 
1.5.4.4

