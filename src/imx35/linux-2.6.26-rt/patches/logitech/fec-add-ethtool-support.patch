---
 drivers/net/fec.c |   65 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 64 insertions(+), 1 deletion(-)

Index: linux-2.6.26/drivers/net/fec.c
===================================================================
--- linux-2.6.26.orig/drivers/net/fec.c	2009-04-28 11:16:26.000000000 +0100
+++ linux-2.6.26/drivers/net/fec.c	2009-04-28 11:16:30.000000000 +0100
@@ -46,6 +46,7 @@
 #include <linux/workqueue.h>
 #include <linux/bitops.h>
 #include <linux/clk.h>
+#include <linux/ethtool.h>
 
 #include <asm/irq.h>
 #include <asm/uaccess.h>
@@ -130,6 +131,10 @@
 #define	FEC_FLASHMAC	0
 #endif
 
+#define FEC_VERSION "0.2"
+
+#define FEC_VERSION "0.2"
+
 /* Forward declarations of some structures to support different PHYs
 */
 
@@ -245,6 +250,7 @@
 	uint	phy_speed;
 	phy_info_t const	*phy;
 	struct work_struct phy_task;
+	struct timer_list phy_timer_list;
 	struct net_device *net;
 
 	uint	sequence_done;
@@ -272,6 +278,7 @@
 static void fec_restart(struct net_device *dev, int duplex);
 static void fec_stop(struct net_device *dev);
 static void fec_set_mac_address(struct net_device *dev);
+static void mii_link_timer_callback(unsigned long data);
 
 static void __inline__ fec_dcache_inv_range(void * start, void * end);
 static void __inline__ fec_dcache_flush_range(void * start, void * end);
@@ -1399,7 +1406,11 @@
 	fep->phy_speed = ((((MCF_CLK / 4) / (2500000 / 10)) + 5) / 10) * 2;
 	fecp->fec_mii_speed = fep->phy_speed;
 
-	fec_restart(dev, 0);
+	/* fec_restart will be called from the phy timer when the link
+	 * is detected. calling it early here causes ksoftirqd to spin
+	 * when then link is down.
+	 */
+	//fec_restart(dev, 0);
 }
 
 static void __inline__ fec_get_mac(struct net_device *dev)
@@ -2075,13 +2086,19 @@
  */
 static void __inline__ fec_request_intrs(struct net_device *dev)
 {
+	struct fec_enet_private *fep = netdev_priv(dev);
+
 	/* Setup interrupt handlers. */
 	if (request_irq(MXC_INT_FEC, fec_enet_interrupt, 0, "fec", dev) != 0)
 		panic("FEC: Could not allocate FEC IRQ(%d)!\n", MXC_INT_FEC);
 	/* TODO: disable now due to CPLD issue */
-	if ((expio_intr_fec > 0) &&
-	(request_irq(expio_intr_fec, mii_link_interrupt, 0, "fec(MII)", dev) != 0))
-		panic("FEC: Could not allocate FEC(MII) IRQ(%d)!\n", expio_intr_fec);
+	if (expio_intr_fec > 0) {
+		if (request_irq(expio_intr_fec, mii_link_interrupt, 0, "fec(MII)", dev) != 0)
+			panic("FEC: Could not allocate FEC(MII) IRQ(%d)!\n", expio_intr_fec);
+	} else {
+		fep->phy_timer_list.expires = jiffies + HZ / 2;	/* every 500ms */
+		add_timer(&fep->phy_timer_list);
+	}
 	disable_irq(expio_intr_fec);
 }
 
@@ -2104,7 +2121,12 @@
 	fep->phy_speed =
 		(((((rate / 2) + (4999999 / 2)) / 2500000)) & 0x3F) << 1;
 	fecp->fec_mii_speed = fep->phy_speed;
-	fec_restart(dev, 0);
+
+	/* fec_restart will be called from the phy timer when the link
+	 * is detected. calling it early here causes ksoftirqd to spin
+	 * when then link is down.
+	 */
+	/*fec_restart(dev, 0);*/
 }
 
 #define FEC_IIM_BASE    IO_ADDRESS(IIM_BASE_ADDR)
@@ -2112,7 +2134,7 @@
 {
 	struct fec_enet_private *fep = netdev_priv(dev);
 	volatile fec_t *fecp;
-	unsigned char *iap, tmpaddr[ETH_ALEN];
+	unsigned char tmpaddr[ETH_ALEN], *iap = fec_mac_default;
 	int i;
 	unsigned long fec_mac_base = FEC_IIM_BASE + MXC_IIMKEY0;
 	fecp = fep->hwp;
@@ -2455,6 +2477,65 @@
 
 /* ------------------------------------------------------------------------- */
 
+static void fec_get_drvinfo(struct net_device *dev,
+			    struct ethtool_drvinfo *info)
+{
+	strcpy(info->driver, "FEC");
+	strcpy(info->version, FEC_VERSION);
+}
+
+static int fec_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct fec_enet_private *fep = netdev_priv(dev);
+	volatile uint *s = &(fep->phy_status);
+	uint status = *s;
+
+	cmd->supported =
+	    (SUPPORTED_10baseT_Half | SUPPORTED_10baseT_Full |
+	     SUPPORTED_100baseT_Half | SUPPORTED_100baseT_Full |
+	     SUPPORTED_Autoneg | SUPPORTED_TP | SUPPORTED_MII);
+
+	cmd->port = PORT_MII;
+	cmd->transceiver = XCVR_INTERNAL;
+	cmd->phy_address = fep->phy_addr;
+
+	cmd->advertising = ADVERTISED_TP | ADVERTISED_MII;
+	if (status & PHY_CONF_10HDX)
+		cmd->advertising |= ADVERTISED_10baseT_Half;
+	if (status & PHY_CONF_10FDX)
+		cmd->advertising |= ADVERTISED_10baseT_Full;
+	if (status & PHY_CONF_100HDX)
+		cmd->advertising |= ADVERTISED_100baseT_Half;
+	if (status & PHY_CONF_100FDX)
+		cmd->advertising |= ADVERTISED_100baseT_Full;
+	if (status & PHY_CONF_ANE)
+		cmd->advertising |= ADVERTISED_Autoneg;
+
+	if ((status & PHY_STAT_10HDX) | (status & PHY_STAT_10FDX)) {
+		cmd->speed = SPEED_10;
+	}
+	else {
+		cmd->speed = SPEED_100;
+	}
+
+	if ((status & PHY_STAT_10HDX) | (status & PHY_STAT_100HDX)) {
+		cmd->duplex = DUPLEX_HALF;
+	}
+	else {
+		cmd->duplex = DUPLEX_FULL;
+	}
+
+	return 0;
+}
+
+static const struct ethtool_ops fec_ethtool_ops = {
+	.get_drvinfo	= fec_get_drvinfo,
+	.get_settings	= fec_get_settings,
+	.get_link	= ethtool_op_get_link,
+};
+
+/* ------------------------------------------------------------------------- */
+
 static void mii_display_status(struct net_device *dev)
 {
 	struct fec_enet_private *fep = netdev_priv(dev);
@@ -2540,17 +2621,19 @@
 	*/
 	fep->mii_phy_task_queued = 0;
 	fep->link = (fep->phy_status & PHY_STAT_LINK) ? 1 : 0;
-	mii_display_status(dev);
-	fep->old_link = fep->link;
-
-	if (fep->link) {
-		duplex = 0;
-		if (fep->phy_status
-		    & (PHY_STAT_100FDX | PHY_STAT_10FDX))
-			duplex = 1;
-		fec_restart(dev, duplex);
-	} else
-		fec_stop(dev);
+	if (fep->old_link != fep->link) {
+		mii_display_status(dev);
+		fep->old_link = fep->link;
+
+		if (fep->link) {
+			duplex = 0;
+			if (fep->phy_status
+			& (PHY_STAT_100FDX | PHY_STAT_10FDX))
+				duplex = 1;
+			fec_restart(dev, duplex);
+		} else
+			fec_stop(dev);
+	}
 
 #if 0
 	enable_irq(fep->mii_irq);
@@ -2691,6 +2774,19 @@
 }
 #endif
 
+static void mii_link_timer_callback(unsigned long data)
+{
+	struct net_device *dev = (struct net_device *)data;
+	struct fec_enet_private *fep = netdev_priv(dev);
+
+	fep->phy_timer_list.expires = jiffies + HZ / 2;
+
+	add_timer(&fep->phy_timer_list);
+
+	mii_do_cmd(dev, fep->phy->ack_int);
+	mii_do_cmd(dev, phy_cmd_relink);
+}
+
 static int
 fec_enet_open(struct net_device *dev)
 {
@@ -2976,6 +3072,12 @@
 	fecp->fec_r_des_start = __pa((uint)(fep->cbd_mem_base));
 	fecp->fec_x_des_start = __pa((uint)(fep->cbd_mem_base + RX_RING_SIZE*sizeof(cbd_t)));
 
+	init_timer(&fep->phy_timer_list);
+	fep->phy_timer_list.data = (unsigned long)dev;
+	fep->phy_timer_list.function = mii_link_timer_callback;
+
+	init_timer(&fep->phy_timer_list);
+
 	/* Install our interrupt handlers. This varies depending on
 	 * the architecture.
 	*/
@@ -3004,6 +3106,9 @@
 	dev->watchdog_timeo = TX_TIMEOUT;
 	dev->stop = fec_enet_close;
 	dev->set_multicast_list = set_multicast_list;
+	SET_ETHTOOL_OPS(dev, &fec_ethtool_ops);
+
+	netif_carrier_off(dev);  /* will be enabled in relink */
 
 	for (i=0; i<NMII-1; i++)
 		mii_cmds[i].mii_next = &mii_cmds[i+1];
@@ -3141,8 +3246,10 @@
 	fecp->fec_ecntrl = 2;
 	fecp->fec_r_des_active = 0x01000000;
 
-	if (fep->link)
+	if (fep->link) {
+		netif_carrier_on(dev);
 		netif_start_queue(dev);
+	}
 }
 
 static void
@@ -3166,6 +3273,11 @@ fec_stop(struct net_device *dev)
 		if (!(fecp->fec_ievent & FEC_ENET_GRA))
 			printk("fec_stop : Graceful transmit stop did not complete !\n");
 		}
+	else
+		{
+			/* Only reset carrier if there is no link */
+			netif_carrier_off(dev);
+		}
 
 	/* Whack a reset.  We should wait for this.
 	*/
@@ -3172,7 +3280,7 @@
 	fecp->fec_ecntrl = 1;
 	udelay(10);
 
-	/* Clear outstanding MII command interrupts.
+	/* Clear outstanding II command interrupts.
 	*/
 	fecp->fec_ievent = FEC_ENET_MII;
 	fec_enable_phy_intr();
@@ -3187,7 +3295,7 @@
 	int i, err;
 	DECLARE_MAC_BUF(mac);
 
-	printk("FEC ENET Version 0.2\n");
+	printk("FEC ENET Version " FEC_VERSION "\n");
 	fec_arch_init();
 
 	for (i = 0; (i < FEC_MAX_PORTS); i++) {
