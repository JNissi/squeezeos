From 45e8cc3fe39ef400010cf371b25e998c142aefb4 Mon Sep 17 00:00:00 2001
From: Richard Zhu <r65037@freescale.com>
Date: Fri, 12 Dec 2008 13:52:59 +0800
Subject: [PATCH] ENGR00098826 MX31 SD card can't be recognized after system resumed.

Refine the sequence of the power, clock and bus initialization.

Signed-off-by: Richard Zhu <r65037@freescale.com>
---
 arch/arm/mach-mx3/mx3_3stack_gpio.c |   49 +++++++++++++++++------------------
 drivers/mmc/host/mxc_mmc.c          |   25 +++++++++++------
 drivers/mmc/host/mxc_mmc.h          |    4 +-
 3 files changed, 42 insertions(+), 36 deletions(-)

diff --git a/arch/arm/mach-mx3/mx3_3stack_gpio.c b/arch/arm/mach-mx3/mx3_3stack_gpio.c
index 847bbc3..3c59054 100644
--- a/arch/arm/mach-mx3/mx3_3stack_gpio.c
+++ b/arch/arm/mach-mx3/mx3_3stack_gpio.c
@@ -437,17 +437,23 @@ void gpio_sdhc_active(int module)
 				  INPUTCONFIG_FUNC);
 
 		mxc_iomux_set_pad(MX31_PIN_SD1_CLK,
-				  (PAD_CTL_DRV_MAX | PAD_CTL_SRE_FAST));
+				  (PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST
+				   | PAD_CTL_100K_PU));
 		mxc_iomux_set_pad(MX31_PIN_SD1_CMD,
-				  (PAD_CTL_DRV_MAX | PAD_CTL_SRE_FAST));
+				  (PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST
+				   | PAD_CTL_100K_PU));
 		mxc_iomux_set_pad(MX31_PIN_SD1_DATA0,
-				  (PAD_CTL_DRV_MAX | PAD_CTL_SRE_FAST));
+				  (PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST
+				   | PAD_CTL_100K_PU));
 		mxc_iomux_set_pad(MX31_PIN_SD1_DATA1,
-				  (PAD_CTL_DRV_MAX | PAD_CTL_SRE_FAST));
+				  (PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST
+				   | PAD_CTL_100K_PU));
 		mxc_iomux_set_pad(MX31_PIN_SD1_DATA2,
-				  (PAD_CTL_DRV_MAX | PAD_CTL_SRE_FAST));
+				  (PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST
+				   | PAD_CTL_100K_PU));
 		mxc_iomux_set_pad(MX31_PIN_SD1_DATA3,
-				  (PAD_CTL_DRV_MAX | PAD_CTL_SRE_FAST));
+				  (PAD_CTL_DRV_HIGH | PAD_CTL_SRE_FAST
+				   | PAD_CTL_100K_PU));
 
 		/*
 		 * Active the Buffer Enable Pin only if there is
@@ -490,25 +496,18 @@ void gpio_sdhc_inactive(int module)
 {
 	switch (module) {
 	case 0:
-		mxc_request_gpio(MX31_PIN_SD1_CLK);
-		mxc_request_gpio(MX31_PIN_SD1_CMD);
-		mxc_request_gpio(MX31_PIN_SD1_DATA0);
-		mxc_request_gpio(MX31_PIN_SD1_DATA1);
-		mxc_request_gpio(MX31_PIN_SD1_DATA2);
-		mxc_request_gpio(MX31_PIN_SD1_DATA3);
-
-		mxc_free_iomux(MX31_PIN_SD1_CLK, OUTPUTCONFIG_GPIO,
-			       INPUTCONFIG_GPIO);
-		mxc_free_iomux(MX31_PIN_SD1_CMD, OUTPUTCONFIG_GPIO,
-			       INPUTCONFIG_GPIO);
-		mxc_free_iomux(MX31_PIN_SD1_DATA0, OUTPUTCONFIG_GPIO,
-			       INPUTCONFIG_GPIO);
-		mxc_free_iomux(MX31_PIN_SD1_DATA1, OUTPUTCONFIG_GPIO,
-			       INPUTCONFIG_GPIO);
-		mxc_free_iomux(MX31_PIN_SD1_DATA2, OUTPUTCONFIG_GPIO,
-			       INPUTCONFIG_GPIO);
-		mxc_free_iomux(MX31_PIN_SD1_DATA3, OUTPUTCONFIG_GPIO,
-			       INPUTCONFIG_GPIO);
+		mxc_free_iomux(MX31_PIN_SD1_CLK, OUTPUTCONFIG_FUNC,
+			       INPUTCONFIG_FUNC);
+		mxc_free_iomux(MX31_PIN_SD1_CMD, OUTPUTCONFIG_FUNC,
+			       INPUTCONFIG_FUNC);
+		mxc_free_iomux(MX31_PIN_SD1_DATA0, OUTPUTCONFIG_FUNC,
+			       INPUTCONFIG_FUNC);
+		mxc_free_iomux(MX31_PIN_SD1_DATA1, OUTPUTCONFIG_FUNC,
+			       INPUTCONFIG_FUNC);
+		mxc_free_iomux(MX31_PIN_SD1_DATA2, OUTPUTCONFIG_FUNC,
+			       INPUTCONFIG_FUNC);
+		mxc_free_iomux(MX31_PIN_SD1_DATA3, OUTPUTCONFIG_FUNC,
+			       INPUTCONFIG_FUNC);
 
 		mxc_iomux_set_pad(MX31_PIN_SD1_CLK,
 				  (PAD_CTL_DRV_NORMAL | PAD_CTL_SRE_SLOW));
diff --git a/drivers/mmc/host/mxc_mmc.c b/drivers/mmc/host/mxc_mmc.c
index e976620..7b7695d 100644
--- a/drivers/mmc/host/mxc_mmc.c
+++ b/drivers/mmc/host/mxc_mmc.c
@@ -320,6 +320,7 @@ void mxc_mmc_force_detect(int id)
 	if (id < MAX_HOST)
 		mmc_detect_change(hosts[id], msecs_to_jiffies(100));
 }
+
 EXPORT_SYMBOL(mxc_mmc_force_detect);
 
 /*!
@@ -851,7 +852,7 @@ static irqreturn_t mxcmci_irq(int irq, void *devid)
 	 * mode, we ignore STATUS_READ_OP_DONE.
 	 */
 	if ((status & (STATUS_WRITE_OP_DONE | STATUS_READ_OP_DONE)) &&
-	     !(status & STATUS_END_CMD_RESP)) {
+	    !(status & STATUS_END_CMD_RESP)) {
 		pr_debug(KERN_INFO "MXC MMC IO OP DONE INT.\n");
 		intctrl = __raw_readl(host->base + MMC_INT_CNTR);
 		__raw_writel((~(INT_CNTR_WRITE_OP_DONE | INT_CNTR_READ_OP_DONE)
@@ -1008,7 +1009,7 @@ static void mxcmci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 		if (ios->power_mode == MMC_POWER_UP) {
 			if (regulator_enable(host->regulator_mmc) == 0) {
 				pr_debug("mmc power on\n");
-				msleep(300);
+				msleep(1);
 			}
 		} else if (ios->power_mode == MMC_POWER_OFF) {
 			regulator_disable(host->regulator_mmc);
@@ -1214,8 +1215,6 @@ static int mxcmci_probe(struct platform_device *pdev)
 		goto out0;
 	}
 
-	gpio_sdhc_active(pdev->id);
-
 	/* Get pwr supply for SDHC */
 	if (NULL != mmc_plat->power_mmc) {
 		host->regulator_mmc =
@@ -1224,8 +1223,14 @@ static int mxcmci_probe(struct platform_device *pdev)
 			ret = PTR_ERR(host->regulator_mmc);
 			goto out1;
 		}
+		if (regulator_enable(host->regulator_mmc) == 0) {
+			pr_debug("mmc power on\n");
+			msleep(1);
+		}
 	}
 
+	gpio_sdhc_active(pdev->id);
+
 	host->clk = clk_get(&pdev->dev, "sdhc_clk");
 	pr_debug("SDHC:%d clock:%lu\n", pdev->id, clk_get_rate(host->clk));
 	clk_enable(host->clk);
@@ -1262,7 +1267,7 @@ static int mxcmci_probe(struct platform_device *pdev)
 
 		do {
 			card_gpio_status =
-				host->plat_data->status(host->mmc->parent);
+			    host->plat_data->status(host->mmc->parent);
 			if (card_gpio_status)
 				set_irq_type(host->detect_irq, IRQT_FALLING);
 			else
@@ -1312,6 +1317,7 @@ static int mxcmci_probe(struct platform_device *pdev)
 			   pdev->resource[0].end - pdev->resource[0].start + 1);
       out2:
 	clk_disable(host->clk);
+	regulator_disable(host->regulator_mmc);
 	regulator_put(host->regulator_mmc, &pdev->dev);
       out1:
 	gpio_sdhc_inactive(pdev->id);
@@ -1389,9 +1395,10 @@ static int mxcmci_suspend(struct platform_device *pdev, pm_message_t state)
 	 */
 	disable_irq(host->detect_irq);
 
+	gpio_sdhc_inactive(pdev->id);
+
 	if (host->regulator_mmc)
 		regulator_disable(host->regulator_mmc);
-	gpio_sdhc_inactive(pdev->id);
 
 	return ret;
 }
@@ -1421,14 +1428,14 @@ static int mxcmci_resume(struct platform_device *pdev)
 		return 0;
 	}
 
-	gpio_sdhc_active(pdev->id);
-
 	/* enable pwr supply for SDHC */
 	if (host->regulator_mmc) {
 		regulator_enable(host->regulator_mmc);
-		msleep(300);
+		msleep(1);
 	}
 
+	gpio_sdhc_active(pdev->id);
+
 	clk_enable(host->clk);
 
 	if (mmc) {
diff --git a/drivers/mmc/host/mxc_mmc.h b/drivers/mmc/host/mxc_mmc.h
index c11f704..0b38a9f 100644
--- a/drivers/mmc/host/mxc_mmc.h
+++ b/drivers/mmc/host/mxc_mmc.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -80,7 +80,7 @@
 #define STATUS_END_CMD_RESP             (1<<13)
 #define STATUS_WRITE_OP_DONE            (1<<12)
 #define STATUS_READ_OP_DONE             (1<<11)
-#define STATUS_WR_CRC_ERROR_CODE_MASK   (3<<10)
+#define STATUS_WR_CRC_ERROR_CODE_MASK   (3<<9)
 #define STATUS_CARD_BUS_CLK_RUN         (1<<8)
 #define STATUS_BUF_READ_RDY             (1<<7)
 #define STATUS_BUF_WRITE_RDY            (1<<6)
-- 
1.5.4.4

