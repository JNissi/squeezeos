From 60d885a589e2fe4fb2e624f83448ff9480d41325 Mon Sep 17 00:00:00 2001
From: Richard Zhu <r65037@freescale.com>
Date: Fri, 19 Dec 2008 13:09:59 +0800
Subject: [PATCH] ENGR00100745 [MX35] Support eSDHC driver on TO2

Add the SD clock enable bit configuration, and remove
the block count check in the driver.

Signed-off-by: Richard Zhu <r65037@freescale.com>
---
 drivers/mmc/host/mx_sdhci.c    |   53 ++++++++++++++++++++++-----------------
 drivers/mmc/host/mx_sdhci.h    |    8 ++++--
 include/asm-arm/arch-mxc/mmc.h |    1 +
 3 files changed, 36 insertions(+), 26 deletions(-)

diff --git a/drivers/mmc/host/mx_sdhci.c b/drivers/mmc/host/mx_sdhci.c
index c85ba5d..ab58f0f 100644
--- a/drivers/mmc/host/mx_sdhci.c
+++ b/drivers/mmc/host/mx_sdhci.c
@@ -216,7 +216,7 @@ static void sdhci_reset(struct sdhci_host *host, u8 mask)
 	    SDHCI_INT_DATA_TIMEOUT | SDHCI_INT_INDEX |
 	    SDHCI_INT_END_BIT | SDHCI_INT_CRC | SDHCI_INT_TIMEOUT |
 	    SDHCI_INT_DATA_AVAIL | SDHCI_INT_SPACE_AVAIL |
-	    SDHCI_INT_DMA_END | SDHCI_INT_DATA_END | SDHCI_INT_RESPONSE;
+	    SDHCI_INT_DATA_END | SDHCI_INT_RESPONSE;
 
 	if (host->flags & SDHCI_USE_DMA)
 		mask_u32 &= ~(SDHCI_INT_DATA_AVAIL | SDHCI_INT_SPACE_AVAIL);
@@ -239,7 +239,7 @@ static void sdhci_init(struct sdhci_host *host)
 	    SDHCI_INT_DATA_TIMEOUT | SDHCI_INT_INDEX |
 	    SDHCI_INT_END_BIT | SDHCI_INT_CRC | SDHCI_INT_TIMEOUT |
 	    SDHCI_INT_DATA_AVAIL | SDHCI_INT_SPACE_AVAIL |
-	    SDHCI_INT_DMA_END | SDHCI_INT_DATA_END | SDHCI_INT_RESPONSE;
+	    SDHCI_INT_DATA_END | SDHCI_INT_RESPONSE;
 
 	if (host->flags & SDHCI_USE_DMA)
 		intmask &= ~(SDHCI_INT_DATA_AVAIL | SDHCI_INT_SPACE_AVAIL);
@@ -428,6 +428,10 @@ static void sdhci_prepare_data(struct sdhci_host *host, struct mmc_data *data)
 	if (data == NULL)
 		return;
 
+	/* Enable the DMA INT */
+	writel(readl(host->ioaddr + SDHCI_INT_ENABLE) |
+	       SDHCI_INT_DMA_END, host->ioaddr + SDHCI_INT_ENABLE);
+
 	/* Sanity checks */
 	BUG_ON(data->blksz * data->blocks > 524288);
 	BUG_ON(data->blksz > host->mmc->max_blk_size);
@@ -622,14 +626,7 @@ static void sdhci_finish_data(struct sdhci_host *host)
 		blocks = (data->error == 0) ? 0 : 1;
 	else
 		blocks = readl(host->ioaddr + SDHCI_BLOCK_COUNT) >> 16;
-	data->bytes_xfered = data->blksz * (data->blocks - blocks);
-
-	if (!data->error && blocks) {
-		printk(KERN_ERR "%s: Controller signalled completion even "
-		       "though there were blocks left.\n",
-		       mmc_hostname(host->mmc));
-		data->error = -EIO;
-	}
+	data->bytes_xfered = data->blksz * data->blocks;
 
 	if (data->stop) {
 		/*
@@ -823,7 +820,11 @@ static void sdhci_set_clock(struct sdhci_host *host, unsigned int clock)
 	/* Configure the clock control register */
 	clk |=
 	    (readl(host->ioaddr + SDHCI_CLOCK_CONTROL) & (~SDHCI_CLOCK_MASK));
-	writel(clk, host->ioaddr + SDHCI_CLOCK_CONTROL);
+	if (host->plat_data->vendor_ver < ESDHC_VENDOR_V22)
+		writel(clk, host->ioaddr + SDHCI_CLOCK_CONTROL);
+	else
+		writel(clk | SDHCI_CLOCK_SD_EN,
+		       host->ioaddr + SDHCI_CLOCK_CONTROL);
 
 	/* Wait max 10 ms */
 	timeout = 10;
@@ -1248,7 +1249,6 @@ static void sdhci_data_irq(struct sdhci_host *host, u32 intmask)
 		       "though no data operation was in progress.\n",
 		       mmc_hostname(host->mmc), (unsigned)intmask);
 		sdhci_dumpregs(host);
-
 		return;
 	}
 
@@ -1301,21 +1301,26 @@ static void sdhci_data_irq(struct sdhci_host *host, u32 intmask)
 				 */
 				host->data_early = 1;
 			} else {
-				/* ????
-				 * There are the DATA END INT when writing is
-				 * not complete. Double check on it.
-				 */
-				intmask = readl(host->ioaddr +
-						SDHCI_PRESENT_STATE);
-				if (intmask & SDHCI_DATA_ACTIVE)
-					goto data_irq_out;
+
+				if (host->plat_data->vendor_ver
+				    < ESDHC_VENDOR_V22) {
+					/*
+					 * There are the DATA END INT when
+					 * writing is not complete. Double
+					 * check on it. TO2 has been fixed it.
+					 */
+					intmask = readl(host->ioaddr +
+							SDHCI_PRESENT_STATE);
+					if (intmask & SDHCI_DATA_ACTIVE)
+						goto data_irq_out;
+				}
 				sdhci_finish_data(host);
 			}
 		}
 	}
 data_irq_out:
-	/* Enable the INT */
-	writel(intsave, host->ioaddr + SDHCI_INT_ENABLE);
+	/* Enable the INT except the DMA INT */
+	writel(intsave & (~SDHCI_INT_DMA_END), host->ioaddr + SDHCI_INT_ENABLE);
 }
 
 /*!
@@ -1572,7 +1577,7 @@ static int sdhci_resume(struct platform_device *pdev)
 		mmiowb();
 
 		cd_status = chip->hosts[i]->plat_data->status(chip->hosts[i]->
-		mmc->parent);
+							      mmc->parent);
 		if (cd_status)
 			chip->hosts[i]->flags &= ~SDHCI_CD_PRESENT;
 		else
@@ -1706,6 +1711,8 @@ no_detect_irq:
 	sdhci_reset(host, SDHCI_RESET_ALL);
 
 	version = readl(host->ioaddr + SDHCI_HOST_VERSION);
+	host->plat_data->vendor_ver = (version & SDHCI_VENDOR_VER_MASK) >>
+	    SDHCI_VENDOR_VER_SHIFT;
 	version = (version & SDHCI_SPEC_VER_MASK) >> SDHCI_SPEC_VER_SHIFT;
 	if (version != 1) {
 		printk(KERN_ERR "%s: Unknown controller version (%d). "
diff --git a/drivers/mmc/host/mx_sdhci.h b/drivers/mmc/host/mx_sdhci.h
index da265b4..9872931 100644
--- a/drivers/mmc/host/mx_sdhci.h
+++ b/drivers/mmc/host/mx_sdhci.h
@@ -89,6 +89,7 @@
 
 #define SDHCI_CLOCK_CONTROL	0x2C
 #define  SDHCI_DIVIDER_SHIFT	8
+#define  SDHCI_CLOCK_SD_EN	0x00000008
 #define  SDHCI_CLOCK_PER_EN	0x00000004
 #define  SDHCI_CLOCK_HLK_EN	0x00000002
 #define  SDHCI_CLOCK_IPG_EN	0x00000001
@@ -196,6 +197,7 @@ enum {
 #define  SDHCI_SPEC_VER_SHIFT	0
 #define   SDHCI_SPEC_100	0
 #define   SDHCI_SPEC_200	1
+#define   ESDHC_VENDOR_V22 	0x12
 
 struct sdhci_chip;
 
@@ -212,9 +214,9 @@ struct sdhci_host {
 	int flags;		/* Host attributes */
 #define SDHCI_USE_DMA		(1<<0)	/* Host is DMA capable */
 #define SDHCI_REQ_USE_DMA	(1<<1)	/* Use DMA for this req. */
-#define SDHCI_USE_EXTERNAL_DMA	(1<<2)	/* Use DMA for this req. */
-#define SDHCI_CD_PRESENT 	(1<<8)	/* Use DMA for this req. */
-#define SDHCI_WP_ENABLED	(1<<9)	/* Use DMA for this req. */
+#define SDHCI_USE_EXTERNAL_DMA	(1<<2)	/* Use the External DMA */
+#define SDHCI_CD_PRESENT 	(1<<8)	/* CD present */
+#define SDHCI_WP_ENABLED	(1<<9)	/* Write protect */
 
 	unsigned int max_clk;	/* Max possible freq (MHz) */
 	unsigned int min_clk;	/* Min possible freq (MHz) */
diff --git a/include/asm-arm/arch-mxc/mmc.h b/include/asm-arm/arch-mxc/mmc.h
index 53153bf..cf76cce 100644
--- a/include/asm-arm/arch-mxc/mmc.h
+++ b/include/asm-arm/arch-mxc/mmc.h
@@ -17,6 +17,7 @@
 
 struct mxc_mmc_platform_data {
 	unsigned int ocr_mask;	/* available voltages */
+	unsigned int vendor_ver;
 	unsigned int caps;
 	unsigned int min_clk;
 	unsigned int max_clk;
-- 
1.5.4.4

