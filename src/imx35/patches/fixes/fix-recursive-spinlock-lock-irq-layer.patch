Fix a recursive spinlock call in set_irq_handler()

The code below only executes with the desc->lock locked.
Calling the normal set_irq_handler() will try to lock
the same spinlock again. This is not allowed on preempt-RT.

Signed-off-by: Remy Bohmer <linux@bohmer.net>
---
 arch/arm/plat-mxc/gpio.c |    8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

Index: linux-2.6.24/arch/arm/plat-mxc/gpio.c
===================================================================
--- linux-2.6.24.orig/arch/arm/plat-mxc/gpio.c	2009-01-27 22:01:38.000000000 +0100
+++ linux-2.6.24/arch/arm/plat-mxc/gpio.c	2009-01-27 22:06:24.000000000 +0100
@@ -453,25 +453,25 @@ static int gpio_set_irq_type(u32 irq, u3
 	case IRQT_RISING:
 		_set_gpio_edge_ctrl(port, GPIO_TO_INDEX(gpio),
 				    GPIO_INT_RISE_EDGE);
-		set_irq_handler(irq, handle_edge_irq);
+		__set_irq_handler_unlocked(irq, handle_edge_irq);
 		port->irq_is_level_map &= ~(1 << GPIO_TO_INDEX(gpio));
 		break;
 	case IRQT_FALLING:
 		_set_gpio_edge_ctrl(port, GPIO_TO_INDEX(gpio),
 				    GPIO_INT_FALL_EDGE);
-		set_irq_handler(irq, handle_edge_irq);
+		__set_irq_handler_unlocked(irq, handle_edge_irq);
 		port->irq_is_level_map &= ~(1 << GPIO_TO_INDEX(gpio));
 		break;
 	case IRQT_LOW:
 		_set_gpio_edge_ctrl(port, GPIO_TO_INDEX(gpio),
 				    GPIO_INT_LOW_LEV);
-		set_irq_handler(irq, handle_level_irq);
+		__set_irq_handler_unlocked(irq, handle_level_irq);
 		port->irq_is_level_map |= 1 << GPIO_TO_INDEX(gpio);
 		break;
 	case IRQT_HIGH:
 		_set_gpio_edge_ctrl(port, GPIO_TO_INDEX(gpio),
 				    GPIO_INT_HIGH_LEV);
-		set_irq_handler(irq, handle_level_irq);
+		__set_irq_handler_unlocked(irq, handle_level_irq);
 		port->irq_is_level_map |= 1 << GPIO_TO_INDEX(gpio);
 		break;
 	case IRQT_BOTHEDGE:
