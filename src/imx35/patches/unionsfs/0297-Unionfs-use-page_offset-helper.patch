From a5cfae2fdad305dfe6be67e82b21e823b43d320a Mon Sep 17 00:00:00 2001
From: Erez Zadok <ezk@cs.sunysb.edu>
Date: Sat, 29 Sep 2007 01:36:57 -0400
Subject: [PATCH] Unionfs: use page_offset() helper

Signed-off-by: Erez Zadok <ezk@cs.sunysb.edu>
---
 fs/unionfs/mmap.c |    7 +++----
 1 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/fs/unionfs/mmap.c b/fs/unionfs/mmap.c
index cf9545e..8928e99 100644
--- a/fs/unionfs/mmap.c
+++ b/fs/unionfs/mmap.c
@@ -179,8 +179,7 @@ static int unionfs_do_readpage(struct file *file, struct page *page)
 	 * may be a little slower, but a lot safer, as the VFS does a lot of
 	 * the necessary magic for us.
 	 */
-	offset = lower_file->f_pos =
-		((loff_t) page->index << PAGE_CACHE_SHIFT);
+	offset = lower_file->f_pos = page_offset(page);
 	old_fs = get_fs();
 	set_fs(KERNEL_DS);
 	err = vfs_read(lower_file, page_data, PAGE_CACHE_SIZE,
@@ -290,7 +289,7 @@ static int unionfs_commit_write(struct file *file, struct page *page,
 	BUG_ON(lower_file == NULL);
 
 	page_data = (char *)kmap(page);
-	lower_file->f_pos = ((loff_t) page->index << PAGE_CACHE_SHIFT) + from;
+	lower_file->f_pos = page_offset(page) + from;
 
 	/*
 	 * We use vfs_write instead of copying page data and the
@@ -312,7 +311,7 @@ static int unionfs_commit_write(struct file *file, struct page *page,
 
 	inode->i_blocks = lower_inode->i_blocks;
 	/* we may have to update i_size */
-	pos = ((loff_t) page->index << PAGE_CACHE_SHIFT) + to;
+	pos = page_offset(page) + to;
 	if (pos > i_size_read(inode))
 		i_size_write(inode, pos);
 	/* if vfs_write succeeded above, sync up our times */
-- 
1.5.4.3

