From 5a82b4e414c3bd19a12e1452df1ed577561c8af3 Mon Sep 17 00:00:00 2001
From: Erez_Zadok <ezk@cs.sunysb.edu>
Date: Sat, 24 Mar 2007 20:06:44 -0400
Subject: [PATCH] cleanup: spell check all strings and comments

---
 fs/unionfs/branchman.c  |    2 +-
 fs/unionfs/commonfops.c |    2 +-
 fs/unionfs/copyup.c     |   12 ++++++------
 fs/unionfs/file.c       |    2 +-
 fs/unionfs/inode.c      |    4 ++--
 fs/unionfs/lookup.c     |    8 ++++----
 fs/unionfs/main.c       |    2 +-
 fs/unionfs/rename.c     |    6 +++---
 fs/unionfs/sioq.h       |    2 +-
 fs/unionfs/super.c      |    8 ++++----
 fs/unionfs/union.h      |    2 +-
 11 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/fs/unionfs/branchman.c b/fs/unionfs/branchman.c
index a11796c..cd6a22b 100644
--- a/fs/unionfs/branchman.c
+++ b/fs/unionfs/branchman.c
@@ -19,7 +19,7 @@
 #include "union.h"
 
 /*
- * return to userspace the branch indices containing the file in question
+ * return to user-space the branch indices containing the file in question
  *
  * We use fd_set and therefore we are limited to the number of the branches
  * to FD_SETSIZE, which is currently 1024 - plenty for most people
diff --git a/fs/unionfs/commonfops.c b/fs/unionfs/commonfops.c
index bef8035..4a66d10 100644
--- a/fs/unionfs/commonfops.c
+++ b/fs/unionfs/commonfops.c
@@ -130,7 +130,7 @@ static void cleanup_file(struct file *file)
 			int i;	/* holds (possibly) updated branch index */
 			i = find_new_branch_index(file, bindex, sb);
 			if (i < 0)
-				printk(KERN_ERR "unionfs: no supberlock for "
+				printk(KERN_ERR "unionfs: no superblock for "
 				       "file %p\n", file);
 			else {
 				unionfs_read_lock(sb);
diff --git a/fs/unionfs/copyup.c b/fs/unionfs/copyup.c
index 72799a1..5829d85 100644
--- a/fs/unionfs/copyup.c
+++ b/fs/unionfs/copyup.c
@@ -437,7 +437,7 @@ static int copyup_named_dentry(struct inode *dir, struct dentry *dentry,
 		goto out_unlink;
 #endif
 
-	/* do not allow files getting deleted to be reinterposed */
+	/* do not allow files getting deleted to be re-interposed */
 	if (!d_deleted(dentry))
 		unionfs_reinterpose(dentry);
 
@@ -463,7 +463,7 @@ out_unlink:
 	/*
 	 * TODO: should we reset the error to something like -EIO?
 	 *
-	 * If we don't reset, the user may get some non-sensical errors, but
+	 * If we don't reset, the user may get some nonsensical errors, but
 	 * on the other hand, if we reset to EIO, we guarantee that the user
 	 * will get a "confusing" error message.
 	 */
@@ -475,7 +475,7 @@ out_free:
 	/*
 	 * If old_hidden_dentry was a directory, we need to dput it.  If it
 	 * was a file, then it was already dput indirectly by other
-	 * functions we call ablve which operate on regular files.
+	 * functions we call above which operate on regular files.
 	 */
 	if (old_hidden_dentry && old_hidden_dentry->d_inode &&
 	    S_ISDIR(old_hidden_dentry->d_inode->i_mode))
@@ -529,7 +529,7 @@ int copyup_file(struct inode *dir, struct file *file, int bstart,
 }
 
 /*
- * This function replicates the directory structure upto given dentry in the
+ * This function replicates the directory structure up-to given dentry in the
  * bindex branch. Can create directory structure recursively to the right
  * also.
  */
@@ -614,7 +614,7 @@ static void __set_dentry(struct dentry * upper, struct dentry * lower,
 }
 
 /*
- * This function replicates the directory structure upto given dentry
+ * This function replicates the directory structure up-to given dentry
  * in the bindex branch.
  */
 static struct dentry *create_parents_named(struct inode *dir,
@@ -721,7 +721,7 @@ static struct dentry *create_parents_named(struct inode *dir,
 		} else {
 
 			/*
-			 * is the name a whiteout of the childname ?
+			 * is the name a whiteout of the child name ?
 			 * lookup the whiteout child in the underlying file
 			 * system
 			 */
diff --git a/fs/unionfs/file.c b/fs/unionfs/file.c
index 430cb43..47ce5ce 100644
--- a/fs/unionfs/file.c
+++ b/fs/unionfs/file.c
@@ -151,7 +151,7 @@ static unsigned int unionfs_poll(struct file *file, poll_table * wait)
 
 	unionfs_read_lock(file->f_dentry->d_sb);
 	if (unionfs_file_revalidate(file, 0)) {
-		/* We should pretend an error happend. */
+		/* We should pretend an error happened. */
 		mask = POLLERR | POLLIN | POLLOUT;
 		goto out;
 	}
diff --git a/fs/unionfs/inode.c b/fs/unionfs/inode.c
index 6591c0b..9042c0f 100644
--- a/fs/unionfs/inode.c
+++ b/fs/unionfs/inode.c
@@ -614,7 +614,7 @@ static int unionfs_mkdir(struct inode *parent, struct dentry *dentry, int mode)
 
 		unlock_dir(hidden_parent_dentry);
 
-		/* did the mkdir suceed? */
+		/* did the mkdir succeed? */
 		if (err)
 			break;
 
@@ -924,7 +924,7 @@ static int unionfs_permission(struct inode *inode, int mask,
 
 		/*
 		 * check the condition for D-F-D underlying files/directories,
-		 * we dont have to check for files, if we are checking for
+		 * we don't have to check for files, if we are checking for
 		 * directories.
 		 */
 		if (!is_file && !S_ISDIR(hidden_inode->i_mode))
diff --git a/fs/unionfs/lookup.c b/fs/unionfs/lookup.c
index e251b10..b672000 100644
--- a/fs/unionfs/lookup.c
+++ b/fs/unionfs/lookup.c
@@ -229,7 +229,7 @@ struct dentry *unionfs_lookup_backend(struct dentry *dentry,
 				first_hidden_dentry = hidden_dentry;
 				/*
 				 * FIXME: following line needs to be changed
-				 * to allow mountpoint crossing
+				 * to allow mount-point crossing
 				 */
 				first_dentry = parent_dentry;
 				first_hidden_mnt =
@@ -250,7 +250,7 @@ struct dentry *unionfs_lookup_backend(struct dentry *dentry,
 		unionfs_set_lower_dentry_idx(dentry, bindex, hidden_dentry);
 		/*
 		 * FIXME: the following line needs to get fixed to allow
-		 * mountpoint crossing
+		 * mount-point crossing
 		 */
 		unionfs_set_lower_mnt_idx(dentry, bindex,
 					  unionfs_mntget(parent_dentry,
@@ -318,7 +318,7 @@ out_negative:
 
 		/*
 		 * FIXME: the following line needs to be changed to allow
-		 * mountpoint crossing
+		 * mount-point crossing
 		 */
 		first_dentry = dentry;
 		first_hidden_mnt = unionfs_mntget(dentry, bindex);
@@ -347,7 +347,7 @@ out_positive:
 	dput(first_hidden_dentry);
 	unionfs_mntput(first_dentry, first_dentry_offset);
 
-	/* Partial lookups need to reinterpose, or throw away older negs. */
+	/* Partial lookups need to re-interpose, or throw away older negs. */
 	if (lookupmode == INTERPOSE_PARTIAL) {
 		if (dentry->d_inode) {
 			unionfs_reinterpose(dentry);
diff --git a/fs/unionfs/main.c b/fs/unionfs/main.c
index 864fcc9..7b4e7c2 100644
--- a/fs/unionfs/main.c
+++ b/fs/unionfs/main.c
@@ -493,7 +493,7 @@ out:
 }
 
 /*
- * our custom d_alloc_root workalike
+ * our custom d_alloc_root work-alike
  *
  * we can't use d_alloc_root if we want to use our own interpose function
  * unchanged, so we simply call our own "fake" d_alloc_root
diff --git a/fs/unionfs/rename.c b/fs/unionfs/rename.c
index bce5b46..f71bba6 100644
--- a/fs/unionfs/rename.c
+++ b/fs/unionfs/rename.c
@@ -129,7 +129,7 @@ out_unlock:
 
 out:
 	if (!err) {
-		/* Fixup the newdentry. */
+		/* Fixup the new_dentry. */
 		if (bindex < dbstart(new_dentry))
 			set_dbstart(new_dentry, bindex);
 		else if (bindex > dbend(new_dentry))
@@ -360,7 +360,7 @@ static struct dentry *lookup_whiteout(struct dentry *dentry)
 /*
  * We can't copyup a directory, because it may involve huge
  * numbers of children, etc.  Doing that in the kernel would
- * be bad, so instead we let the userspace recurse and ask us
+ * be bad, so instead we let the user-space recurse and ask us
  * to copy up each file separately
  */
 static int may_rename_dir(struct dentry *dentry)
@@ -411,7 +411,7 @@ int unionfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 
 	/*
 	 * if new_dentry is already hidden because of whiteout,
-	 * simply override it even if the whiteouted dir is not empty.
+	 * simply override it even if the whited-out dir is not empty.
 	 */
 	wh_dentry = lookup_whiteout(new_dentry);
 	if (!IS_ERR(wh_dentry))
diff --git a/fs/unionfs/sioq.h b/fs/unionfs/sioq.h
index 7751ff1..623ff19 100644
--- a/fs/unionfs/sioq.h
+++ b/fs/unionfs/sioq.h
@@ -83,7 +83,7 @@ extern int __init init_sioq(void);
 extern __exit void stop_sioq(void);
 extern void run_sioq(work_func_t func, struct sioq_args *args);
 
-/* Extern definitions for our privlege escalation helpers */
+/* Extern definitions for our privilege escalation helpers */
 extern void __unionfs_create(struct work_struct *work);
 extern void __unionfs_mkdir(struct work_struct *work);
 extern void __unionfs_mknod(struct work_struct *work);
diff --git a/fs/unionfs/super.c b/fs/unionfs/super.c
index 045d74d..f022673 100644
--- a/fs/unionfs/super.c
+++ b/fs/unionfs/super.c
@@ -628,7 +628,7 @@ out_no_change:
 	 * WE'RE ALMOST DONE: see if we need to allocate a small-sized new
 	 * vector, copy the vectors to their correct place, release the
 	 * refcnt of the older ones, and return.
-	 * Also handle invalidating any pgaes that will have to be re-read.
+	 * Also handle invalidating any pages that will have to be re-read.
 	 *******************************************************************/
 
 	/*
@@ -691,7 +691,7 @@ out_no_change:
 	 * super.  This function calls invalidate_inode_pages(mapping),
 	 * which calls invalidate_mapping_pages(): the latter, however, will
 	 * not invalidate pages which are dirty, locked, under writeback, or
-	 * mapped into pagetables.  We shouldn't have to worry about dirty
+	 * mapped into page tables.  We shouldn't have to worry about dirty
 	 * or under-writeback pages, because do_remount_sb() called
 	 * fsync_super() which would not have returned until all dirty pages
 	 * were flushed.
@@ -883,8 +883,8 @@ static void unionfs_umount_begin(struct vfsmount *mnt, int flags)
 
 	if (!(flags & MNT_FORCE))
 		/*
-		 * we are not being MNT_FORCEd, therefore we should emulate
-		 * old behaviour
+		 * we are not being MNT_FORCE'd, therefore we should emulate
+		 * old behavior
 		 */
 		return;
 
diff --git a/fs/unionfs/union.h b/fs/unionfs/union.h
index a6a0507..6a03018 100644
--- a/fs/unionfs/union.h
+++ b/fs/unionfs/union.h
@@ -242,7 +242,7 @@ void update_bstart(struct dentry *dentry);
  * EXTERNALS:
  */
 
-/* replicates the directory structure upto given dentry in given branch */
+/* replicates the directory structure up to given dentry in given branch */
 extern struct dentry *create_parents(struct inode *dir, struct dentry *dentry,
 				     int bindex);
 
-- 
1.5.4.3

