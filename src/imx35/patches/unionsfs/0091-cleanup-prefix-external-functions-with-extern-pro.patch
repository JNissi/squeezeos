From fbb75e778bd4a6469c85bcc6a5f70811435a0611 Mon Sep 17 00:00:00 2001
From: Erez Zadok <ezk@shekel.local>
Date: Sat, 24 Mar 2007 23:14:03 -0400
Subject: [PATCH] cleanup: prefix external functions with 'extern' properly

---
 fs/unionfs/sioq.h        |    1 +
 fs/unionfs/union.h       |   58 +++++++++++++++++++++++-----------------------
 include/linux/fs_stack.h |    1 -
 3 files changed, 30 insertions(+), 30 deletions(-)

diff --git a/fs/unionfs/sioq.h b/fs/unionfs/sioq.h
index 623ff19..d5e8afa 100644
--- a/fs/unionfs/sioq.h
+++ b/fs/unionfs/sioq.h
@@ -79,6 +79,7 @@ struct sioq_args {
 	};
 };
 
+/* Extern definitions for SIOQ functions */
 extern int __init init_sioq(void);
 extern __exit void stop_sioq(void);
 extern void run_sioq(work_func_t func, struct sioq_args *args);
diff --git a/fs/unionfs/union.h b/fs/unionfs/union.h
index f634d17..50a93f2 100644
--- a/fs/unionfs/union.h
+++ b/fs/unionfs/union.h
@@ -183,26 +183,26 @@ struct unionfs_dir_state {
 #include "fanout.h"
 #include "sioq.h"
 
-/* Cache creation/deletion routines. */
-void unionfs_destroy_filldir_cache(void);
-int unionfs_init_filldir_cache(void);
-int unionfs_init_inode_cache(void);
-void unionfs_destroy_inode_cache(void);
-int unionfs_init_dentry_cache(void);
-void unionfs_destroy_dentry_cache(void);
+/* externs for cache creation/deletion routines */
+extern void unionfs_destroy_filldir_cache(void);
+extern int unionfs_init_filldir_cache(void);
+extern int unionfs_init_inode_cache(void);
+extern void unionfs_destroy_inode_cache(void);
+extern int unionfs_init_dentry_cache(void);
+extern void unionfs_destroy_dentry_cache(void);
 
 /* Initialize and free readdir-specific  state. */
-int init_rdstate(struct file *file);
-struct unionfs_dir_state *alloc_rdstate(struct inode *inode, int bindex);
-struct unionfs_dir_state *find_rdstate(struct inode *inode, loff_t fpos);
-void free_rdstate(struct unionfs_dir_state *state);
-int add_filldir_node(struct unionfs_dir_state *rdstate, const char *name,
-		     int namelen, int bindex, int whiteout);
-struct filldir_node *find_filldir_node(struct unionfs_dir_state *rdstate,
-				       const char *name, int namelen);
-
-struct dentry **alloc_new_dentries(int objs);
-struct unionfs_data *alloc_new_data(int objs);
+extern int init_rdstate(struct file *file);
+extern struct unionfs_dir_state *alloc_rdstate(struct inode *inode, int bindex);
+extern struct unionfs_dir_state *find_rdstate(struct inode *inode, loff_t fpos);
+extern void free_rdstate(struct unionfs_dir_state *state);
+extern int add_filldir_node(struct unionfs_dir_state *rdstate, const char *name,
+			    int namelen, int bindex, int whiteout);
+extern struct filldir_node *find_filldir_node(struct unionfs_dir_state *rdstate,
+					      const char *name, int namelen);
+
+extern struct dentry **alloc_new_dentries(int objs);
+extern struct unionfs_data *alloc_new_data(int objs);
 
 /* We can only use 32-bits of offset for rdstate --- blech! */
 #define DIREOF (0xfffff)
@@ -235,8 +235,8 @@ static inline void double_lock_dentry(struct dentry *d1, struct dentry *d2)
 }
 
 extern int new_dentry_private_data(struct dentry *dentry);
-void free_dentry_private_data(struct unionfs_dentry_info *udi);
-void update_bstart(struct dentry *dentry);
+extern void free_dentry_private_data(struct unionfs_dentry_info *udi);
+extern void update_bstart(struct dentry *dentry);
 
 /*
  * EXTERNALS:
@@ -245,6 +245,7 @@ void update_bstart(struct dentry *dentry);
 /* replicates the directory structure up to given dentry in given branch */
 extern struct dentry *create_parents(struct inode *dir, struct dentry *dentry,
 				     int bindex);
+extern int make_dir_opaque(struct dentry *dir, int bindex);
 
 /* partial lookup */
 extern int unionfs_partial_lookup(struct dentry *dentry);
@@ -303,10 +304,11 @@ extern long unionfs_ioctl(struct file *file, unsigned int cmd,
 /* Inode operations */
 extern int unionfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 			  struct inode *new_dir, struct dentry *new_dentry);
-int unionfs_unlink(struct inode *dir, struct dentry *dentry);
-int unionfs_rmdir(struct inode *dir, struct dentry *dentry);
+extern int unionfs_unlink(struct inode *dir, struct dentry *dentry);
+extern int unionfs_rmdir(struct inode *dir, struct dentry *dentry);
 
-int __unionfs_d_revalidate_chain(struct dentry *dentry, struct nameidata *nd);
+extern int __unionfs_d_revalidate_chain(struct dentry *dentry,
+					struct nameidata *nd);
 
 /* The values for unionfs_interpose's flag. */
 #define INTERPOSE_DEFAULT	0
@@ -319,10 +321,10 @@ extern int unionfs_interpose(struct dentry *this_dentry,
 			     struct super_block *sb, int flag);
 
 /* Branch management ioctls. */
-int unionfs_ioctl_incgen(struct file *file, unsigned int cmd,
-			 unsigned long arg);
-int unionfs_ioctl_queryfile(struct file *file, unsigned int cmd,
-			    unsigned long arg);
+extern int unionfs_ioctl_incgen(struct file *file, unsigned int cmd,
+				unsigned long arg);
+extern int unionfs_ioctl_queryfile(struct file *file, unsigned int cmd,
+				   unsigned long arg);
 
 #ifdef CONFIG_UNION_FS_XATTR
 /* Extended attribute functions. */
@@ -456,8 +458,6 @@ static inline void unlock_dir(struct dentry *dir)
 	dput(dir);
 }
 
-extern int make_dir_opaque(struct dentry *dir, int bindex);
-
 static inline struct vfsmount *unionfs_mntget(struct dentry *dentry,
 					      int bindex)
 {
diff --git a/include/linux/fs_stack.h b/include/linux/fs_stack.h
index 6a78d83..f90d1c8 100644
--- a/include/linux/fs_stack.h
+++ b/include/linux/fs_stack.h
@@ -22,7 +22,6 @@
 /* externs for fs/stack.c */
 extern void fsstack_copy_attr_all(struct inode *dest, const struct inode *src,
 				  int (*get_nlinks)(struct inode *));
-
 extern void fsstack_copy_inode_size(struct inode *dst,
 				    const struct inode *src);
 
-- 
1.5.4.3

