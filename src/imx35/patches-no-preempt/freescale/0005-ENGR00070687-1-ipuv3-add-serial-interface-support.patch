From f1ec9f0f09133719ddce94c4148702a8704bb701 Mon Sep 17 00:00:00 2001
From: Rob Herring <r.herring@freescale.com>
Date: Fri, 5 Sep 2008 15:22:06 -0500
Subject: [PATCH] ENGR00070687-1 ipuv3: add serial interface support

Add ipuv3 serial interface support. Only direct, non-DMA access is currently
supported.
Modify Epson VGA driver to work over SPI or IPU serial.

Signed-off-by: Rob Herring <r.herring@freescale.com>
---
 drivers/mxc/Kconfig                 |    4 +-
 drivers/mxc/ipu3/ipu_common.c       |   63 ++++++++++++-----
 drivers/mxc/ipu3/ipu_disp.c         |  132 +++++++++++++++++++++++++++-------
 drivers/mxc/ipu3/ipu_prv.h          |    2 +-
 drivers/mxc/ipu3/ipu_regs.h         |   53 ++++++++-------
 drivers/video/mxc/mxcfb_epson_vga.c |  123 ++++++++++++++++++++++++++------
 include/asm-arm/arch-mxc/ipu.h      |   16 ++++
 7 files changed, 296 insertions(+), 97 deletions(-)

diff --git a/drivers/mxc/Kconfig b/drivers/mxc/Kconfig
index f41958f..3af42e2 100644
--- a/drivers/mxc/Kconfig
+++ b/drivers/mxc/Kconfig
@@ -8,8 +8,8 @@ config MXC_IPU
 	bool "Image Processing Unit Driver"
 	depends on !ARCH_MX21
 	depends on !ARCH_MX27
-	select MXC_IPU_V1 if !ARCH_MX37
-	select MXC_IPU_V3 if ARCH_MX37
+	select MXC_IPU_V1 if !ARCH_MX37 && !ARCH_MX51
+	select MXC_IPU_V3 if ARCH_MX37 || ARCH_MX51
 	help
 	  If you plan to use the Image Processing unit, say
 	  Y here. IPU is needed by Framebuffer and V4L2 drivers.
diff --git a/drivers/mxc/ipu3/ipu_common.c b/drivers/mxc/ipu3/ipu_common.c
index 8c723b6..5c03af1 100644
--- a/drivers/mxc/ipu3/ipu_common.c
+++ b/drivers/mxc/ipu3/ipu_common.c
@@ -45,7 +45,7 @@ struct clk *g_ipu_clk;
 bool g_ipu_clk_enabled;
 struct clk *g_di_clk[2];
 struct clk *g_ipu_csi_clk;
-ipu_channel_t g_ipu_di_channel[2];
+unsigned char g_dc_di_assignment[10];
 int g_ipu_irq[2];
 int g_ipu_hw_rev;
 bool g_sec_chan_en[21];
@@ -73,6 +73,7 @@ u32 *ipu_dmfc_reg;
 u32 *ipu_di_reg[2];
 u32 *ipu_cpmem_base;
 u32 *ipu_tpmem_base;
+u32 *ipu_disp_base[2];
 
 /* Static functions */
 static irqreturn_t ipu_irq_handler(int irq, void *desc);
@@ -159,6 +160,7 @@ static int ipu_probe(struct platform_device *pdev)
 	ipu_cpmem_base = ioremap(ipu_base + IPU_CPMEM_REG_BASE, PAGE_SIZE);
 	ipu_tpmem_base = ioremap(ipu_base + IPU_TPM_REG_BASE, SZ_64K);
 	ipu_dc_tmpl_reg = ioremap(ipu_base + IPU_DC_TMPL_REG_BASE, SZ_128K);
+	ipu_disp_base[1] = ioremap(ipu_base + IPU_DISP1_BASE, SZ_4K);
 
 	dev_dbg(g_ipu_dev, "IPU CM Regs = %p\n", ipu_cm_reg);
 	dev_dbg(g_ipu_dev, "IPU IC Regs = %p\n", ipu_ic_reg);
@@ -171,6 +173,7 @@ static int ipu_probe(struct platform_device *pdev)
 	dev_dbg(g_ipu_dev, "IPU CPMem = %p\n", ipu_cpmem_base);
 	dev_dbg(g_ipu_dev, "IPU TPMem = %p\n", ipu_tpmem_base);
 	dev_dbg(g_ipu_dev, "IPU DC Template Mem = %p\n", ipu_dc_tmpl_reg);
+	dev_dbg(g_ipu_dev, "IPU Display Region 1 Mem = %p\n", ipu_disp_base[1]);
 
 	/* Enable IPU and CSI clocks */
 	/* Get IPU clock freq */
@@ -203,6 +206,9 @@ static int ipu_probe(struct platform_device *pdev)
 	/* Set sync refresh channels as high priority */
 	__raw_writel(0x18800000L, IDMAC_CHA_PRI(0));
 
+	/* Set MCU_T to divide MCU access window into 2 */
+	__raw_writel(0x00400000L | (IPU_MCU_T_DEFAULT << 18), IPU_DISP_GEN);
+
 	clk_disable(g_ipu_clk);
 
 	return 0;
@@ -228,6 +234,7 @@ int ipu_remove(struct platform_device *pdev)
 	iounmap(ipu_cpmem_base);
 	iounmap(ipu_tpmem_base);
 	iounmap(ipu_dc_tmpl_reg);
+	iounmap(ipu_disp_base[1]);
 
 	return 0;
 }
@@ -353,7 +360,7 @@ int32_t ipu_init_channel(ipu_channel_t channel, ipu_channel_params_t *params)
 			goto err;
 		}
 
-		g_ipu_di_channel[params->mem_dc_sync.di] = MEM_DC_SYNC;
+		g_dc_di_assignment[1] = params->mem_dc_sync.di;
 		_ipu_dc_init(1, params->mem_dc_sync.di,
 			     params->mem_dc_sync.interlaced);
 		ipu_di_use_count[params->mem_dc_sync.di]++;
@@ -361,12 +368,12 @@ int32_t ipu_init_channel(ipu_channel_t channel, ipu_channel_params_t *params)
 		ipu_dmfc_use_count++;
 		break;
 	case MEM_BG_SYNC:
-		if (params->mem_dc_sync.di > 1) {
+		if (params->mem_dp_bg_sync.di > 1) {
 			ret = -EINVAL;
 			goto err;
 		}
 
-		g_ipu_di_channel[params->mem_dp_bg_sync.di] = MEM_BG_SYNC;
+		g_dc_di_assignment[5] = params->mem_dp_bg_sync.di;
 		_ipu_dp_init(channel, params->mem_dp_bg_sync.in_pixel_fmt,
 			     params->mem_dp_bg_sync.out_pixel_fmt);
 		_ipu_dc_init(5, params->mem_dp_bg_sync.di,
@@ -383,6 +390,28 @@ int32_t ipu_init_channel(ipu_channel_t channel, ipu_channel_params_t *params)
 		ipu_dp_use_count++;
 		ipu_dmfc_use_count++;
 		break;
+	case DIRECT_ASYNC0:
+		if (params->direct_async.di > 1) {
+			ret = -EINVAL;
+			goto err;
+		}
+
+		g_dc_di_assignment[8] = params->direct_async.di;
+		_ipu_dc_init(8, params->direct_async.di, false);
+		ipu_di_use_count[params->direct_async.di]++;
+		ipu_dc_use_count++;
+		break;
+	case DIRECT_ASYNC1:
+		if (params->direct_async.di > 1) {
+			ret = -EINVAL;
+			goto err;
+		}
+
+		g_dc_di_assignment[9] = params->direct_async.di;
+		_ipu_dc_init(9, params->direct_async.di, false);
+		ipu_di_use_count[params->direct_async.di]++;
+		ipu_dc_use_count++;
+		break;
 	default:
 		dev_err(g_ipu_dev, "Missing channel initialization\n");
 		break;
@@ -488,26 +517,14 @@ void ipu_uninit_channel(ipu_channel_t channel)
 		break;
 	case MEM_DC_SYNC:
 		_ipu_dc_uninit(1);
-		if (g_ipu_di_channel[0] == MEM_DC_SYNC) {
-			g_ipu_di_channel[0] = CHAN_NONE;
-			ipu_di_use_count[0]--;
-		} else if (g_ipu_di_channel[1] == MEM_DC_SYNC) {
-			g_ipu_di_channel[1] = CHAN_NONE;
-			ipu_di_use_count[1]--;
-		}
+		ipu_di_use_count[g_dc_di_assignment[1]]--;
 		ipu_dc_use_count--;
 		ipu_dmfc_use_count--;
 		break;
 	case MEM_BG_SYNC:
 		_ipu_dp_uninit(channel);
 		_ipu_dc_uninit(5);
-		if (g_ipu_di_channel[0] == MEM_BG_SYNC) {
-			g_ipu_di_channel[0] = CHAN_NONE;
-			ipu_di_use_count[0]--;
-		} else if (g_ipu_di_channel[1] == MEM_BG_SYNC) {
-			g_ipu_di_channel[1] = CHAN_NONE;
-			ipu_di_use_count[1]--;
-		}
+		ipu_di_use_count[g_dc_di_assignment[5]]--;
 		ipu_dc_use_count--;
 		ipu_dp_use_count--;
 		ipu_dmfc_use_count--;
@@ -518,6 +535,16 @@ void ipu_uninit_channel(ipu_channel_t channel)
 		ipu_dp_use_count--;
 		ipu_dmfc_use_count--;
 		break;
+	case DIRECT_ASYNC0:
+		_ipu_dc_uninit(8);
+		ipu_di_use_count[g_dc_di_assignment[8]]--;
+		ipu_dc_use_count--;
+		break;
+	case DIRECT_ASYNC1:
+		_ipu_dc_uninit(9);
+		ipu_di_use_count[g_dc_di_assignment[9]]--;
+		ipu_dc_use_count--;
+		break;
 	default:
 		break;
 	}
diff --git a/drivers/mxc/ipu3/ipu_disp.c b/drivers/mxc/ipu3/ipu_disp.c
index 068fbfc..bfeca2c 100644
--- a/drivers/mxc/ipu3/ipu_disp.c
+++ b/drivers/mxc/ipu3/ipu_disp.c
@@ -30,6 +30,7 @@
 #include "ipu_param_mem.h"
 
 #define SYNC_WAVE 0
+#define ASYNC_SER_WAVE 6
 
 /* all value below is determined by fix reg setting in _ipu_dmfc_init*/
 #define DMFC_FIFO_SIZE_28	(128*4)
@@ -357,15 +358,19 @@ void _ipu_dc_init(int dc_chan, int di, bool interlaced)
 			reg |= di ? 0 : DC_WR_CH_CONF_PROG_DI_ID;
 			__raw_writel(reg, DC_WR_CH_CONF(6 - dc_chan));
 		}
-	} else {
+
+		reg = 0x1A;
+		reg |= di << 2;
+		if (interlaced)
+			reg |= DC_WR_CH_CONF_FIELD_MODE;
+		__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
+	} else if ((dc_chan == 8) || (dc_chan == 9)) {
 		/* async channels */
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_DATA_W_0, 0x64, 1);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_DATA_W_1, 0x64, 1);
+		__raw_writel(0xB, DC_WR_CH_CONF(dc_chan));
 	}
 
-	reg = 0x1A;
-	reg |= di << 2;
-	if (interlaced)
-		reg |= DC_WR_CH_CONF_FIELD_MODE;
-	__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
 	__raw_writel(0x00000000, DC_WR_CH_ADDR(dc_chan));
 
 	__raw_writel(0x00000084, DC_GEN);
@@ -383,8 +388,19 @@ void _ipu_dc_uninit(int dc_chan)
 		_ipu_dc_link_event(dc_chan, DC_EVT_EOFIELD, 0, 0);
 		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_CHAN, 0, 0);
 		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_ADDR, 0, 0);
-	} else {
-		/* async channels */
+	} else if ((dc_chan == 8) || (dc_chan == 9)) {
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_ADDR_W_0, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_ADDR_W_1, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_CHAN_W_0, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_CHAN_W_1, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_DATA_W_0, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_DATA_W_1, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_ADDR_R_0, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_ADDR_R_1, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_CHAN_R_0, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_CHAN_R_1, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_DATA_R_0, 0, 0);
+		_ipu_dc_link_event(dc_chan, DC_EVT_NEW_DATA_R_1, 0, 0);
 	}
 }
 
@@ -402,15 +418,15 @@ int _ipu_chan_is_interlaced(ipu_channel_t channel)
 void _ipu_dp_dc_enable(ipu_channel_t channel)
 {
 	uint32_t reg;
-	uint32_t *dc_ch_conf;
+	uint32_t dc_chan;
 	int irq = 0;
 
 	if (channel == MEM_FG_SYNC)
 		irq = IPU_IRQ_DP_SF_END;
 	else if (channel == MEM_DC_SYNC)
-		dc_ch_conf = DC_WR_CH_CONF_1;
+		dc_chan = 1;
 	else if (channel == MEM_BG_SYNC)
-		dc_ch_conf = DC_WR_CH_CONF_5;
+		dc_chan = 5;
 	else
 		return;
 
@@ -424,45 +440,45 @@ void _ipu_dp_dc_enable(ipu_channel_t channel)
 		return;
 	}
 
-	reg = __raw_readl(dc_ch_conf);
+	reg = __raw_readl(DC_WR_CH_CONF(dc_chan));
 	reg |= 4 << DC_WR_CH_CONF_PROG_TYPE_OFFSET;
-	__raw_writel(reg, dc_ch_conf);
+	__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
 
 	reg = __raw_readl(IPU_DISP_GEN);
-	if (g_ipu_di_channel[0] == channel)
-		reg |= DI0_COUNTER_RELEASE;
-	else if (g_ipu_di_channel[1] == channel)
+	if (g_dc_di_assignment[dc_chan])
 		reg |= DI1_COUNTER_RELEASE;
+	else
+		reg |= DI0_COUNTER_RELEASE;
 	__raw_writel(reg, IPU_DISP_GEN);
 }
 
 static irqreturn_t dc_irq_handler(int irq, void *dev_id)
 {
 	u32 reg;
-	uint32_t *dc_ch_conf;
+	uint32_t dc_chan;
 	ipu_channel_t channel;
 	struct completion *comp = dev_id;
 
 	if (irq == IPU_IRQ_DP_SF_END) {
 		channel = MEM_BG_SYNC;
-		dc_ch_conf = DC_WR_CH_CONF_5;
+		dc_chan = 5;
 	} else if (irq == IPU_IRQ_DC_FC_1) {
 		channel = MEM_DC_SYNC;
-		dc_ch_conf = DC_WR_CH_CONF_1;
+		dc_chan = 1;
 	} else {
 		return IRQ_HANDLED;
 	}
 
 	reg = __raw_readl(IPU_DISP_GEN);
-	if (g_ipu_di_channel[0] == channel)
-		reg &= ~DI0_COUNTER_RELEASE;
-	else if (g_ipu_di_channel[1] == channel)
+	if (g_dc_di_assignment[dc_chan])
 		reg &= ~DI1_COUNTER_RELEASE;
+	else
+		reg &= ~DI0_COUNTER_RELEASE;
 	__raw_writel(reg, IPU_DISP_GEN);
 
-	reg = __raw_readl(dc_ch_conf);
+	reg = __raw_readl(DC_WR_CH_CONF(dc_chan));
 	reg &= ~DC_WR_CH_CONF_PROG_TYPE_MASK;
-	__raw_writel(reg, dc_ch_conf);
+	__raw_writel(reg, DC_WR_CH_CONF(dc_chan));
 
 	complete(comp);
 	return IRQ_HANDLED;
@@ -474,16 +490,16 @@ void _ipu_dp_dc_disable(ipu_channel_t channel)
 	uint32_t lock_flags;
 	uint32_t reg;
 	uint32_t csc;
-	uint32_t *dc_ch_conf;
+	uint32_t dc_chan;
 	int irq = 0;
 	int timeout = 50;
 	DECLARE_COMPLETION_ONSTACK(dc_comp);
 
 	if (channel == MEM_DC_SYNC) {
-		dc_ch_conf = DC_WR_CH_CONF_1;
+		dc_chan = 1;
 		irq = IPU_IRQ_DC_FC_1;
 	} else if (channel == MEM_BG_SYNC) {
-		dc_ch_conf = DC_WR_CH_CONF_5;
+		dc_chan = 5;
 		irq = IPU_IRQ_DP_SF_END;
 	} else if (channel == MEM_FG_SYNC) {
 		/* Disable FG channel */
@@ -553,6 +569,7 @@ void _ipu_init_dc_mappings(void)
 int _ipu_pixfmt_to_map(uint32_t fmt)
 {
 	switch (fmt) {
+	case IPU_PIX_FMT_GENERIC:
 	case IPU_PIX_FMT_RGB24:
 		return 0;
 	case IPU_PIX_FMT_RGB666:
@@ -807,6 +824,58 @@ int32_t ipu_init_sync_panel(int disp, uint32_t pixel_clk,
 }
 EXPORT_SYMBOL(ipu_init_sync_panel);
 
+
+int ipu_init_async_panel(int disp, int type, uint32_t cycle_time,
+			 uint32_t pixel_fmt, ipu_adc_sig_cfg_t sig)
+{
+	unsigned long lock_flags;
+	int map;
+	u32 ser_conf = 0;
+	u32 div;
+	u32 di_clk = clk_get_rate(g_di_clk[disp]);
+
+	/* round up cycle_time, then calcalate the divider using scaled math */
+	cycle_time += (1000000000UL / di_clk) - 1;
+	div = (cycle_time * (di_clk / 256UL)) / (1000000000UL / 256UL);
+
+	map = _ipu_pixfmt_to_map(pixel_fmt);
+	if (map < 0)
+		return -EINVAL;
+
+	spin_lock_irqsave(&ipu_lock, lock_flags);
+
+	if (type == IPU_PANEL_SERIAL) {
+		__raw_writel((div << 24) | ((sig.ifc_width - 1) << 4),
+			     DI_DW_GEN(disp, ASYNC_SER_WAVE));
+
+		_ipu_di_data_pin_config(disp, ASYNC_SER_WAVE, DI_PIN_CS,
+					0, 0, (div * 2) + 1);
+		_ipu_di_data_pin_config(disp, ASYNC_SER_WAVE, DI_PIN_SER_CLK,
+					1, div, div * 2);
+		_ipu_di_data_pin_config(disp, ASYNC_SER_WAVE, DI_PIN_SER_RS,
+					2, 0, 0);
+
+		_ipu_dc_write_tmpl(0x64, WROD(0), 0, map, ASYNC_SER_WAVE, 0, 0);
+
+		/* Configure DC for serial panel */
+		__raw_writel(0x14, DC_DISP_CONF1(1));
+
+		if (sig.clk_pol)
+			ser_conf |= DI_SER_CONF_SERIAL_CLK_POL;
+		if (sig.data_pol)
+			ser_conf |= DI_SER_CONF_SERIAL_DATA_POL;
+		if (sig.rs_pol)
+			ser_conf |= DI_SER_CONF_SERIAL_RS_POL;
+		if (sig.cs_pol)
+			ser_conf |= DI_SER_CONF_SERIAL_CS_POL;
+		__raw_writel(ser_conf, DI_SER_CONF(disp));
+	}
+
+	spin_unlock_irqrestore(&ipu_lock, lock_flags);
+	return 0;
+}
+EXPORT_SYMBOL(ipu_init_async_panel);
+
 /*!
  * This function sets the foreground and background plane global alpha blending
  * modes.
@@ -976,3 +1045,12 @@ int32_t ipu_disp_set_window_pos(ipu_channel_t channel, int16_t x_pos,
 	return 0;
 }
 EXPORT_SYMBOL(ipu_disp_set_window_pos);
+
+void ipu_disp_direct_write(ipu_channel_t channel, u32 value, u32 offset)
+{
+	if (channel == DIRECT_ASYNC0)
+		__raw_writel(value, ipu_disp_base[0] + offset);
+	else if (channel == DIRECT_ASYNC1)
+		__raw_writel(value, ipu_disp_base[1] + offset);
+}
+EXPORT_SYMBOL(ipu_disp_direct_write);
diff --git a/drivers/mxc/ipu3/ipu_prv.h b/drivers/mxc/ipu3/ipu_prv.h
index 5a872c1..cecabdb 100644
--- a/drivers/mxc/ipu3/ipu_prv.h
+++ b/drivers/mxc/ipu3/ipu_prv.h
@@ -26,7 +26,7 @@ extern bool g_ipu_clk_enabled;
 extern struct clk *g_ipu_clk;
 extern struct clk *g_di_clk[2];
 extern struct clk *g_ipu_csi_clk;
-extern ipu_channel_t g_ipu_di_channel[2];
+extern unsigned char g_dc_di_assignment[];
 
 #define IDMA_CHAN_INVALID	0xFF
 
diff --git a/drivers/mxc/ipu3/ipu_regs.h b/drivers/mxc/ipu3/ipu_regs.h
index 7fc6d16..97da482 100644
--- a/drivers/mxc/ipu3/ipu_regs.h
+++ b/drivers/mxc/ipu3/ipu_regs.h
@@ -21,6 +21,9 @@
 #ifndef __IPU_REGS_INCLUDED__
 #define __IPU_REGS_INCLUDED__
 
+#define IPU_DISP0_BASE		0x00000000
+#define IPU_MCU_T_DEFAULT	8
+#define IPU_DISP1_BASE		(IPU_MCU_T_DEFAULT << 25)
 #define IPU_CM_REG_BASE		0x1E000000
 #define IPU_IDMAC_REG_BASE	0x1E008000
 #define IPU_ISP_REG_BASE	0x1E010000
@@ -50,6 +53,7 @@ extern u32 *ipu_dc_tmpl_reg;
 extern u32 *ipu_dmfc_reg;
 extern u32 *ipu_di_reg[];
 extern u32 *ipu_tpmem_base;
+extern u32 *ipu_disp_base[];
 
 /* Register addresses */
 /* IPU Common registers */
@@ -171,9 +175,22 @@ extern u32 *ipu_tpmem_base;
 #define DC_EVT_NEW_CHAN		7
 #define DC_EVT_NEW_DATA		8
 
+#define DC_EVT_NEW_ADDR_W_0	0
+#define DC_EVT_NEW_ADDR_W_1	1
+#define DC_EVT_NEW_CHAN_W_0	2
+#define DC_EVT_NEW_CHAN_W_1	3
+#define DC_EVT_NEW_DATA_W_0	4
+#define DC_EVT_NEW_DATA_W_1	5
+#define DC_EVT_NEW_ADDR_R_0	6
+#define DC_EVT_NEW_ADDR_R_1	7
+#define DC_EVT_NEW_CHAN_R_0	8
+#define DC_EVT_NEW_CHAN_R_1	9
+#define DC_EVT_NEW_DATA_R_0	10
+#define DC_EVT_NEW_DATA_R_1	11
+
 #define dc_ch_offset(ch) \
 ({ \
-	const char _offset[] = { \
+	const u8 _offset[] = { \
 		0, 0x1C, 0x38, 0x54, 0x58, 0x5C, 0x78, 0, 0x94, 0xB4}; \
 	_offset[ch]; \
 })
@@ -282,30 +299,6 @@ enum {
 	TASK_STAT_ACTIVE = 1,
 	TASK_STAT_WAIT4READY = 2,
 
-	/* Register bits */
-	SDC_COM_TFT_COLOR = 0x00000001UL,
-	SDC_COM_FG_EN = 0x00000010UL,
-	SDC_COM_GWSEL = 0x00000020UL,
-	SDC_COM_GLB_A = 0x00000040UL,
-	SDC_COM_KEY_COLOR_G = 0x00000080UL,
-	SDC_COM_BG_EN = 0x00000200UL,
-	SDC_COM_SHARP = 0x00001000UL,
-
-	SDC_V_SYNC_WIDTH_L = 0x00000001UL,
-
-	ADC_CONF_PRP_EN = 0x00000001L,
-	ADC_CONF_PP_EN = 0x00000002L,
-	ADC_CONF_MCU_EN = 0x00000004L,
-
-	ADC_DISP_CONF_SL_MASK = 0x00000FFFL,
-	ADC_DISP_CONF_TYPE_MASK = 0x00003000L,
-	ADC_DISP_CONF_TYPE_XY = 0x00002000L,
-
-	ADC_DISP_VSYNC_D0_MODE_MASK = 0x00000003L,
-	ADC_DISP_VSYNC_D0_WIDTH_MASK = 0x003F0000L,
-	ADC_DISP_VSYNC_D12_MODE_MASK = 0x0000000CL,
-	ADC_DISP_VSYNC_D12_WIDTH_MASK = 0x3F000000L,
-
 	/* Image Converter Register bits */
 	IC_CONF_PRPENC_EN = 0x00000001,
 	IC_CONF_PRPENC_CSC1 = 0x00000002,
@@ -417,6 +410,13 @@ enum {
 	DP_COM_CONF_CSC_DEF_FG = 0x00000300,
 	DP_COM_CONF_CSC_DEF_BG = 0x00000200,
 	DP_COM_CONF_CSC_DEF_BOTH = 0x00000100,
+
+	DI_SER_CONF_LLA_SER_ACCESS = 0x00000020,
+	DI_SER_CONF_SERIAL_CLK_POL = 0x00000010,
+	DI_SER_CONF_SERIAL_DATA_POL = 0x00000008,
+	DI_SER_CONF_SERIAL_RS_POL = 0x00000004,
+	DI_SER_CONF_SERIAL_CS_POL = 0x00000002,
+	DI_SER_CONF_WAIT4SERIAL = 0x00000001,
 };
 
 enum di_pins {
@@ -428,6 +428,9 @@ enum di_pins {
 	DI_PIN16 = 5,
 	DI_PIN17 = 6,
 	DI_PIN_CS = 7,
+
+	DI_PIN_SER_CLK = 0,
+	DI_PIN_SER_RS = 1,
 };
 
 enum di_sync_wave {
diff --git a/drivers/video/mxc/mxcfb_epson_vga.c b/drivers/video/mxc/mxcfb_epson_vga.c
index c75c4b4..74510fe 100644
--- a/drivers/video/mxc/mxcfb_epson_vga.c
+++ b/drivers/video/mxc/mxcfb_epson_vga.c
@@ -33,12 +33,15 @@
 #include <linux/errno.h>
 #include <linux/fb.h>
 #include <linux/init.h>
+#include <linux/platform_device.h>
 #include <linux/regulator/regulator.h>
 #include <linux/spi/spi.h>
 #include <asm/arch/mxcfb.h>
+#include <asm/arch/ipu.h>
 #include <asm/mach-types.h>
 
 static struct spi_device *lcd_spi;
+static struct device *lcd_dev;
 
 static void lcd_init(void);
 static void lcd_poweron(void);
@@ -119,20 +122,20 @@ static struct notifier_block nb = {
  *
  * @return 	Returns 0 on SUCCESS and error on FAILURE.
  */
-static int __devinit lcd_spi_probe(struct spi_device *spi)
+static int __devinit lcd_probe(struct device *dev)
 {
 	int i;
-	struct mxc_lcd_platform_data *plat = spi->dev.platform_data;
+	struct mxc_lcd_platform_data *plat = dev->platform_data;
 
-	lcd_spi = spi;
+	lcd_dev = dev;
 
 	if (plat) {
-		io_reg = regulator_get(&spi->dev, plat->io_reg);
+		io_reg = regulator_get(dev, plat->io_reg);
 		if (!IS_ERR(io_reg)) {
 			regulator_set_voltage(io_reg, 1800000);
 			regulator_enable(io_reg);
 		}
-		core_reg = regulator_get(&spi->dev, plat->core_reg);
+		core_reg = regulator_get(dev, plat->core_reg);
 		if (!IS_ERR(core_reg)) {
 			regulator_set_voltage(core_reg, 2800000);
 			regulator_enable(core_reg);
@@ -141,12 +144,8 @@ static int __devinit lcd_spi_probe(struct spi_device *spi)
 		lcd_reset = plat->reset;
 		if (lcd_reset)
 			lcd_reset();
-
 	}
 
-	spi->bits_per_word = 9;
-	spi_setup(spi);
-
 	lcd_init();
 
 	for (i = 0; i < num_registered_fb; i++) {
@@ -162,16 +161,54 @@ static int __devinit lcd_spi_probe(struct spi_device *spi)
 	return 0;
 }
 
-static int __devexit lcd_spi_remove(struct spi_device *spi)
+static int __devinit lcd_plat_probe(struct platform_device *pdev)
+{
+	ipu_adc_sig_cfg_t sig;
+	ipu_channel_params_t param;
+
+	memset(&sig, 0, sizeof(sig));
+	sig.ifc_width = 9;
+	sig.clk_pol = 1;
+	ipu_init_async_panel(0, IPU_PANEL_SERIAL, 90, IPU_PIX_FMT_GENERIC, sig);
+
+	memset(&param, 0, sizeof(param));
+	ipu_init_channel(DIRECT_ASYNC1, &param);
+
+	return lcd_probe(&pdev->dev);
+}
+
+static int __devinit lcd_spi_probe(struct spi_device *spi)
+{
+	lcd_spi = spi;
+
+	spi->bits_per_word = 9;
+	spi_setup(spi);
+
+	return lcd_probe(&spi->dev);
+}
+
+static int __devexit lcd_remove(struct device *dev)
 {
 	fb_unregister_client(&nb);
 	lcd_poweroff();
-	regulator_put(io_reg, &spi->dev);
-	regulator_put(core_reg, &spi->dev);
+	regulator_put(io_reg, dev);
+	regulator_put(core_reg, dev);
 
 	return 0;
 }
 
+static int __devexit lcd_spi_remove(struct spi_device *spi)
+{
+	int ret = lcd_remove(&spi->dev);
+	lcd_spi = NULL;
+	return ret;
+}
+
+static int __devexit lcd_plat_remove(struct platform_device *pdev)
+{
+	return lcd_remove(&pdev->dev);
+}
+
 static int lcd_suspend(struct spi_device *spi, pm_message_t message)
 {
 	return 0;
@@ -197,6 +234,15 @@ static struct spi_driver lcd_spi_dev_driver = {
 	.resume = lcd_resume,
 };
 
+static struct platform_driver lcd_plat_driver = {
+	.driver = {
+		   .name = "lcd_spi",
+		   .owner = THIS_MODULE,
+		   },
+	.probe = lcd_plat_probe,
+	.remove = __devexit_p(lcd_plat_remove),
+};
+
 #define param(x) ((x) | 0x100)
 
 /*
@@ -207,8 +253,16 @@ static void lcd_init(void)
 {
 	const u16 cmd[] = { 0x36, param(0), 0x3A, param(0x60) };
 
-	dev_dbg(&lcd_spi->dev, "initializing LCD\n");
-	spi_write(lcd_spi, (const u8 *)cmd, ARRAY_SIZE(cmd));
+	dev_dbg(lcd_dev, "initializing LCD\n");
+
+	if (lcd_spi) {
+		spi_write(lcd_spi, (const u8 *)cmd, ARRAY_SIZE(cmd));
+	} else {
+		ipu_disp_direct_write(DIRECT_ASYNC1, 0x36, 0);
+		ipu_disp_direct_write(DIRECT_ASYNC1, 0x100, 0);
+		ipu_disp_direct_write(DIRECT_ASYNC1, 0x3A, 0);
+		ipu_disp_direct_write(DIRECT_ASYNC1, 0x160, 0);
+	}
 }
 
 static int lcd_on;
@@ -224,11 +278,18 @@ static void lcd_poweron(void)
 	if (lcd_on)
 		return;
 
-	dev_dbg(&lcd_spi->dev, "turning on LCD\n");
-	msleep(60);
-	spi_write(lcd_spi, (const u8 *)&slpout, 1);
-	msleep(60);
-	spi_write(lcd_spi, (const u8 *)&dison, 1);
+	dev_dbg(lcd_dev, "turning on LCD\n");
+
+	if (lcd_spi) {
+		msleep(60);
+		spi_write(lcd_spi, (const u8 *)&slpout, 1);
+		msleep(60);
+		spi_write(lcd_spi, (const u8 *)&dison, 1);
+	} else {
+		ipu_disp_direct_write(DIRECT_ASYNC1, slpout, 0);
+		msleep(60);
+		ipu_disp_direct_write(DIRECT_ASYNC1, dison, 0);
+	}
 	lcd_on = 1;
 }
 
@@ -244,17 +305,31 @@ static void lcd_poweroff(void)
 	if (!lcd_on)
 		return;
 
-	dev_dbg(&lcd_spi->dev, "turning off LCD\n");
-	msleep(60);
-	spi_write(lcd_spi, (const u8 *)&disoff, 1);
-	msleep(60);
-	spi_write(lcd_spi, (const u8 *)&slpin, 1);
+	dev_dbg(lcd_dev, "turning off LCD\n");
+
+	if (lcd_spi) {
+		msleep(60);
+		spi_write(lcd_spi, (const u8 *)&disoff, 1);
+		msleep(60);
+		spi_write(lcd_spi, (const u8 *)&slpin, 1);
+	} else {
+		ipu_disp_direct_write(DIRECT_ASYNC1, disoff, 0);
+		msleep(60);
+		ipu_disp_direct_write(DIRECT_ASYNC1, slpin, 0);
+	}
 	lcd_on = 0;
 }
 
 static int __init epson_lcd_init(void)
 {
+	int ret;
+
+	ret = platform_driver_register(&lcd_plat_driver);
+	if (ret)
+		return ret;
+
 	return spi_register_driver(&lcd_spi_dev_driver);
+
 }
 
 static void __exit epson_lcd_exit(void)
diff --git a/include/asm-arm/arch-mxc/ipu.h b/include/asm-arm/arch-mxc/ipu.h
index 9e4f68b..b4647da 100644
--- a/include/asm-arm/arch-mxc/ipu.h
+++ b/include/asm-arm/arch-mxc/ipu.h
@@ -187,6 +187,8 @@ typedef enum {
 	MEM_PF_V_MEM = _MAKE_CHAN(21, 28, 31, 0xFF),	/*!< V Memory to Post-filter to V Memory */
 
 	MEM_DC_SYNC = CHAN_NONE,
+	DIRECT_ASYNC0 = CHAN_NONE,
+	DIRECT_ASYNC1 = CHAN_NONE,
 #else
 	MEM_ROT_ENC_MEM = _MAKE_CHAN(1, 45, NO_DMA, NO_DMA, 48),
 	MEM_ROT_VF_MEM = _MAKE_CHAN(2, 46, NO_DMA, NO_DMA, 49),
@@ -206,6 +208,9 @@ typedef enum {
 	MEM_BG_ASYNC1 = _MAKE_ALT_CHAN(MEM_BG_ASYNC0),
 	MEM_FG_ASYNC1 = _MAKE_ALT_CHAN(MEM_FG_ASYNC0),
 
+	DIRECT_ASYNC0 = _MAKE_CHAN(13, NO_DMA, NO_DMA, NO_DMA, NO_DMA),
+	DIRECT_ASYNC1 = _MAKE_CHAN(14, NO_DMA, NO_DMA, NO_DMA, NO_DMA),
+
 	MEM_PP_ADC = CHAN_NONE,
 	ADC_SYS2 = CHAN_NONE,
 #endif
@@ -224,6 +229,9 @@ typedef enum {
 	IPU_SEC_INPUT_BUFFER = IPU_GRAPH_IN_BUFFER,
 } ipu_buffer_t;
 
+#define IPU_PANEL_SERIAL		1
+#define IPU_PANEL_PARALLEL		2
+
 /*!
  * Enumeration of DI ports for ADC.
  */
@@ -384,6 +392,9 @@ typedef union {
 		uint32_t out_pixel_fmt;
 	} mem_dp_fg_sync;
 	struct {
+		uint32_t di;
+	} direct_async;
+	struct {
 		display_port_t disp;
 		mcu_mode_t ch_mode;
 		uint32_t out_left;
@@ -708,6 +719,7 @@ typedef struct {
 	unsigned data_pol:1;
 	unsigned clk_pol:1;
 	unsigned cs_pol:1;
+	unsigned rs_pol:1;
 	unsigned addr_pol:1;
 	unsigned read_pol:1;
 	unsigned write_pol:1;
@@ -844,6 +856,10 @@ int32_t ipu_disp_set_global_alpha(ipu_channel_t channel, bool enable,
 int32_t ipu_disp_set_color_key(ipu_channel_t channel, bool enable,
 			       uint32_t colorKey);
 
+int ipu_init_async_panel(int disp, int type, uint32_t cycle_time,
+			 uint32_t pixel_fmt, ipu_adc_sig_cfg_t sig);
+void ipu_disp_direct_write(ipu_channel_t channel, u32 value, u32 offset);
+
 /* ADC API */
 int32_t ipu_adc_write_template(display_port_t disp, uint32_t * pCmd,
 			       bool write);
-- 
1.5.4.4

